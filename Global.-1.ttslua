function deepcopy(orig, copies)
  copies = copies or {}
  local orig_type = type(orig)
  local copy
  if orig_type == 'table' then
      if copies[orig] then
          copy = copies[orig]
      else
          copy = {}
          copies[orig] = copy
          for orig_key, orig_value in next, orig, nil do
              copy[deepcopy(orig_key, copies)] = deepcopy(orig_value, copies)
          end
          setmetatable(copy, deepcopy(getmetatable(orig), copies))
      end
  else -- number, string, boolean, etc
      copy = orig
  end
  return copy
end
-- (cond) ? a : b
function ternaryOp(cond,a,b)
  if cond==true then return a else return b end
end
function secondsToHHMMSS(t)
  -- t in seconds
  local hours = math.floor(t/3600)
  local mins  = math.floor((t-hours*3600)/60)
  local secs  = math.floor((t-hours*3600-mins*60))
  rv = ("%02d:%02d:%02d"):format(hours,mins,secs)
  return rv
end
function trim(s)
  local from = s:match"^%s*()"
  return from > #s and "" or s:match(".*%S", from)
end
-- checks existence in table

function indexTable(t_table, t_element, f_comp)
  local f_comp = ternaryOp(f_comp~=nil, f_comp, function(a,b) return (a[2]==b) end)
  assert(type(f_comp)=='function',"table.indexTable: provided comparator must be function f(a,b) returning bool, where a[1] is the key, a[2] is the value")
  for key,value in next, t_table do
      if f_comp({key,value},t_element) then
          return key
      end
  end
  return nil
end

function inTable(t_table, t_element, f_comp)
  -- this is just to look for the value in a key,value, so lets modify function for our indexTable
  local fComp
  if f_comp~=nil then
      fComp = function(a,b) return f_comp(a[2],b) end
  else
      fComp = nil
  end
  return (indexTable(t_table,t_element,fComp)~=nil)
end

function isKey(t_table, t_element)
  return (indexTable(t_table,t_element,function(a,b) return (a[1]==b) end)~=nil)
end

function flattenTbls(tbls)
  local tbl = {}
  for i,o_tbl in next, tbls do
    for j, tbl_entry in next, o_tbl do
      tbl[#tbl+1] = tbl_entry
    end
  end
  return tbl
end

function minSet(...)
  local t_out = {}
  for i,v in ipairs(table.pack(...)) do
    assert(type(v)=='table',('minSet: expected #%d as table, got %s'):format(i,type(v) or 'nil'))
    for j, vsub in next, v do
      table.insert(t_out,vsub)
    end
  end
  t_out = table.sort(t_out)
  return t_out
end
--serialize getData()
function dump(o)
    if type(o) == 'table' then
       local s = '{ '
       for k,v in pairs(o) do
          if type(k) ~= 'number' then k = '"'..k..'"' end
          s = s .. '['..k..'] = ' .. dump(v) .. ','
       end
       return s .. '} '
    -- elseif type(o)=='userdata' then

    elseif type(o)=='string' then
       return ('"%s"'):format(o)
    else
       return tostring(o)
    end
 end

function strCheckBox(cond,toappend)
  local retval = ''
  if cond==true then retval = '☑ '
  else retval = '□ '
  end
  return ('%s%s'):format(retval,toappend or '')
end

--===== b64 from lua-users.org/wiki/BaseSixtyFour
 -- character table string
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

-- encoding
function enc(data)
    return ((data:gsub('.', function(x)
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

-- decoding
function dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end
--===============
function jdec(data)
  return JSON.decode(dec(data))
end
function destroyTableOfUserdata(tbl,replc)
    for x,v in next, tbl do
        if type(v)=='table' then
            tbl[x] = destroyTableOfUserdata(tbl[x],replc)
        elseif type(v)=='userdata' then
            dlog(7,{'collapsed obj to guid:',v})
            if tbl[x] ~= nil then tbl[x].destruct() end
            tbl[x] = nil
        end
    end
    return tbl
end

function neuterTableOfUserdata(tbl,replc)
    for x,v in next, tbl do
        if type(v)=='table' then
            tbl[x] = neuterTableOfUserdata(tbl[x],replc)
        elseif type(v)=='userdata' then
            dlog(7,{'collapsed obj to guid:',v})
            tbl[x]=replc..v.getGUID()
        end
    end
    return tbl
end

function rerefTableOfUserdata(tbl,replc)
    if DEBUG_LEVEL == nil then DEBUG_LEVEL = 0 end
    for x,v in next, tbl do
        if type(v)=='table' then
            tbl[x] = rerefTableOfUserdata(tbl[x],replc)
        elseif type(v)=='string' and string.sub(v,1,string.len(replc))==replc then
            dlog(7,{'restoring record at:',tbl,x})
            local objguid = string.sub(v,string.len(replc)+1,string.len(v))
            if DEBUG_LEVEL>=6 then
                tbl[x]=assert(getObjectFromGUID(objguid),"can't be nil! " .. objguid)
            else
                tbl[x]=getObjectFromGUID(objguid)
            end
        end
    end
    return tbl
end

function steamProps(plc)
  local steam_id = dPlayer(plc).steam_id
  local steam_name = dPlayer(plc).steam_name
  return steam_id, steam_name
end

function colorString(string_in, str_color)
  return ('[%s]%s[-]'):format(Color[str_color]:toHex(),string_in)
end

function colorSteamName(plc,xml)
  local steam_id, steam_name = steamProps(plc)
  local out_string = xml and '<color="#%s">%s</color>' or '[%s]%s[-]'
  return (out_string):format(Color[plc]:toHex(),steam_name)
end

--===============52-card-utils===========
--
function cardsToString(tbl)
  local outtbl = {}
  for i,v in next, tbl do
    if type(v) == 'string' then
      local o = getObjectFromGUID(v)
      local index=indexTable(lkup_CARD_VALUES, o.getName(), function(a,b) return a[2].s_rank==b or tostring(a[2].n_rank)==b end)
      if index~=nil then
        outtbl[#outtbl+1] = ('%s%s'):format(lkup_CARD_VALUES[index].sc_rank,lkup_SUIT_VALUES[o.getDescription()].filled)
      end
    elseif type(v) == 'userdata' then
      local index=indexTable(lkup_CARD_VALUES, v.getName(), function(a,b) return a[2].s_rank==b or tostring(a[2].n_rank)==b end)
      if index~=nil then
        outtbl[#outtbl+1] = ('%s%s'):format(lkup_CARD_VALUES[index].sc_rank,lkup_SUIT_VALUES[v.getDescription()].filled)
      end
    end
  end
  return table.concat(outtbl,', ')
end

function deckPRNGShuffle(deck)
  --broadcastToAll("") --Shuffling Normally
  if deck~=nil then deck.shuffle() shuffled=true end
  return shuffled
end

function deckTRNGShuffle(deck)
  shuffled = false
  if options.userandomatmospheric and not deckTRNGShuffle_started then
    deckTRNGShuffle_started = true
    --Atmospheric Noise provided by random.org -- please be aware of their restrictions, and NEVER OVERCALL THIS FUNCTION
    randomsReq = {}
    --if DEBUG_LEVEL > 0 then broadcastToAll("") end --Starting Atmospheric RNG Request
    WebRequest.get('https://www.random.org/sequences/?min=1&max=52&col=1&format=plain&rnd=new', function(req)
      if not req.is_error then
        old_deck_data = deck.getData()
        DeckIDs = {}
        contained_objects = {}
        local i = 1
        sorter = {}
        for num in string.gmatch(req.text, '(%d+)%s*') do
          sorter[i] = tonumber(num)
          i = i + 1
        end
        log(#old_deck_data.DeckIDs)
        for i,num in next, sorter do
          DeckIDs[i] = assert(old_deck_data.DeckIDs[num],"DeckIDs cannot be null - " .. i .. '|' .. num)
          contained_objects[i] = assert(deepcopy(old_deck_data.ContainedObjects[num]),"ContainedObject cannot be null")
        end
        old_deck_data.DeckIDs = DeckIDs
        old_deck_data.ContainedObjects = contained_objects
        deck.destruct()
        deck = spawnObjectData({data=old_deck_data, callback_function = function(obj)
          Wait.frames(function()
            deckTRNGShuffle_started = false
            --broadcastToAll("") --Finished Atmospheric RNG Request
            shuffled = true end, 1) end})
      else
        log(req.error)
        broadcastToAll("Failed Atmospheric RNG Request")
        deckPRNGShuffle(deck)
        deckTRNGShuffle_started=false
      end
    end)
  else
    deckPRNGShuffle(deck)
    deckTRNGShuffle_started = false
  end
end

function getSlotPositions(slots)
  local slotPositions = {}
  slotPositions[10] ={'SB','BB','UTG','UTG+1','UTG+2','MP','LJ','HJ','CO','BTN'}
  slotPositions[9] = {'SB','BB','UTG','UTG+1','MP','LJ','HJ','CO','BTN'}
  slotPositions[8] = {'SB','BB','UTG','MP','LJ','HJ','CO','BTN'}
  slotPositions[7] = {'SB','BB','MP','LJ','HJ','CO','BTN'}
  slotPositions[6] = {'SB','BB','UTG','MP','CO','BTN'}
  slotPositions[5] = {'SB','BB','UTG','CO','BTN'}
  slotPositions[4] = {'SB','BB','UTG','BTN'}
  slotPositions[3] = {'SB','BB','BTN'}
  slotPositions[2] = {'BTN','BB'}
  slotPositions[1] = {'BTN',}
  return slotPositions[slots]
end

util = {
    currency = {},
}
function math.sign(v)
    return (v >= 0 and 1) or -1
end
function math.round(v, bracket)
  assert(bracket~=0,'using this wrong!')
    bracket = bracket or 1
    return math.floor(v/bracket + math.sign(v) * 0.5) * bracket
end
function mach_eps()
--finds the machine epsilon
    local eps = 1
    while 1 - eps ~= 1 do
        eps = eps/2
    end
    return eps
end
function tmptest()
    local suffixes_lookup = {
        [''] = 0,
        ['K']= 3,
        ['M']= 6,
        ['B']= 9,
        ['T']= 12,
        ['dauQ']= 15,
        ['tniuQ']= 18,
        ['txeS']= 21,
        ['tpeS']= 24,
        ['tcO']= 27,
        ['N']= 30,
        ['ceD']= 33,
      }
      local inv_suffixes_lookup = {}
      for i,v in next, suffixes_lookup do
          inv_suffixes_lookup[v] = i:reverse()
      end
      log(string.format('%28s %28s %10s %5s %5s %5s','n1','sn1','k','s1','s2','c'))
    --floating point can sometimes suck a bag of dicks.
    --2 methods, see if they agree.
    for i=0,35 do
        local n1 = 150*(10^i)
        log(util.currency.valueToLabel(n1))
    end
end

function util.currency.valueToLabel(currency_value, characters, prefix)
  local prefix = prefix or '$'
  local fmt = fmt or '%s'
  local sign = ''
  if currency_value < 0 then
    currency_value = -currency_value
    sign = '-'
  end
  local inv_suffixes_lookup = {}
  inv_suffixes_lookup[0] = ''
  inv_suffixes_lookup[3] = 'K'
  inv_suffixes_lookup[6] = 'M'
  inv_suffixes_lookup[9] = 'B'
  inv_suffixes_lookup[12] = 'T'
  inv_suffixes_lookup[15] = 'Quad'
  inv_suffixes_lookup[18] = 'Quint'
  inv_suffixes_lookup[21] = 'Sext'
  inv_suffixes_lookup[24] = 'Sept'
  inv_suffixes_lookup[27] = 'Oct'
  inv_suffixes_lookup[30] = 'N'
  inv_suffixes_lookup[33] = 'Dec'
  local n1 = currency_value
  local sn1 = math.log(n1+1e-13,10)
  local k = math.round(sn1)
  local s1 = k % 3
  local s2 = k - s1 + ((s1==0 and 0) or 0)
  -- clamp s2 to >=0
  local s2 = ((s2>0 and s2) or 0)
  local c=inv_suffixes_lookup[s2]
  --log(string.format('%28.16E %28.16E %10s %5s %5s %5s %7s',n1,sn1,k,s1,s2,c,string.format('%1s%s%-3s','$',n1/10^s2,c)))
  local val = n1/10^s2
  if characters~=nil then
    if k > 4 then
      val = n1/10^s2
      if val < 1000 and val>=100 then bracket = 0.1
      elseif val < 100 and val>=10 then bracket = 0.01
      elseif val < 10 and val>=1   then bracket = 0.001
      end
      val = math.round(val,bracket)
    else
      c = ''
      val = n1
    end
  end
  return string.format('%s%1s%s%-3s',sign,prefix,val,c)
end
function util.currency.valueToName(currency_value)
    local tmp = tostring(comma_value(currency_value))
    return string.format('%q',tmp)
end

function currency_template(_currency_params)
    local stackNum = 1
    local currency = {}
    function currency_entry(_entry_params)
        --with entry_params
        --.value is number:required
        --.name  is string:optional, defaults to comma separated value
        --.label is string:optional, defaults to Metric notation value
        --.standard is bool:optional, defaults to false
        --.custom is table:required, with
        --|--.mesh is string:required
        --|--.diffuse is string:required
        --|--.type is number:optional, defaults to 5 | 5 is a chip
        --|--.material is number:optional, defaults to 1 | 0: plastic, 1: wood, 2: metal, 3: cardboard
        --.params is table:optional, with
        --|--.rotation is table:optional, defaults to {0,90,0} | rotation of the object (in relation to the machine) when it spawns
        --|--.scale is table:optional, defaults to {0.75,0.75,0.75} | the scale at which to spawn the object
        --stack is integer_as_string:required | spot position for collecting/spawning (potzone and betting zone on sidepot)
        local entry_params = {
              ["value"] = assert(_entry_params.value,".value required"), -- Value of the Chip
              ["name"] = _entry_params.name or util.currency.valueToName(_entry_params.value), -- Name of the chip
              ["label"] = _entry_params.label or util.currency.valueToLabel(_entry_params.value), -- Label used for converting machine
              ["standard"] = _entry_params.standard or false, -- Standard tabletop chips (1000, 500, 100, 50, 10)
              ["height"] = _entry_params.height or 0.15,
              ["custom"] =
              {
                ["mesh"] = assert(_entry_params.custom.mesh,".custom.mesh required"), -- obj file
                ["diffuse"] = assert(_entry_params.custom.diffuse,".custom.diffuse required"), -- diffuse image
                ["type"] = _entry_params.custom.type or 5, -- 5 is a 'chip'
                ["material"] = _entry_params.custom.material or 1 -- 0: plastic, 1: wood, 2: metal, 3: cardboard
              },
              ["params"] =
              {
                ["rotation"] = {0, 0, 0}, -- rotation of the object (in relation to the machine) when it spawns
                ["scale"] = {1, 1, 1} -- the scale at which to spawn the object
              },
              ["stack"] = _entry_params.stack or tostring(stackNum) -- spot position for collecting/spawning (potzone and betting zone on sidepot)
        }
        if _entry_params.params then
            entry_params.params["rotation"] = _entry_params.params.rotation or {0, 0, 0} -- rotation of the object (in relation to the machine) when it spawns
            entry_params.params["scale"] = _entry_params.params.scale or {1, 1, 1} -- the scale at which to spawn the object
        end
        if _entry_params.stack == nil then stackNum = stackNum+1 end
        return entry_params
    end
    for i,v in next, _currency_params do
        currency[#currency+1] = currency_entry(v)
    end
    table.sort(currency, function(a,b) return a.stack > b.stack end)
    return currency
end
function comma_value(n) -- credit http://richard.warburton.it
  local left, num, right = string.match(n, '^([^%d]*%d)(%d*)(.-)$')
  return left..(num:reverse():gsub('(%d%d%d)', '%1,'):reverse())..right
end


--======== chip utilities =========
--

chipStackData = { ["GUID"] = "df8b82",["Name"] = "Custom_Model_Stack",["Transform"] = { ["posX"] = 7.65760851209052E-05,["posY"] = 1.39988255500793,["posZ"] = 0.000613684474956244,["rotX"] = 0.539149403572083,["rotY"] --[[RF134--]]= -0.00559188332408667,["rotZ"] = 0.000258632702752948,["scaleX"] = 1,["scaleY"] = 1,["scaleZ"] = 1,} ,["Nickname"] = "",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = false,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] --[[c3RlYWxpbmc]]= true,["Tooltip"] = true,["GridProjection"] --[[cm9tYW50aWNmb29scw]]= false,["HideWhenFaceDown"] = false,["Hands"] = false,["MaterialIndex"] = -1,["MeshIndex"] = -1,["Number"] = 2,["CustomMesh"] = { ["MeshURL"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["DiffuseURL"] = "https://i.imgur.com/OrMbZbF.png",["NormalURL"] --[[c2hpdA]]= "",["ColliderURL"] = "",["Convex"] = true,["MaterialIndex"] = 1,["TypeIndex"] = 5,["CastShadows"] = true,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
std_chipData =      { ["GUID"] = "cb564b",["Name"] = "Chip_10",["Transform"] = { ["posX"] = -12.9366016387939,["posY"] = 1.40896713733673,["posZ"] = -4.87045621871948,["rotX"] = 2.71110337735081E-07,["rotY"] = 90,["rotZ"] = -3.84472542691583E-08,["scaleX"] = 1,["scaleY"] = 1,["scaleZ"] = 1,} ,["Nickname"] = "",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 0.989999949932098,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Value"] = 0,["Locked"] = false,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
std_chipStackData = { ["GUID"] = "a73f5d",["Name"] = "ChipStack",["Transform"] = { ["posX"] = -12.9365978240967,["posY"] = 1.39396715164185,["posZ"] = -4.87046051025391,["rotX"] = 2.72314400717733E-06,["rotY"] = 89.9999313354492,["rotZ"] = -1.83372833362228E-06,["scaleX"] = 1,["scaleY"] = 1,["scaleZ"] = 1,} ,["Nickname"] = "",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 0.989999949932098,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Value"] = 0,["Locked"] = false,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["MaterialIndex"] = -1,["MeshIndex"] = 10,["Number"] = 2,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
function tlog(...)
    if DEBUG_MESSAGES==true then
        log(...)
    end
end

lkup_SUIT_VALUES = {
  ['Spades']   = {filled='♠',hollow='♤'},
  ['Hearts']   = {filled='♥',hollow='♡'},
  ['Diamonds'] = {filled='♦',hollow='♢'},
  ['Clubs']    = {filled='♣',hollow='♧'},
}

lkup_CARD_VALUES = {
  {n_rank=2,  s_rank='Two',   sc_rank='2'},
  {n_rank=3,  s_rank='Three', sc_rank='3'},
  {n_rank=4,  s_rank='Four',  sc_rank='4'},
  {n_rank=5,  s_rank='Five',  sc_rank='5'},
  {n_rank=6,  s_rank='Six',   sc_rank='6'},
  {n_rank=7,  s_rank='Seven', sc_rank='7'},
  {n_rank=8,  s_rank='Eight', sc_rank='8'},
  {n_rank=9,  s_rank='Nine',  sc_rank='9'},
  {n_rank=10, s_rank='Ten',   sc_rank='T'},
  {n_rank=11, s_rank='Jack',  sc_rank='J'},
  {n_rank=12, s_rank='Queen', sc_rank='Q'},
  {n_rank=13, s_rank='King',  sc_rank='K'},
  {n_rank=14, s_rank='Ace',   sc_rank='A'},
  {n_rank=15, s_rank='Joker', sc_rank='W'},
}

--[[Global variables--]]
versionNumber = '0.15.68k'
convertingPlayerColor = ''

quickConvertPlayerChips = false
quickConvertPlayerTime = nil
quickConvertPlayersPlayer = nil
quickConvertPlayersObject = nil
convertfailcountlimit = 50 -- when bets are converted to pot, the number of failed attempts allowed before it falls back to move bets (it makes one attempt every two frames)
sidepotfailcountlimit = 50 --
sidepotfailcount = 0
splitPotPlayers = 0 -- Numbers of Players where the split pot should be created
splitPotZone = {} -- Contains the Zone for splitpotaction
splitPotObject = {}
shuffled = false
thehole = false
theflop = false
theturn = false
theriver = false
theshowdown = false
thepostgame = false
betpreflop = false
lastCollectTime = 0
process_queue = {}
time_stamps = {}
for i,v in next, {"calculatePots",} do
  time_stamps[v] = {time=os.time(), delay=30/60}
end
flags = {
  DEV_FAKE_PLAYERS = bit32.lshift(1,1),
  DEV_AI_PLAYERS = bit32.lshift(1,2),
  DEV_USE_SPAWNDATA = bit32.lshift(1,3),
  DEV_USE_SPAWNSTACKS = bit32.lshift(1,4),
}

patchNotes_raw = [[
[10FFe0]PatchNotes![-]
[10FF10]0.15.68j[-]
Feature: Leaderboards. Evolving, but pretty great.
Bugfix: New player bags are positioned the same as the old ones after an initialization cycle
Bugfix: Hand ranking ordering stuff. Might still have issues with full houses - check carefully until further notice.
[10FF10]0.15.68i[-]
Feature: Manually dealt cards from the Deck object... are now tracked. Big Brother is watching.
Feature: Hand Evaluation - Brand new hand evaluation that is both faster and simpler. Can support whatever game modes rely on a 5 card poker hand. Currently supports Texas Hold'em and Omaha.
Feature: Hand Ranking - As above, but now this ranks hands and prints off ranked hands in order. This was necessary for the...
Feature: Showdown Mechanism - Showdown is now more managed and controlled. It is also timed. Once everyone has shown or folded (or time expires and the hands are forced), the
[10FF10]0.15.68[-]
Feature: Better handling of deck, muck, and other objects. If you changed the underlying objects, still expect problems.
Maintenance: Increased save/rewind compatibility
Bugfix: No longer can play tag with the timecards
Bugfix: Timecards no longer eaten by the Call button
Feature: In broadcast messages, out of bounds bets are now colored to the better
Bugfix: Resetting cards now doesn't fully keel over when people are holding cards. Still not good enough for automation.
Feature: Reset Objects through the menu deletes everything required again, because people are terrible.
Bugfix: Fold Player was handling folding incorrectly.
Bugfix: Sometimes, chop pots would be wrong. But not always. This was fixed by removing the double call... how it was ever right, blows my mind.
Feature: Textual hint on betting limits added in case where there's an active limit on betting range
Feature: Enforced betting Unlimited, X * Pot + Y * Previous works
Feature: Increased automation
Feature: Destroying the action() function such that its <a function that does things, validates, before calling action> <action is in charge of finalizing player action, moving focus, redrawing buttons, and checking for passive actions>
Maintenance: Added my id to the broadcastToAdmins output to help with error debugging in random tables where I'm not promoted.
Maintenance: Save stable - you can successfully Global.script_state = '' and onLoad() and get a default set of settings. Button coming soon.
BugFix: calls should be rate limited now - so people with... suspiciously fast clicks or lag spikes can't trigger more than one
Bug: can replicate lost action for person who should have the option during the first stage. Only happens on a full check around.
Bugfix: fixed lost actions... should be entirely fixed now.
[10FF10]0.15.67[-]
Feature: Moved Sort and Convert Buttons
Feature: New Call At queue button (Labeled 'Call'). Any future raise disables your option. Old button 'Call' is now 'Any', indicating that you will call any raise.
Feature: Auto Action disabling button, so you can run the table manually yet again perfect for weird straddles.
Feature: Standup Button forces all to Grey in a controlled manner
Bugfix: 8 and 6 player configs had players seeing the wrong passive buttons.
Bugfix: Corner seats on standup could suck in cards!.. so that's where they were all going to...
Bugfix: Rearranged tableobject text for larger money amounts.
Bug: Duplication can happen when people leave too quickly - problem understood, but not sure if I can work around it during crash states (steam servers eating themselves). Investigating.
Roadmap: Straddle token to modify the action, idea and discussion courtesy Flo.
Roadmap: New Table styles, elimination of old table
Roadmap: Bet Amount button to allow entry of numbers to bet
Roadmap: XML based menu system in planning. We will try and maintain the old classic UI until VR players can use XML buttons. (2020/3/16)
[10FF10]0.15.66[-]
Feature: Auto side pots in many cases. Goal is all.
Feature: Shuffling through Reset and Deal are done using atmospheric noise -- this is accomplished through API calls to random.org. Falls back to standard. Don't get your IP Banned!
Feature: Offering new layout options -- run '/execute layout.tableSetupOval(8)' or '/execute layout.tableSetupOval(6)' to use them! GUI is forthcoming.
Feature: Offering bet enforcements. [Options-->Host Settings-->Betting Rules] Currently, only Max Bet works properly. Engage it by checking off the header.
Feature: Entirely redone action system as we move towards a more automated run. Sidepots are mostly automatic in creation now.
Feature: System is faster thanks to reduction in unnecessary wait calls, as well as changing how chips are counted in zones (avoiding creation of unneccessary arrays)
Feature: UX option to present dealt cards flipped over in hands. Find it in UX Settings --> Deal Face Down
Bugfix: Some menu items for player buttons had stopped working. Fixed
Bugfix: Instant check when call required fixed
Bugfix: duplication of chips in pot during hybrid mode converts fixed
Bugfix: sidepot fail errors fixed [no longer checking if chips have stopped moving, because we spawn stacks now]
Bugfix: text objects are now all named for search purposes for initialization
Bugfix: When initializing, in the case that objects aren't name, sets up a 10 player table to spawn in appropriate zones and objects. Currently only for oval tables.
Deprecation and Removal: getPlayerHandPositionAndRotation, dealToColor
Started: Relative Hand Ranking
Started: AI Box spawning
Started: Full auto action
Started: Variable table shape and seating positions
[10FF10]0.15.65[-]
F: Respawn Objects deletes and reforms text until 3D Text tool delete all works again
F: Others
[10FF10]0.15.64[-]
F: changed convert to pot location
F: changed bag amounts and storage system
F: changed abbreviation and comma_values
F: updated game of life
[10FF10]0.15.63[-]
speed is the name of the game
F: changed chip Spawning
LF: changed call action to move chips instead of always destroying chips
LF: changed calculatePot from zones to calculatePots_RateLimited - this will preserve a queue action to prevent overpolling
F: delete all text on restore objects
[10FF10]0.15.62[-]
F: major upgrades for stability
[10FF10]0.15.61[-]
[10FF10]0.15.60[-]
F: pinned version going forward for TTS 13+
]]

function lineCharacterRestriction(str, limiter, indent_amount, indent_char)
  local out_str = {}
  local len_str = string.len(str)
  local limiter = ((limiter~=nil and limiter>1) and limiter) or len_str
  local steps = math.ceil(len_str / limiter)
  if steps < 1 then steps = 1 end
  local indent_amount = indent_amount or 2
  local indent_char = indent_char or ' '
  local lEnd = 0
  local lStart = 0
  for i = 1, steps do
    lStart = lEnd + 1
    lEnd = lStart + limiter
    if i > 1 then
      lEnd = lEnd - indent_amount
      for j = 1,indent_amount do out_str[#out_str+1] = indent_char end
    end
    out_str[#out_str+1] = string.sub(str,lStart,lEnd)
    if str:sub(lEnd,lEnd)~='-' and string.match(str:sub(lEnd,lEnd+1),"%a%a") then
      out_str[#out_str+1] = '-'
    end
    out_str[#out_str+1] = '\n'
  end
  return table.concat(out_str,'')
end

patchNotes_formatted = {}
for str in string.gmatch(patchNotes_raw,"([^%c]*)\n") do
  patchNotes_formatted[#patchNotes_formatted+1] = lineCharacterRestriction(str, 46, 2, ' ')
end
patchNotes_formatted = table.concat(patchNotes_formatted,'\n')

--[[ Customizable variables --]]
options = {

  ["dealdelay1"] = 0.1, -- delay (in seconds) used when dealing players their hands
  ["dealdelay2"] = 0.4, -- delay (in seconds) used when dealing community cards
  ["blindsskipafk"] = true, -- If false, afk players still pay blindss when it's their time. Change to true if you want blinds to skip afk players.
  ["actiontoggle"] = true, -- toggle whether the game displays actiontext. set this to false if you want to have it off by default
  ["playerclickaction"] = true, -- toggle whether action button stays in place (false) or moves from player to player (true)
  ["gamemode"] = 'texas', -- Game mode (currently supports Texas Hold'em ('texas'), Pineapple ('pineapple'), and Omaha Hold'em ('omaha'))
  ["collectmethod"] = 'hybrid', -- method used by collect bets. options: 'move': moves bets; 'convert': converts bets up, 'hybrid': starts with move, changes to convert when pot>hybridthreshold
  ["hybridthreshold"] = 10000, -- used with hybrid collection, the point above which collection switches from move to convert
  ["convertstackheight"] = 1, -- contains the height of the stacks for the convert method
  ["enforcedoubleraise"] = true, -- if true, does not let a player pass action if their raise is less than double the current bet and they are not all in.
  ["enforcepotlimit"] = true, -- if true, does not let a player pass action if they bet too much for pot limit. the bet limit is calculated as: pot + currentbet + (currentbet - action player's bet)
  ["enforcefoldinturn"] = true, -- if true, players may not use the fold hand buttons to fold out of turn
  ["clocktime"] = 30,
  ["autoclock"] = true,
  ["autofold"] = false,
  ["autoblinds"] = true,
  ["autonotes"] = true,
  ["autobutton"] = true,
  ["forceshowdown"] = false,
  ["starterpack"] = true,
  ["autoclocktime"] = 20,
  ["clockpausebutton"] = false,
  ["lockchips"] = false,
  ["lockbag"] = false,
  ["currencies"] = nil, -- contains the index of different currencies
  ["stacklayout"] = nil, -- contains the index of different currencies template
  ["uxoptions"] =
  {
    ["actionmessage"] = false, -- print "Action on player" message in chat
    ["actionbroadcast"] = true, -- broadcast "Action on you!" to the current player
    ["currentbetmessage"] = false, -- broadcast when the current bet changes
    ["better"] = false, -- include the player who made or raised in the above message
    ["potmessage"] = 1, -- 0 = never, 1 = on collect bets only, 2 = any time it changes as well as on collection
    ["allinbroadcast"] = true, -- broadcast when a player is all in
    ["stagebroadcast"] = true, -- flop, turn, river broadcasts
    ["turnsounds"] = true, --use turnsounds to play noise for each ind. player
    ["facedowncards"] = false, -- dealt cards are face down
    ["leaderboard"] = false, -- enables leaderboard (experimental)
  },
  ["displayplayerbet"] = true, --
  ["displayplayermoney"] = true,
  ["playerbuttons"] =
  {
    ["checkfoldplayer"] = true,
    ["checkplayer"] = true,
    ["checkcallplayer"] = true,
    ["sortchips"] = true,
    ["foldhand"] = true,
    ["convert"] = true,
    ["allin"] = true,
    ["afk"] = true,
    ["loadsavebag"] = true,
    ["saveplayerbag"] = true,
    ["betamount"] = false,
  },
  ["devoptions"] = {
    ["devMode"] = {
      isOn = true,
      value = AI_FAKE_PLAYERS, -- each number bit determines the state.
    },
  },
  ["changemachine"] = false,
  ["deckSize"] = 52,
  ["autoaction"] = true,
  ["userandomatmospheric"] = true,
  ["showrules"] = {
    pokertda = false,
    allins = true,
    allins_callers = false,

  }
}
options.tables = {}
options.tables.configs = {}
options.tables.configs['OvalOld'] = {}
options.tables.active = 'OvalOld'
options['betoptions'] = {
  ["preflop"] = {
      ['maxbet'] = {
          ["Unlimited"] = {
            output = function(params)
              return ("Unlimited")
            end,
            bound = function(params, pot, previousbet) return math.huge end,
            isOn = false,
          },
          ["X * Pot + Y * Prev Bet + Z * Prev Raise"] = {
            output = function(params)
              local outstrArr = {'','Pot',' + ','','Prev',' + ','','Prev Raise'}
              if params.X~=1 then
                  if params.X==0 then
                      outstrArr[2] = ''
                      outstrArr[3] = ''
                  else
                      outstrArr[1] = ("%dx "):format(params.X)
                  end
              end
              if params.Y~=1 then
                  if params.Y==0 then
                    outstrArr[3] = ''
                    outstrArr[5] = ''
                  else
                    outstrArr[4] = ("%dx "):format(params.Y)
                  end
              end
              if params.Z~=1 then
                if params.Z==0 then
                  outstrArr[6] = ''
                  outstrArr[7] = ''
                  outstrArr[8] = ''
                else
                  outstrArr[7] = ("%dx "):format(params.Z)
                end
              end
              return table.concat(outstrArr)
            end,
            bound = function(params, pot, previousbet, next_raise) return params.X * pot + params.Y * previousbet + params.Z * (next_raise or 0) end,
            isOn = true,
            X = 1,
            Y = 1,
            Z = 0,
          },
          ["MaxRaise is X"]  = {
              output = function(params)
                return ("$%d"):format(params.X)
              end,
              bound = function(params, pot, previousbet) return params.X + previousbet end,
            isOn = false,
            X = 5500,
          },
          ["MaxBet is X"]    = {
            output = function(params)
                return ("$%d"):format(params.X)
              end,
              bound = function(params, pot, previousbet) return params.X end,
            isOn = false,
            X = 5500,
          },
          ["X + Previous"] = {
              output = function(params)
                  assert(params~=nil and params.X~=nil and params.X>=1,"input error: X>1 for bets")
                  return ("%d + Previous"):format(params.X)
              end,
              bound = function(params, pot, previousbet) return params.X + previousbet end,
              isOn = false,
              X = 1,
          },
      },
      ['minraise'] = {
          ["X * Pot + Y * Prev Bet + Z * Prev Raise"] = {
            output = function(params)
              local outstrArr = {'','Pot',' + ','','Prev',' + ','','Prev Raise'}
              if params.X~=1 then
                  if params.X==0 then
                      outstrArr[2] = ''
                      outstrArr[3] = ''
                  else
                      outstrArr[1] = ("%dx "):format(params.X)
                  end
              end
              if params.Y~=1 then
                  if params.Y==0 then
                    outstrArr[3] = ''
                    outstrArr[5] = ''
                  else
                    outstrArr[4] = ("%dx "):format(params.Y)
                  end
              end
              if params.Z~=1 then
                if params.Z==0 then
                  outstrArr[6] = ''
                  outstrArr[7] = ''
                  outstrArr[8] = ''
                else
                  outstrArr[7] = ("%dx "):format(params.Z)
                end
              end
              return table.concat(outstrArr)
            end,
            bound = function(params, pot, previousbet, next_raise) return params.X * pot + params.Y * previousbet + params.Z * (next_raise or 0) end,
            isOn = true,
            X = 0,
            Y = 2,
            Z = 0,
          },
          ["MinRaise is X"]  = {
            output = function(params)
              return ("$%d"):format(params.X)
            end,
            bound = function(params, pot, previousbet) return params.X + previousbet end,
            isOn = false,
            X = 5500,
          },
          ["X + Previous"] = {
              output = function(params)
                  assert(params~=nil and params.X~=nil and params.X>=1,"input error: X>1 for bets")
                  return ("%d + Previous"):format(params.X)
              end,
              bound = function(params, pot, previousbet) return params.X + previousbet end,
              isOn = false,
              X = 1,
          },
      },
  },

}
options["banking"] = {
  rebuy = 200,
  loanPct = 100.00,
  smallBlindValue = 1,
  bigBlindValue = 2,
}

options.betoptionsEnforce = false
options.betoptions.postflop = deepcopy(options.betoptions.preflop)
options.betoptions.postflop.maxbet.Unlimited.isOn = true
options.betoptions.postflop.maxbet["X * Pot + Y * Prev Bet + Z * Prev Raise"].isOn = false
options.shuffleFirstDeal = true
shuffleFirstDeal = true

constants = constants or {}
constants.validations = {}

--[[starteramount = 10000
autosaveandload = true
chips = {} --]]
--[[ other variables and tables --]]
onecard = false -- used when dealing one card from options menu (for determining starting dealer, etc)
handsshown = {} -- table of hands that have been shown and evaluated by the script this round
handinprogress = false -- used to prevent change of gamemode during a hand
convertfailcount = 0
dealt_cards = {} -- attempts to keep tabs of all cards that go out, not just those that make it to the hands
holedealt = false -- whether or not players have been dealt their hole cards
holecards = {['White'] = {}, ['Brown'] = {}, ['Red'] = {}, ['Orange'] = {}, ['Yellow'] = {}, ['Green'] = {}, ['Teal'] = {}, ['Blue'] = {}, ['Purple'] = {}, ['Pink'] = {}} -- table of players' hole cards, used for hand evaluations
revealedcards = {['White'] = {}, ['Brown'] = {}, ['Red'] = {}, ['Orange'] = {}, ['Yellow'] = {}, ['Green'] = {}, ['Teal'] = {}, ['Blue'] = {}, ['Purple'] = {}, ['Pink'] = {}} -- table of players' hole cards which have been revealed
dealing = false -- set to true while cards are being dealt to prevent double-clicking
players = {} -- table of seated players used for dealing cards and actions
checkFoldPlayer = {}
checkCallPlayer = {}
checkCallAtPlayer = {}
checkPlayer = {}
checkForRound = {}
allInHappened = false
allIns = {}
allInCount = 0
folded_colors = {}
foldeds = {}
foldedCount = 0
playersinBet = {}
playersround = false -- table of seated players that are in the round (paid bets)
actionon = nil -- Player whose turn it is to act
playerbets = {} -- Table of players' bets
currentbet = 0 -- highest bet from the playerbets table
mainpotchips = {} -- table containing information regarding stacks of chips in the main pot(initialized in initializePot() function)
printstring = '' -- string referenced by printMessages function to know which messages to print.
pot = 0 -- total amount in pot (including current players' bets)
cardtint = 1 -- used anti-grouping measure
sidepotcalculatet = false -- contains information if sidepot was calculated, stops all actions except dealing
themeindex = 1
subthemeindex = 1

colors = {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink"} --list of all colors, in order
ColorIndexes = {
  ["White"]     = 1,
  ["Brown"]     = 2,
  ["Red"]       = 3,
  ["Orange"]    = 4,
  ["Yellow"]    = 5,
  ["Green"]     = 6,
  ["Teal"]      = 7,
  ["Blue"]      = 8,
  ["Purple"]    = 9,
  ["Pink"]      = 10
}

chiptints = {['White'] = {1, 1, 0.99}, ['Brown'] = {1, 0.99, 1}, ['Red'] = {1, 0.99, 0.99}, ['Orange'] = {0.99, 1, 1}, ['Yellow'] = {0.99, 1, 0.99}, ['Green'] = {0.99, 0.99, 1}, ['Teal'] = {0.99, 0.99, 0.99}, ['Blue'] = {1, 1, 0.98}, ['Purple'] = {1, 0.98, 1}, ['Pink'] = {1, 0.98, 0.99}}
betzonechiptints = {['White'] = {1, 0.98, 0.98}, ['Brown'] = {0.99, 0.99, 0.98}, ['Red'] = {0.98, 0.98, 0.99}, ['Orange'] = {0.98, 0.98, 0.98}, ['Yellow'] = {1, 1, 0.97}, ['Green'] = {1, 0.97, 1}, ['Teal'] = {1, 0.97, 0.99}, ['Blue'] = {1, 0.97, 0.98}, ['Purple'] = {1, 0.97, 0.97}, ['Pink'] = {0.97, 1, 1}}

banks = {}
for i, v in next, colors do -- all possible colors
  local bank = {}
  bank.credit = 0 -- what's in the bag
  bank.debit  = 0 -- what's out on the table
  bank.bombs  = 0 -- how many times you've busted
  bank.debt   = 0 -- losses and loans outstanding
  bank.wealth = 0 -- total net wealth
  banks[v] = bank
end

--[[ Object references and GUIDs --]]
afkClocks = {}
potsplitter = nil
actionbutton = nil
blindszones = {}
smallBlindGUID = '6e9d55'
bigBlindGUID = '670d8a'
buyinGUID = 'b0f864'
defaultSaveGUID = '2595ec'
actionbuttonGUID = 'cc94ca'
handzones = {}
backtablezones = {}
backtablezoneGUIDs = {'1904be', 'e9b296', 'ee0d04', 'b131a2', 'bb2a9a', 'b9938f', '144824', 'b0eda0', 'a17f45', 'b04a49'}
betzones = {} -- scripting zones for the betting areas for each player. Order must correspond to colors table
betzoneGUIDs = {'420cfb', '39fd59', '7d419f', '332aa4', '0377d5', '8a2729', 'db2d03', 'b93bb7', 'c43aea', '3a8997'}
boardobject = nil -- 3d model used for the board
boardobjectGUID = '5b50b7'
boardzone = nil -- scripting zone on the board where community cards are dealt
boardzoneGUID = '5a1d5c'
collectbutton = nil -- button to collect bets
collectbuttonGUID = 'e801e4'
clock = nil
dealbutton = nil -- button to deal cards
dealbuttonGUID = '1745d7'
deck = nil -- deck
deckGUID = '1b1565' -- the deck's GUID which is saved on the table
muck = nil -- the muck object that is used to determine where burn cards are dealt
muckGUID = 'be42ca'
potobject = nil
potobjectGUID = '6a79c6'
resetbutton = nil -- button to reset the game
resetbuttonGUID = 'c3b0f3'
sidepotbutton = nil
sidepotbuttonGUID = 'f1421a'

tablezones = {}
tablezoneGUIDs = {'fe7624', 'b8cde0', 'f33c02', 'a96804', '08e7a3', 'e2ff95', '92c6c4', 'd03a42', 'd1cf88', '71d958'}
blindsplayers = {}
infiniteMoneyBag = {}

fontcolors = {}

for i, v in ipairs (colors) do
  fontcolors[v] = {}
end

fontcolors.White.r = 1
fontcolors.White.g = 1
fontcolors.White.b = 1
fontcolors.White.bbcode = '[ffffff]'

fontcolors.Brown.r = 0.443
fontcolors.Brown.g = 0.231
fontcolors.Brown.b = 0.09
fontcolors.Brown.bbcode = '[713b17]'

fontcolors.Red.r = 0.856
fontcolors.Red.g = 0.1
fontcolors.Red.b = 0.094
fontcolors.Red.bbcode = '[da1918]'

fontcolors.Orange.r = 0.956
fontcolors.Orange.g = 0.392
fontcolors.Orange.b = 0.113
fontcolors.Orange.bbcode = '[f4641d]'

fontcolors.Yellow.r = 0.905
fontcolors.Yellow.g = 0.898
fontcolors.Yellow.b = 0.172
fontcolors.Yellow.bbcode = '[e7e52c]'

fontcolors.Green.r = 0.192
fontcolors.Green.g = 0.701
fontcolors.Green.b = 0.168
fontcolors.Green.bbcode = '[31b32b]'

fontcolors.Teal.r = 0.129
fontcolors.Teal.g = 0.694
fontcolors.Teal.b = 0.607
fontcolors.Teal.bbcode = '[21b19b]'

fontcolors.Blue.r = 0.118
fontcolors.Blue.g = 0.53
fontcolors.Blue.b = 1
fontcolors.Blue.bbcode = '[1f87ff]'

fontcolors.Purple.r = 0.627
fontcolors.Purple.g = 0.125
fontcolors.Purple.b = 0.941
fontcolors.Purple.bbcode = '[a020f0]'

fontcolors.Pink.r = 0.96
fontcolors.Pink.g = 0.439
fontcolors.Pink.b = 0.807
fontcolors.Pink.bbcode = '[f570ce]'

potzones = {}
mainpotzoneGUID = 'a20d35'
sidepotzoneGUIDs = {'a93f95', '6cf2bc', 'c9aaae'}
pottextGUID = 'ef2566'
playerpottextGUID = '8cab80'
mainpottextGUID = '476499'
bettext = {} --  textes for current player bets
bettextGUIDs = {'8133a5', '433f14', 'b57079', '86e377', '9d612a', 'da0c91', '8a8de0', '121b10', '75e4c3', '4f6253'}
foldtoken = {} --  token for current player fold status
foldtokenGUIDs = {'e7b6d5', '5bc8e2', '57b8a9', '01e4aa', '27f46e', 'd9a150', '72b160', '527cfa', 'e0e08c', 'f3833c'}
tablezonetext = {}
tablezonetextGUIDs = {}

sidepottext = {} --  textes for current player bets
sidepottextGUIDs = {}
currenbettext = nil
currentbettextGUID = '8b3c5e'
playercurrentbettextGUID = '9b37a9'
colorball = nil
overlay = nil
overlayGUID = '290051'
actiontext = nil
actiontextGUID = '20e11d'
optionspanel = nil
optionsbutton = nil

optionsbuttonGUID = '6e1caf'
scripts = {} -- Scripts copied from objects in onload, used when 'Reset Objects' is clicked.
activeplayers = {['White'] = nil, ['Brown'] = nil, ['Red'] = nil, ['Orange'] = nil, ['Yellow'] = nil, ['Green'] = nil, ['Teal'] = nil, ['Blue'] = nil, ['Purple'] = nil, ['Pink'] = nil}

deckzone = nil
deckzoneGUID = '5d8314'

gamesavezone = nil
gamesavezoneGUID = 'a9cd4e'

savebag = nil
savebagGUID = nil

saves = {['White'] = nil, ['Brown'] = nil, ['Red'] = nil, ['Orange'] = nil, ['Yellow'] = nil, ['Green'] = nil, ['Teal'] = nil, ['Blue'] = nil, ['Purple'] = nil, ['Pink'] = nil}
bombs = {['White'] = nil, ['Brown'] = nil, ['Red'] = nil, ['Orange'] = nil, ['Yellow'] = nil, ['Green'] = nil, ['Teal'] = nil, ['Blue'] = nil, ['Purple'] = nil, ['Pink'] = nil}

-- Currencies
currenciesSelection = -- Includes all different type of chips, last entry will be used as dummy entry for unknown chips
{


  ['TNS - $1'] ={
    {["value"] = 1,["name"] = "$1",["label"] = "$1",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/OrMbZbF.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},
    {["value"] = 2500,["name"] = "$2,500",["label"] = "$2.5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/gP66BKd.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 5,["name"] = "$5",["label"] = "$5",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/Q0dYJ6V.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hwSTF9O.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 10,["name"] = "$10",["label"] = "$10",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/vjPsq1w.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hBj9esy.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 25,["name"] = "$25",["label"] = "$25",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/I5YYtA1.png/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/IheXTFo.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
    {["value"] = 50,["name"] = "$50",["label"] = "$50",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/sBUzRxo.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/HLshcBA.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "14"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/xYhQZWd.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/k2EQ4JC.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "15"},
    {["value"] = 250,["name"] = "$250",["label"] = "$250",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/yke5PaD.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/suY5kB2.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "16"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/j2pandP.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/WxNm2ja.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "17"},
    {["value"] = 1000,["name"] = "$1000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hvUDj5Z.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1M",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/LFLhMiD.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "18"},
  },
  ['TNS - $5/25'] ={
    {["value"] = 5,["name"] = "$5",["label"] = "$5",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/Q0dYJ6V.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 2500,["name"] = "$2,500",["label"] = "$2.5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/gP66BKd.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 25,["name"] = "$25",["label"] = "$25",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/I5YYtA1.png/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hwSTF9O.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/xYhQZWd.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hBj9esy.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 250,["name"] = "$250",["label"] = "$250",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/yke5PaD.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/IheXTFo.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/j2pandP.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/HLshcBA.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "14"},
    {["value"] = 1000,["name"] = "$1000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/hvUDj5Z.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/k2EQ4JC.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "15"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/suY5kB2.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "16"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/WxNm2ja.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "17"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1M",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "https://i.imgur.com/LFLhMiD.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "18"},
  },
  ['default - $100'] =
  {
    {
      ["value"] = 100000, -- Value of the Chip
      ["name"] = "$100,000", -- Name of the chip
      ["label"] = "$100k", -- Label used for converting machine
      ["standard"] = false, -- Standard tabletop chips (1000, 500, 100, 50, 10)
      ["height"] = 0.06,
      ["custom"] =
      {
        ["mesh"] = "http://pastebin.com/raw.php?i=ruZEQex3", -- obj file
        ["diffuse"] = "http://i.imgur.com/hJIzRFn.jpg", -- diffuse image
        ["normal"] = nil,
        ["collider"] = nil,
        ["convex"] = nil,
        ["type"] = 5, -- 5 is a 'chip'
        ["material"] = 1, -- 0: plastic, 1: wood, 2: metal, 3: cardboard
        ["specular_intensity"] = nil,
        ["specular_color"] = nil,
        ["specular_sharpness"] = nil,
        ["freshnel_strength"] = nil,
        ["cast_shadows"] = nil,
      },
      ["params"] =
      {
        ["rotation"] = {0, 90, 0}, -- rotation of the object (in relation to the machine) when it spawns
        ["scale"] = {0.75, 0.75, 0.75} -- the scale at which to spawn the object
      },
      ["stack"] = "10" -- spot position for collecting/spawning (potzone and betting zone on sidepot)
    },
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.06,["custom"] ={["mesh"] = "http://pastebin.com/raw.php?i=ruZEQex3",["diffuse"] = "http://i.imgur.com/m4pRnEa.jpg",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 90, 0},["scale"] = {0.75, 0.75, 0.75}},["stack"] = "9"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.06,["custom"] ={["mesh"] = "http://pastebin.com/raw.php?i=ruZEQex3",["diffuse"] = "http://i.imgur.com/mIZ9NXm.jpg",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 90, 0},["scale"] = {0.75, 0.75, 0.75}},["stack"] = "8"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.35,["custom"] ={["mesh"] = "http://pastebin.com/raw/QqdA0six",["diffuse"] = "http://i.imgur.com/kp8fFK0.jpg",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {0.75, 0.75, 0.75}},["stack"] = "7"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.35,["custom"] ={["mesh"] = "http://pastebin.com/raw/QqdA0six",["diffuse"] = "http://i.imgur.com/QQhHmVP.jpg",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {0.75, 0.75, 0.75}},["stack"] = "6"},
    {["value"] = 1000,["name"] = "$1000",["label"] = "$1000",["standard"] = true,["height"] = 0.15,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = true,["height"] = 0.15,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = true,["height"] = 0.15,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},
    {["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "10"}
  },

  ['default - $10'] ={
    {    ["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.05,    ["custom"] =    { ["mesh"] = "http://pastebin.com/raw.php?i=ruZEQex3",  ["diffuse"] = "http://i.imgur.com/hJIzRFn.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 90, 0},  ["scale"] = {0.75, 0.75, 0.75}},    ["stack"] = "9"   },
    {    ["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.05,    ["custom"] =    { ["mesh"] = "http://pastebin.com/raw.php?i=ruZEQex3",  ["diffuse"] = "http://i.imgur.com/m4pRnEa.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 90, 0},  ["scale"] = {0.75, 0.75, 0.75}},    ["stack"] = "8"   },
    {    ["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.35,    ["custom"] =    { ["mesh"] = "http://pastebin.com/raw/QqdA0six",  ["diffuse"] = "http://i.imgur.com/kp8fFK0.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {0.75, 0.75, 0.75}},    ["stack"] = "7"   },
    {    ["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.35,    ["custom"] =    { ["mesh"] = "http://pastebin.com/raw/QqdA0six",  ["diffuse"] = "http://i.imgur.com/QQhHmVP.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {0.75, 0.75, 0.75}},    ["stack"] = "6"   },
    {    ["value"] = 1000,["name"] = "$1000",["label"] = "$1000",["standard"] = true,["height"] = 0.15,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "5"   },
    {    ["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = true,["height"] = 0.15,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "4"   },
    {    ["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = true,["height"] = 0.15,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "3"   },
    {    ["value"] = 50,["name"] = "$50",["label"] = "$50",["standard"] = true,["height"] = 0.15,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "2"   },
    {    ["value"] = 10,["name"] = "$10",["label"] = "$10",["standard"] = true,["height"] = 0.15,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "1"   },
    {   ["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "10"   }
  },
  ['World Series Of Poker - $500'] ={
    {    ["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/CJC9YS9.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "11"   },
    {    ["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/i28Myqn.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "10"   },
    {    ["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/LHrlLDb.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "9"   },
    {    ["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/E9gcjqL.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "8"   },
    {    ["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/kiUBfn5.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "7"   },
    {    ["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/4R6mQkk.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "6"   },
    {    ["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/oVDeVyt.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "5"   },
    {    ["value"] = 5000,["name"] = "$5,000",["label"] = "$5000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/g5ss9fH.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "4"   },
    {    ["value"] = 2500,["name"] = "$2,500",["label"] = "$2500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/noppTnL.png",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "3"   },
    {    ["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/IEAM8Fh.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "2"   },
    {    ["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/nOxPst2.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "1"   },
    {    ["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "13"   }
  },
  ['World Series Of Poker - $100'] ={
    {    ["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/CJC9YS9.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "12"   },
    {    ["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/i28Myqn.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "11"   },
    {    ["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/LHrlLDb.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "10"   },
    {    ["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/E9gcjqL.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "9"   },
    {    ["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/kiUBfn5.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "8"   },
    {    ["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/4R6mQkk.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "7"   },
    {    ["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/oVDeVyt.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "6"   },
    {    ["value"] = 5000,["name"] = "$5,000",["label"] = "$5000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/g5ss9fH.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "5"   },
    {    ["value"] = 2500,["name"] = "$2,500",["label"] = "$2500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/noppTnL.png",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "4"   },
    {    ["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/IEAM8Fh.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "3"   },
    {    ["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/nOxPst2.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "2"   },
    {    ["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/RHmy71O.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "1"   },
    {   ["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,    ["params"] =    { ["rotation"] = {0, 270, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "13"   }},
  ['World Series Of Poker - $25'] ={
    {    ["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/CJC9YS9.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "14"   },
    {    ["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/i28Myqn.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "13"   },
    {    ["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/LHrlLDb.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "12"   },
    {    ["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/E9gcjqL.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "11"   },
    {    ["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/kiUBfn5.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "10"   },
    {    ["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/4R6mQkk.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "9"   },
    {    ["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/oVDeVyt.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "8"   },
    {    ["value"] = 5000,["name"] = "$5,000",["label"] = "$5000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/g5ss9fH.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "7"   },
    {    ["value"] = 2500,["name"] = "$2,500",["label"] = "$2500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/noppTnL.png",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "6"   },
    {    ["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/IEAM8Fh.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "5"   },
    {    ["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/nOxPst2.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "4"   },
    {    ["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/RHmy71O.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "3"   },
    {    ["value"] = 50,["name"] = "$50",["label"] = "$50",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/6SgDPma.png",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "2"   },
    {    ["value"] = 25,["name"] = "$25",["label"] = "$25",["standard"] = false,["height"] = 0.15,    ["custom"] =    { ["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",  ["diffuse"] = "http://i.imgur.com/BFGnKIK.jpg",  ["type"] = 5,  ["material"] = 1},    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "1"   },
    {   ["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,    ["params"] =    { ["rotation"] = {0, 0, 0},  ["scale"] = {1, 1, 1}},    ["stack"] = "15"   }},

  ['MelonTime - $1'] ={
    {["value"] = 1,["name"] = "$1",["label"] = "$1",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142201635/D70BDE55124407714BA1CFE711C8C2D8BE02E7F5/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},
    {["value"] = 2500,["name"] = "$2,500",["label"] = "$2.5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142220361/3E15170DA0D365468A6811EC2765A3D12E9862CD/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 5,["name"] = "$5",["label"] = "$5",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142209630/67A8C1E586305E2AA79AE0D03C58304616888FBB/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142227720/FAF724CA5ECA151334C63CA1B8305B2466007386/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 10,["name"] = "$10",["label"] = "$10",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142208295/DB488A2B1344D6F502D968F2C497AF820D20F11D/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142213781/5A1883C109530D7DE8A164D3BEE0237655654F92/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
    {["value"] = 25,["name"] = "$25",["label"] = "$25",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142221544/E7DFFBED896CB975A8035B74F267056C46D42C66/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142224338/9E9DAA8A427E049D64A5DA3B332FF133F7DAA73A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 50,["name"] = "$50",["label"] = "$50",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142229089/314C7DD9C498D5DEEDAA89B78A762A6F6AB3E692/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142226780/8BC50D135CB82A3C9F7AAB8A851323D5ECD567B1/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "14"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142210951/F306CA73897997EECF3BDE8BC9DDEEE787EF5F1E/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142212401/9E42112D8E33687409F2A57CE5C160E208E37FA3/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "15"},
    {["value"] = 250,["name"] = "$250",["label"] = "$250",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142222439/CA4123BB21F6D779857BD9F3F2A5735AE58FB48F/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142223409/7E125A025AC52E050EBF44402C9B621494E45A78/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "16"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142225773/26AFE699E68A14310DDA218D58B859F5DCEF7477/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142239169/C7FC0EC3218AF1AD732B4EDD5EF9AB52F604F8DB/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "17"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1M",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/959726546600243762/044D9CFB30A86618E7E21D257BFB4C54566FDE59/",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1657846490142218464/0C59BE52819EDFBE14088B71747CFEE7CF4D65F1/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "18"},
  },
  ['RWC - $100'] ={
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255537024/FD7F354729D3A63369A4095DAD193CA7C6843230/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255537462/057817CBC2FB57D224FFF88245C807C7DDB6632A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 1000,["name"] = "$1000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255538042/7434785E30F3B8B03806E8F986104F9CDC10D9B6/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},
    {["value"] = 2500,["name"] = "$2,500",["label"] = "$2.5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255538459/3ABB243EC94829E1AF58174A41FE36A52E7CA9CE/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255539637/717D57F3F9A1B408BD5599FC243341E54F716C4B/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255540103/C160DD8C5ADC0314FEC6A063D42BBF32FA1A63B5/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255540526/1ED635E1F075830174ACD0953ED980E8794A7802/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255541180/83C126B2C97879A1B6EFCDEA26906F325F46C1AD/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255541712/782F86BABBBA6763D4D903E9E7433A384F086BE2/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255542188/4713F2F2F6ED9A820944B6D534037CDA4C574E51/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500K",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255542672/573D38C288DAD64668F3AA17C84BE4204C03FDF6/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1M",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/771733150255429610/D4C95A06A8B5CD9FAB77F39B0724C546E675565E/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
  },
  ['Battlestar Chips - $500'] ={--http://cloud-3.steamusercontent.com/ugc/1749077343909837879/EA7D8DEC423D3030E464D988F65F5A8CD86330F7/
    {["value"] = 10000000,["name"] = "$10,000,000",["label"] = "$10m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1749077343909837879/EA7D8DEC423D3030E464D988F65F5A8CD86330F7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915567575/EBEC940FF356D9EAE9961050C544477B4C0FD08E/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915546076/D5F7D15322053A456911C866DBBD01CA1C4AE04A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915551353/68892654BB7985E633F7C4DAE9581770A869DFB7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915560358/EC2AB5EBEA7CF2E3077039AF86ABEFB874300487/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915524933/6C1349FF322CB7964875DDBFCA8BE47665E04CBE/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915517493/167926A2C79D3A69471FC24C1E0E66AC148A80F2/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915506615/9D4895D0B302EB632C2979B4C4C85C21EC6A26C4/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915479185/52BF1E09646018B4F8F9FABE4CED4A25118A256A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 2500,["name"] = "$2,500",["label"] = "$2500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915471079/1800FD3FBF32A43FF82D843FEC48C662C7AD9FBC/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},
    {["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068777151810453/3DAC91AA25202A06B40E9A64406921320A6231D3/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915485073/30314EF72131A5F10B00ED7E017D4868C4382009/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},
    {["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
  },
  ['Battlestar Chips - $1k/5k'] ={
    {["value"] = 10000000,["name"] = "$10,000,000",["label"] = "$10m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1749077343909837879/EA7D8DEC423D3030E464D988F65F5A8CD86330F7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915567575/EBEC940FF356D9EAE9961050C544477B4C0FD08E/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915546076/D5F7D15322053A456911C866DBBD01CA1C4AE04A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915551353/68892654BB7985E633F7C4DAE9581770A869DFB7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915560358/EC2AB5EBEA7CF2E3077039AF86ABEFB874300487/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915524933/6C1349FF322CB7964875DDBFCA8BE47665E04CBE/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915517493/167926A2C79D3A69471FC24C1E0E66AC148A80F2/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915506615/9D4895D0B302EB632C2979B4C4C85C21EC6A26C4/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915479185/52BF1E09646018B4F8F9FABE4CED4A25118A256A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068777151810453/3DAC91AA25202A06B40E9A64406921320A6231D3/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},
    {["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
  },
  ['Battlestar Chips - $10k/50k'] ={
    {["value"] = 10000000,["name"] = "$10,000,000",["label"] = "$10m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1749077343909837879/EA7D8DEC423D3030E464D988F65F5A8CD86330F7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "12"},
    {["value"] = 1000000,["name"] = "$1,000,000",["label"] = "$1m",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915567575/EBEC940FF356D9EAE9961050C544477B4C0FD08E/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "11"},
    {["value"] = 500000,["name"] = "$500,000",["label"] = "$500k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915546076/D5F7D15322053A456911C866DBBD01CA1C4AE04A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "10"},
    {["value"] = 250000,["name"] = "$250,000",["label"] = "$250k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915551353/68892654BB7985E633F7C4DAE9581770A869DFB7/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "9"},
    {["value"] = 100000,["name"] = "$100,000",["label"] = "$100k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915560358/EC2AB5EBEA7CF2E3077039AF86ABEFB874300487/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "8"},
    {["value"] = 50000,["name"] = "$50,000",["label"] = "$50k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915524933/6C1349FF322CB7964875DDBFCA8BE47665E04CBE/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "7"},
    {["value"] = 10000,["name"] = "$10,000",["label"] = "$10k",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1624068840915506615/9D4895D0B302EB632C2979B4C4C85C21EC6A26C4/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
  },
  ['Owls Hollow - $1'] = {
    {["value"] = 1000,["name"] = "$1,000",["label"] = "$1000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374083428656411/B4E7F3FAC897A67AD47057BAF3B4B3D7921EE32F/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "6"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374083428286195/9034AE858AC148E1DBBA4902C3408BD12AD9542A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "5"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374083428208046/EB5BE850B0753947B8DB71D96FE6AA938DFBCC9A/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "4"},
    {["value"] = 25,["name"] = "$25",["label"] = "25",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374083427870491/C381D94EC9DD7430952594C002286CF2E43BC29F/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "3"},{["value"] = 5,["name"] = "$5",["label"] = "$5",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374022239656306/509A2EE5C411C8751E44137A49D3A9122C6A5268/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "2"},{["value"] = 1,["name"] = "$1",["label"] = "$1",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1689374022239653849/1F9D5DE68F6408B54011B0BD0ECBBA3872713448/",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "1"},{["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1, 1, 1}},["stack"] = "15"},
  },
  ["Aria Chips - $100"] ={
  {["value"] = 100000,["name"] = "$100,000",["label"] = "$100,000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/8Z16Yo8.pnghttps://i.imgur.com/8Z16Yo8.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1}},["stack"] = "6"},
    {["value"] = 25000,["name"] = "$25,000",["label"] = "$25,000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/P4u69o4.pnghttps://i.imgur.com/P4u69o4.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1},},["stack"] = "5"},
    {["value"] = 5000,["name"] = "$5,000",["label"] = "$5,000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/yJ6cmpx.pnghttps://i.imgur.com/yJ6cmpx.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1},},["stack"] = "4"},
    {["value"] = 1000,["name"] = "$1,000",["label"] = "$1,000",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/jG79wwn.pnghttps://i.imgur.com/jG79wwn.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1},},["stack"] = "3"},
    {["value"] = 500,["name"] = "$500",["label"] = "$500",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/oUTEDym.pnghttps://i.imgur.com/oUTEDym.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1},},["stack"] = "2"},
    {["value"] = 100,["name"] = "$100",["label"] = "$100",["standard"] = false,["height"] = 0.15,["custom"] ={["mesh"] = "http://cloud-3.steamusercontent.com/ugc/1759191999213591660/4EB0866AC30699A9CBF76FBE334F5CD5BCB691BE/",["diffuse"] = "https://i.imgur.com/zxUaeL4.pnghttps://i.imgur.com/zxUaeL4.png",["type"] = 5,["material"] = 1},["params"] ={["rotation"] = {0, 0, 0},["scale"] = {1,1,1},},["stack"] = "1"},
    {["value"] = -1,["name"] = "unknown",["standard"] = false,["label"] = "dummy",["height"] = 0.3,["params"] ={["rotation"] = {0, 270, 0},["scale"] = {1, 1, 1}},["stack"] = "13"},
  },
}

stacklayout =
{
  ['5-5-5'] =
  {
    ["1"] =
    {
      ["xoffset"] = 2,
      ["yoffset"] = 0.0825, -- half of the object's height to put its bottom on the surface
      ["zoffset"] = -2,
      ["height"] = 0, -- height of current stack
      ["x"] = 0, -- coordinates of stack relative to the spawned objects
      ["y"] = 0,
      ["z"] = 0
    },
    ["2"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.0825,  ["zoffset"] = -2,},
    ["3"] ={  ["xoffset"] = -1.5,  ["yoffset"] = 0.0825,  ["zoffset"] = -2,},
    ["4"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.2,  ["zoffset"] = -2,},
    ["5"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.0825,  ["zoffset"] = 0,},
    ["6"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 0,},
    ["7"] ={  ["xoffset"] = -1.5,  ["yoffset"] = 0.0825,  ["zoffset"] = 0,},
    ["8"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 0,},
    ["9"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.0825,  ["zoffset"] = 2,},
    ["10"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 2,},
    ["11"] ={  ["xoffset"] = -1.5,  ["yoffset"] = 0.0825,  ["zoffset"] = 2,},
    ["12"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 2,},
    ["13"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.0825,  ["zoffset"] = 4,},
    ["14"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 4,},
    ["15"] ={  ["xoffset"] = -1.5,  ["yoffset"] = 0.0825,  ["zoffset"] = 4,},
    ["16"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.0825,  ["zoffset"] = 4,},
    ["17"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.0825,  ["zoffset"] = 6,},
    ["18"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.2,  ["zoffset"] = 6,},
    ["misc"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.2,  ["zoffset"] = 2,},
  },

  ['5-2-3'] =
  {
    ["1"] =
    {
      ["xoffset"] = 3.75,
      ["yoffset"] = 0.0825, -- half of the object's height to put its bottom on the surface
      ["zoffset"] = -2,
      ["height"] = 0, -- height of current stack
      ["x"] = 0, -- coordinates of stack relative to the spawned objects
      ["y"] = 0,
      ["z"] = 0
    },
    ["2"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.0825,  ["zoffset"] = -2,},
    ["3"] ={  ["xoffset"] = 0.25,  ["yoffset"] = 0.0825,  ["zoffset"] = -2,},
    ["4"] ={  ["xoffset"] = -1.5,  ["yoffset"] = 0.2,  ["zoffset"] = -2,},
    ["5"] ={  ["xoffset"] = -3.25,  ["yoffset"] = 0.2,  ["zoffset"] = -2,},
    ["6"] ={  ["xoffset"] = 2,  ["yoffset"] = 0.2,  ["zoffset"] = 0,},
    ["7"] ={  ["xoffset"] = -2.5,  ["yoffset"] = 0.2,  ["zoffset"] = 0,},
    ["8"] ={  ["xoffset"] = 3,  ["yoffset"] = 0.2,  ["zoffset"] = 2,},
    ["misc"] ={  ["xoffset"] = -3,  ["yoffset"] = 0.2,  ["zoffset"] = 2,},
  },

  ['Half Circle'] =
  {
    ["1"] =
    {
      ["xoffset"] = 4,
      ["yoffset"] = 0.0825, -- half of the object's height to put its bottom on the surface
      ["zoffset"] = -2,
    },
    ["2"] ={  ["xoffset"] = 3.58,  ["yoffset"] = 0.0825,   ["zoffset"] = -0.34,},
    ["3"] ={  ["xoffset"] = 2.45,  ["yoffset"] = 0.0825,   ["zoffset"] = 1.15,},
    ["4"] ={  ["xoffset"] = 0.81,  ["yoffset"] = 0.0825,   ["zoffset"] = 1.89,},
    ["5"] ={  ["xoffset"] = -0.81,  ["yoffset"] = 0.0825,   ["zoffset"] = 1.89,},
    ["6"] ={  ["xoffset"] = -2.45,  ["yoffset"] = 0.0825,   ["zoffset"] = 1.15,},
    ["7"] ={  ["xoffset"] = -3.58,  ["yoffset"] = 0.0825,   ["zoffset"] = -0.34,},
    ["misc"] ={  ["xoffset"] = -4,  ["yoffset"] = 0.0825,   ["zoffset"] = -2,},
  },

  -- For Cash Stacks
  ['2-2-2'] =
  {
    ["1"] =
    {
      ["xoffset"] = 2,
      ["yoffset"] = 0.0825, -- half of the object's height to put its bottom on the surface
      ["zoffset"] = -2,
      ["height"] = 0, -- height of current stack
      ["x"] = 0, -- coordinates of stack relative to the spawned objects
      ["y"] = 0,
      ["z"] = 0
    },
    ["2"] =
    {
      ["xoffset"] = -2.5,
      ["yoffset"] = 0.0825,
      ["zoffset"] = -2,

    },
    ["3"] =
    {
      ["xoffset"] = 2,
      ["yoffset"] = 0.2,
      ["zoffset"] = 0,
    }
    ,
    ["4"] =
    {
      ["xoffset"] = -2.5,
      ["yoffset"] = 0.2,
      ["zoffset"] = 0,
    }
    ,
    ["5"] =
    {
      ["xoffset"] = 2,
      ["yoffset"] = 0.2,
      ["zoffset"] = 2,
    }
    ,
    ["misc"] =
    {
      ["xoffset"] = -2.5,
      ["yoffset"] = 0.2,
      ["zoffset"] = 2,
    }
    ,
  },

}
for label, record in next, stacklayout do
  for sublabel, value in next, record do
    stacklayout[label][sublabel]["height"] = 0
    stacklayout[label][sublabel]["x"] = 0
    stacklayout[label][sublabel]["y"] = 0
    stacklayout[label][sublabel]["z"] = 0
  end
end
currenciesSelectionStacklayout =
{
  ["TNS - $1"] = { "5-5-5", "Half Circle" },
  ["TNS - $5/25"] = { "5-5-5", "Half Circle" },
  ["default - $100"] = { "5-2-3" },
  ["default - $10"] = { "5-2-3" },
  ["World Series Of Poker - $500"] = { "5-5-5", "Half Circle" },
  ["World Series Of Poker - $100"] = { "5-5-5", "Half Circle" },
  ["World Series Of Poker - $25"] = { "5-5-5", "Half Circle" },
  ["RWC - $100"] = { "5-5-5", "Half Circle" },
  ["Battlestar Chips - $500"] = { "5-5-5", "Half Circle" },
  ['Battlestar Chips - $1k/5k']={ "5-5-5", "Half Circle" },
  ['Battlestar Chips - $10k/50k']={ "5-5-5", "Half Circle" },
  ["MelonTime - $1"] = { "5-5-5", "Half Circle" },
  ['Owls Hollow - $1'] = { "5-5-5", "Half Circle" },
  ["Aria Chips - $100"] = { "5-5-5" , "5-2-3"},
}

currencies = {}
custom_theme_url = "https://i.imgur.com/vwGSWDW.png"
--[[ Overlay images --]]
themes =
{
  { -- themeindex 1
    ["label"] = 'Poker',
    { -- subthemeindex 1
      ["label"] = 'TNS Felts',
      {
        ["label"] = 'Astro\'s Monstera',
        ["diffuse"] = 'https://i.imgur.com/z1wSqpk.png',
      },
    },{
      ["label"] = 'ZBRA\'s Felts',
      {
        ["label"] = 'ZBRA\'s Bathing Ape',
        ["diffuse"] = 'https://i.imgur.com/pWzsQAK.jpg'
      },
      {
        ["label"] = 'ZBRA\'s Dark Felt',
        ["diffuse"] = 'https://i.imgur.com/p2OgvQI.jpg'
      },
      {
        ["label"] = 'ZBRA\'s Plain Felt',
        ["diffuse"] = 'https://i.imgur.com/yHv8oQP.png'
      },
    },{
      ["label"] = "Fancy Felts",
      {
        ["label"] = "Miss Take's Butterfly",
        ["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1644336516811007431/B610095B29C00665CDA520FD6D6AFDACBFE8C8E1/",
        ["normal"] = "http://cloud-3.steamusercontent.com/ugc/1613933836446625386/6F526FCB2588037CCEE05FF68A2CFBBD7FF11CBD/",
        ["material"] = 3,
        ["specular_intensity"] = 0.03,
        ["specular_color"] = {r=1,g=1,b=1},
        ["specular_sharpness"] = 7.73,
        ["fresnel_strength"] = 0.12,
        ["cast_shadows"] = true,
      },
    },{
      ["label"] = "OLT Dealers",
      {
        ["label"] = "Solarcloud's Lounge",
        ["diffuse"] = 'https://i.imgur.com/HpMmzld.jpg',
      },
      {
        ["label"] = "Solarcloud's Flare",
        ["diffuse"] = 'http://cloud-3.steamusercontent.com/ugc/1763691659225728508/AB24E73C41C05742945BE97E1CA8DAE749852928/',
      },
      {
        ["label"] = 'Battlestar Small Poker',
        ["diffuse"] = 'https://i.imgur.com/mbNtzPp.jpg'
      },
      {
        ["label"] = 'Battlestar Large Poker',
        ["diffuse"] = 'http://cloud-3.steamusercontent.com/ugc/1624068840915587924/A5BA7291047B653269F1986DCFBE552FD8EC84AF/'
      },
      {
        ["label"] = "Owl's Hollow",
        ["diffuse"] = 'https://i.imgur.com/oexmfRm.jpg',
      },
      {
        ["label"] = "Barclay's Poker Center",
        ["diffuse"] = 'https://i.imgur.com/BlT8dM5.jpg',
      },
      {
        ["label"] = "Gumball's Poker And Chill",
        ["diffuse"] = "http://cloud-3.steamusercontent.com/ugc/1761440307783923688/AD4CD4D9C4F11447B9143F0B3A4C1B3122D2B8F8/",
      },
      {
        ["label"] = "The Bard's Codpiece",
        ["diffuse"] = "https://i.imgur.com/FPoVxjY.jpg",
      },
    },
  },
}

function onExternalCommand(input)
  -- input contains the string you entered from VS Code
  print('VSCode: ' .. input)
end

function theHostColor(cond)
  if Player.Black.host then return 'Black' end
  for i, v in ipairs(colors) do
    if Player[v].host then
        return v
    end
  end
end

function theHostId(cond)
  for i,v in next, Player.getPlayers() do
    if v.host then return v.steam_id end
  end
end

function theAdminColor()
  for i, v in ipairs(colors) do
    if Player[v].admin then
        return v
    end
  end
  for i,v in ipairs(Player.getPlayers()) do
    if v.admin then
      return v.color
    end
  end
end

function broadcastToAdmins(msg,fmt)
  for i, player in next, Player.getPlayers() do
    if player.admin then --send it to anyone promoted or RomanticFool if he's in
      broadcastToColor(msg, player.color, fmt)
    end
  end
end

function printError(t)
  broadcastToColor ('[ff0000]Error: [ffffff]' .. t, theHostColor(), {1, 1, 1})
end

function format_int(number)

  local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')

  -- reverse the int-string and append a comma to all blocks of 3 digits
  int = int:reverse():gsub("(%d%d%d)", "%1,")

  -- reverse the int-string back remove an optional comma and put the
  -- optional minus and fractional part back
  return minus .. int:reverse():gsub("^,", "") .. fraction
end

function initializeData()
  lastSeated = {} for i,v in next, getSeatedPlayers() do lastSeated[v] = true end
end

function webRequestVersions(data)
  if data.is_error then return 1 end
  printToAll("[ffff00]Checking for updates")
  if data.is_done then
    local versions = JSON.decode(data.text)
    if #versions > 0 then
      if versions[1].version == versionNumber then
        printToAll("[00ff00]You are on the latest version: " .. versions[1].version)
        return true
      else
          printToAll("[ff0000]You are on an older version: " .. versionNumber ..
            "\n[ffff00]The latest version: [ffffff]" .. versions[1].version .. " [ffff00]contains:\n[ffffff]" .. versions[1].description ..
            "\n[ffff00]Consider updating by restarting TTS and choose this Game from the Workshop section (instead of load/save section) when you create a new game")
          return true
      end
    end
  end
end

function getObjectsFromText_Color(text, fxn, params)
  local rettbl = {}
  for i, obj in next, Global.getObjects() do
    match = string.match(obj[fxn](params), text .. '_(.*)')
    if match then rettbl[match] = obj end
  end
  return rettbl
end

function getObjectsFromSpecialized_Color(text, match_fxn)
  assert(type(match_fxn)=='function','match_fxn must be a function!')
  local rettbl = {}
  for i, obj in next, Global.getObjects() do
    match = match_fxn(text, obj)
    if match then rettbl[match] = obj end
  end
  return rettbl
end

function getAndCheckObjectFromGUID(guid, msg, params, b_noassert, recovery_fxn)
  local retval = getObjectFromGUID(guid)
  local params = type(params)=='table' and params or {}
  if type(recovery_fxn)=='function' then
    retval = retval~=nil and retval or recovery_fxn()
  end
  if retval==nil then
    local outlog = ('%s:%s: %s'):format(guid or 'nil', params.color or '', msg~=nil and msg or 'Unspecified error in getAndCheckObjectFromGUID')
    log(outlog)
    if not b_noassert then assert(false, outlog) end
  end
  return retval
end

function webRequestValidate(data, pl)
  if data.is_error then return 1 end
  if data.is_done then
    local validation = JSON.decode(data.text)
    if validation then
      pl.kick()
    end
  end
end
--[[ onLoad function --]]
welcomeMessage = "Welcome to Moose's Texas Hold'em"
-- function onUpdate()
--   --/execute lastactionon = actionon; Wait.time(function() if actionon~=lastactionon then log(actionon); lastactionon=actionon; end end, 0.1,-1)
--   if actionon~=lastactionon then
--     log(actionon)
--     lastactionon=actionon
--   end
-- end
function tblAggregate(tbl_a,tbl_b)
  -- tbl_a[x] = tbl_b[x] if tbl_b[x]~=nil else tbl_a[x]
  for key,rec in next, tbl_b do
    if type(tbl_b[key])=='table' then
      if tbl_a[key]==nil then tbl_a[key]={} end
      tblAggregate(tbl_a[key],tbl_b[key])
    else
      if tbl_b[key]~=nil then
        tbl_a[key] = tbl_b[key]
      end
    end
  end
end
function getColors(num_players)
  local lcolors = {}
  lcolors[10] = {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink"}
  lcolors[9] = lcolors[10]
  lcolors[8] = {"White", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Pink"}
  lcolors[7] = lcolors[8]
  lcolors[6] = {"White", "Orange", "Yellow", "Green", "Teal", "Pink"}
  lcolors[5] = lcolors[6]
  lcolors[4] = lcolors[6]
  lcolors[3] = lcolors[6]
  lcolors[2] = lcolors[6]
  return lcolors[num_players]
end
function test_function()
  saveddata = {}
  saveddata.options = deepcopy(options)
  saveddata.options.betoptions.genbets = {}
  options.betoptions.preflop['MaxRaise is X'].X = 7500
  tblAggregate(options,saveddata.options)
  log(saveddata.options.betoptions)
  log(options.betoptions)
end

function onLoad(save_state)
  initializeData()
  updatePatchTab()
  local saveddata = JSON.decode(save_state or '')
  if Color.Gold == nil then Color.Add("Gold", Color(221 / 255, 163 / 255, 14 / 255)) end
  if Color.GoldLight == nil then Color.Add("GoldLight", Color(227 / 255, 179 / 255, 54 / 255)) end
  if Color.GoldDark == nil then Color.Add("GoldDark", Color(183 / 255, 135  / 255, 12 / 255)) end
  printToAll(welcomeMessage)
   --[[ Get object references --]]
   local i4 = 1
  boardzone = getAndCheckObjectFromGUID(boardzoneGUID,'boardzone')
  dealbutton = getAndCheckObjectFromGUID(dealbuttonGUID,'dealbutton')
  resetbutton = getAndCheckObjectFromGUID(resetbuttonGUID,'resetbutton')
  sidepotbutton = getAndCheckObjectFromGUID(sidepotbuttonGUID,'sidepotbutton')
  collectbutton = getAndCheckObjectFromGUID(collectbuttonGUID,'collectbutton')
  colors = (savedata~=nil and saveddata.colors~=nil and saveddata.colors) or getColors(#Hands.getHands())

  handzones = getObjectsFromText_Color('auto_handzones','getName')
  if #handzones == 0 then
    for i, zone in next, Hands.getHands() do
      for w, color in next, colors do
        if Color(zone.getData().ColorDiffuse) == Color(color) then handzones[color] = zone break end
      end
      --handzones[] = zone
    end
  end

  betzones = getObjectsFromText_Color('auto_betzones','getName')
  bettext = getObjectsFromText_Color('auto_bettext','getName')
  backtablezones = getObjectsFromText_Color('auto_backtablezones','getName')
  foldtoken = getObjectsFromText_Color('auto_foldtoken','getGMNotes')
  tablezones = getObjectsFromText_Color('auto_tablezones','getName')

  local function nameDescMatch(text, obj)
    local retval = nil
    if string.match(obj.getName(),text)~=nil and inTable(colors, obj.getDescription()) then
      retval = obj.getDescription()
    end
    return retval
  end

  tableobjects = getObjectsFromSpecialized_Color('Front Table',nameDescMatch)
  backtableobjects = getObjectsFromSpecialized_Color('Back Table',nameDescMatch)
  propstableobjects = getObjectsFromSpecialized_Color('PropsPlatform',nameDescMatch)

  deckzone = getAndCheckObjectFromGUID(deckzoneGUID, 'deckzone')
  gamesavezone = getAndCheckObjectFromGUID(gamesavezoneGUID, 'gamesavezone')
  blindszones[1] = getObjectFromGUID(smallBlindGUID)
  blindszones[2] = getObjectFromGUID(bigBlindGUID)
  defaultSave = getObjectFromGUID(defaultSaveGUID)
  potzones[1] = getObjectFromGUID(mainpotzoneGUID)
  -- for i, v in ipairs (sidepotzoneGUIDs) do
  --   potzones[#potzones + 1] = getObjectFromGUID(v)
  -- end
  actionbutton = getObjectFromGUID(actionbuttonGUID)
  optionsbutton = getObjectFromGUID(optionsbuttonGUID)
  --[[ Create this first for resets... Open options menu --]]
  local button = {}
  button.width = 525
  button.height = 525
  button.position = {0, 0.08, 0}
  button.color = {1,1,1,1}
  button.label = 'Options'
  button.font_size = 150
  button.click_function = "spawnOptionsPanel"
  optionsbutton.createButton(button)

  sidepotbutton = getObjectFromGUID(sidepotbuttonGUID)
  smallBlindToken = getObjectFromGUID('6cfc37')
  bigBlindToken = getObjectFromGUID('9904f3')

  Wait.frames(function() postSetup() end, 3) -- guarantees that this runs, even when we have a weird crash
  playerhands = {}

  if saveddata == nil then
    --[[ Initialize texts --]]
    checkAndRespawnObjects()
    hideActionText()
    pottext.setPosition ({0, 1.33, 0})
    pottext.setRotation ({90, 180, 0})
    currentbettext.setPosition({0, 1.33, 1})
    currentbettext.setRotation({90, 180, 0})
  else
    saveddata_opts = {
      'holedealt'
      , 'dealing'
      , 'players'
      , 'checkFoldPlayer'
      , 'checkCallPlayer'
      , 'checkCallAtPlayer'
      , 'checkPlayer'
      , 'foldeds'
      , 'allIns'
      , 'folded_colors'
      , 'checkForRound'
      , 'actionon'
      , 'playerbets'
      , 'playerbets_hist'
      , 'currentbet'
      , 'mainpotchips'
      , 'pot'
      , 'collecting'
      , 'collectmethod'
      , 'convertstackheight'
      , 'hybridthreshold'

      , 'handinprogress'
      , 'thehole'
      , 'theflop'
      , 'theturn'
      , 'theriver'
      , 'theshowdown'
      , 'thepostgame'
      , 'allInHappened'


      , 'savebagGUID'
      , 'deckGUID'
      , 'muckGUID'
      , 'potobjectGUID'
      , 'boardobjectGUID'
      , 'overlayGUID'
      , 'pottextGUID'
      , 'currentbettextGUID'
      , 'playerpottextGUID'
      , 'playercurrentbettextGUID'
      , 'actiontextGUID'
      , 'revealedcards'
      , 'holecards'
      , 'handsshown'
      , 'countHandsDealt'
      , 'runtimeHandsDealt'
    }
    for i,opt in next, saveddata_opts do
      if saveddata[opt]~=nil then _G[opt] = saveddata[opt] end
    end

    if saveddata.bettext ~= nil then
      bettext = JSON.decode(saveddata.bettext)
      if saveddata.bettext ~= nil then
        for i, v in ipairs(colors) do
          bettext[v] = getObjectFromGUID(bettext[v])
        end
      end
    end
    if saveddata.sidepottext ~= nil then
      sidepottext = JSON.decode(saveddata.sidepottext)
      for i, v in ipairs(colors) do
        sidepottext[v] = getObjectFromGUID(sidepottext[v])
      end
    end
    if saveddata.tablezonetext ~= nil then
      tablezonetext = JSON.decode(saveddata.tablezonetext)
      for i, v in ipairs(colors) do
        tablezonetext[v] = getObjectFromGUID(tablezonetext[v])
      end
    end
  end

  -- -- initialize xml
  -- if options.uxoptions.leaderboard then
  --   Global.UI.setXml(UITableBar.exportXML()..UILeaderBoard.exportXML(10,3))
  -- else
  --   Global.UI.setXml(UITableBar.exportXML())
  -- end
  options.dealdelay1 = 0.1

  function compareVersions(version1,version2)
    local v1 = tonumber(string.gsub(string.match(version1 or '',"(.*)[^%d]+") or '0',"[.]",""),10) + (string.byte(string.match(version1 or '',".*([^%d]+)") or '') or 0)/1000
    local v2 = tonumber(string.gsub(string.match(version2 or '',"(.*)[^%d]+") or '0',"[.]",""),10) + (string.byte(string.match(version2 or '',".*([^%d]+)") or '') or 0)/1000
    return v2 > v1
  end
  if compareVersions(saveddata.versionNumber,versionNumber) then
    log('Updating Versions')
    if compareVersions(saveddata.versionNumber,'0.15.68e') then
      saveddata.options = nil
      playerbets = {}
      playerbets_hist = {}
      if foldtoken==nil or #foldtoken == 0 then
        foldtoken = {}
        for i,v in next, colors do
          foldtoken[v] = getObjectFromGUID(foldtokenGUIDs[i])
        end
      end
    end
    if compareVersions(saveddata.versionNumber,'0.15.68e') then
      for i, v in next, Global.getObjects() do if v.type=='3D Text' then v.destruct() end end
      for i, v in next, {'postflop','preflop'} do
        options.betoptions[v].maxbet["X * Pot + Y * Prev Bet + Z * Prev Raise"].Z = 0
        options.betoptions[v].minraise["X * Pot + Y * Prev Bet + Z * Prev Raise"].Z = 0
      end
    end
    if compareVersions(saveddata.versionNumber,'0.15.68f') then
      --update the overlay object in 4 frames
      Wait.frames(function()
        overlay.script_code = [[
          function onLoad(save_str)
            --docstring: author: steam: RomanticFool
            toggles = {}
            toggles.choppot = false
            colors = Global.getTable('colors') or {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink"}

            self.UI.setXml('<HorizontalLayout position="0 0 -50" height="50" spacing="10" width="900" offsetXY="0 -750">\n'
            .. '<Button id="chopToggle" onClick="chopPotToggle" preferredWidth="100" color="Gray" fontSize="32" text="CHOP" />'
            .. coloredButtons() .. '</HorizontalLayout>'
            )
            for i, v in next, colors do
              local fname = string.format('f_%sChop',v)
              _G[fname] = function(pl,value,ob)
                if pl==nil or pl.admin then
                  log(fname .. "|" .. tostring(toggles.choppot))
                  if toggles.choppot then
                    toggles[ob] = not toggles[ob]
                    if toggles[ob] then
                      self.UI.setAttributes(ob, {text='✓'})
                    else
                      self.UI.setAttributes(ob, {text=' '})
                    end
                  else
                    toggles[ob] = not toggles[ob]
                    if toggles[ob] then
                      resetToggles()
                      self.UI.setAttributes(ob, {text='?'})
                      toggles[ob] = true
                    else
                      self.UI.setAttributes(ob, {text=' '})
                      Global.call('infMovePotToWinner',{player_color=v,})
                    end
                  end
                end
              end
            end
          end

          function resetToggles(color_in)
            local colors = color_in~=nil and {color_in} or colors
            for i,color in next, colors do
              local l_ob = ('%sPotButton'):format(color)
              self.UI.setAttributes(l_ob, {text=' '})
              toggles[l_ob] = false
            end
          end

          function chopPotToggle(pl,ob,value)
            --docstring: author: steam: RomanticFool
            if pl.admin then
              if toggles.choppot ~= nil then
                toggles.choppot = not toggles.choppot
                if toggles.choppot then
                  self.UI.setAttributes('chopToggle',{color="Black",textColor="White",text="DONE"})
                  for i,v in next, colors do
                     if toggles[v..'PotButton'] then
                       _G[string.format('f_%sChop',v)](nil,nil,v..'PotButton')
                     end
                  end
                else
                  self.UI.setAttributes("chopToggle",{color="Gray",textColor="Black",text="CHOP"})
                  local tbl_arg = {}
                  for i,v in next, colors do
                     if toggles[v..'PotButton'] then
                       tbl_arg[#tbl_arg+1] = v
                       resetToggles(v)
                     end
                  end
                  if #tbl_arg > 0 then Global.call('infSplitPot',tbl_arg) end
                end
              end
            end
          end

          function colorButton(color)
            return string.format("<Button id='%sPotButton' onClick='f_%sChop' color='%s' fontSize='32' text='' />",color,color,color)
          end

          function onReset()
          end

          function coloredButtons()
            --docstring: author: steam: RomanticFool
            local out = ''
            for i,v in next, colors do
              out = out .. colorButton(v)
            end
            return out
          end
          ]]
          overlay = overlay.reload()
          overlay.interactable = false
        end, 4)
    end
  end
  if saveddata.options ~= nil then tblAggregate(options,saveddata.options) end
  if options.autoclocktime == nil then
    options.autoclocktime = 5
    options.autoclock = false
    options.autofold = false
    options.clockpausebutton = true
  end
  if options.convertstackheight == nil then
    options.convertstackheight = 0
  end
  if options.currencies == nil or options.stacklayout == nil then
    options.currencies = next(currenciesSelection,nil)
    options.stacklayout = currenciesSelectionStacklayout[next(currenciesSelection,nil)][1]
    currencies = deepcopy(currenciesSelection[options.currencies])
    -- we sort them by size in case the user has not
    table.sort(currencies, function(a,b) return a.value > b.value end)
  else
    currencies = deepcopy(currenciesSelection[options.currencies])
    options.stacklayout = (stacklayout[options.stacklayout]~=nil and options.stacklayout) or currenciesSelectionStacklayout[next(currenciesSelection,nil)][1]
    if currencies == nil then
      options.currencies = next(currenciesSelection,nil)
      options.stacklayout = currenciesSelectionStacklayout[next(currenciesSelection,nil)][1]
      currencies = deepcopy(currenciesSelection[options.currencies])
    end
    -- we sort them by size in case the user has not
    table.sort(currencies, function(a,b) return a.value > b.value end)
  end
  if options.enforcefoldinturn == nil then
    options.enforcefoldinturn = false
  end
  if options.lockchips == nil then
    options.lockchips = true
  end
  -- sanitize and initialize enforced betting
  for key, rec in next, options.betoptions do
    if key=='preflop' or key=='postflop' then
      for subkey, subrec in next, options.betoptions[key] do
        if subkey=='minraise' or subkey=='maxbet' then
          for subsubkey, subsubrec in next, options.betoptions[key][subkey] do
            if subsubrec.output == nil or subsubrec.bound == nil then
              options.betoptions[key][subkey][subsubkey]=nil
            else
              tlog(subkey .. "|" .. subsubkey .. "|" .. tostring(subsubrec.isOn))
              options.betoptions[key][subkey].name = subsubkey
            end
          end
        else
          options.betoptions[key][subkey] = nil
        end
      end
    else
      options.betoptions[key] = nil
    end
  end
  for _k,k in next, {'preflop','postflop'} do
    for _j,j in next, {'minraise','maxbet'} do
      for l,fffrec in next, options.betoptions[k][j] do
        if fffrec.isOn then _G[('cur_%s_%s'):format(k,j)] = fffrec end
      end
    end
  end

  -- initialize xml
  if options.uxoptions.leaderboard then
    Global.UI.setXml(UITableBar.exportXML()..UILeaderBoard.exportXML(10,3))
  else
    Global.UI.setXml(UITableBar.exportXML())
  end

  --[[ Create buttons --]]
  local button = {}

  --[[ This button deals cards for each stage of the hand --]]
  button.function_owner = nil
  button.position = {0, 0.08, 0}
  button.rotation = {0, 180, 0}
  button.width = 525
  button.height = 525
  button.label = 'Deal'
  button.click_function = "deal"
  button.font_size = 150
  dealbutton.createButton(button)


  --[[ Resets deck and variables --]]
  button.label = 'Reset'
  button.width = 780
  button.click_function = "resetGame"
  button.color = {1, 0, 0}
  button.font_color = {1, 1, 1}
  button.rotation = {0, 0, 0}
  resetbutton.createButton(button)

  --[[ Move bets to pot --]]
  button.width = 525
  button.color = {1, 1, 1}
  button.font_color = {0, 0, 0}
  button.label = 'Collect\nBets'
  button.click_function = "collectBets"
  button.font_size = 150
  collectbutton.createButton(button)

    --[[ Move action text --]]
    button.width = 525
    button.height = 525
    button.color = {1,1,1,1}
    button.label = 'Next\nPlayer'
    button.font_size = 150
    button.click_function = "nextPlayerAction"
    actionbutton.createButton(button)

  --[[ Create Side Pots --]]
  button.label = 'Create\nSidepot'
  button.font_size = 150
  button.click_function = "createSidepot"
  sidepotbutton.createButton(button)

  local hotkeys = {}
  hotkeys["Call"] = {function(player_color, hovered_object, world_position, key_down_up) noImpl(nil,player_color) end, false}
  hotkeys["Fold/Check"] = {function(player_color, hovered_object, world_position, key_down_up) noImpl(nil,player_color) end, false}
  hotkeys["Reset"] = {function(player_color, hovered_object, world_position, key_down_up) noImpl(nil,player_color) end, false}
  for key, hotkey in next, hotkeys do
    addHotkey(key, hotkey[1], hotkey[2] or false)
  end
end
function noImplX(pl,value,id)
  pl.broadcast("Function not implemented ¯\\_(ツ)_/¯","Yellow")
end
function noImpl(ob, plc)
  Player[plc].broadcast("Function not implemented ¯\\_(ツ)_/¯","Yellow")
end
function tester()
  for _k,k in next, {'preflop','postflop'} do
    for _j,j in next, {'minraise','maxbet'} do
      for l,fffrec in next, options.betoptions[k][j] do
        log(_G[('cur_%s_%s'):format(k,j)].name or 'nil' .. "|" .. tostring(fffrec.isOn))
      end
    end
  end
end
function postSetup()
  checkAndRespawnObjects(nil,nil)
  deck = getAndCheckObjectFromGUID(deckGUID,"postSetup: deck is nil", nil, true, function() return newDeck(nil,nil,false) end)
  muck = getAndCheckObjectFromGUID((muckGUID),"postSetup: muck is nil", nil, true, function() for i,obj in next, getAllObjects() do if obj.getCustomObject().mesh == 'http://pastebin.com/raw/133e1Z0L' then return obj end end return nil end)
  boardobject = getAndCheckObjectFromGUID(boardobjectGUID,"postSetup: boardobject is nil", nil, true, function() for i,obj in next, getAllObjects() do if obj.getCustomObject().mesh == 'http://pastebin.com/raw/U9rtcyua' then return obj end end return nil end)
  potobject = getAndCheckObjectFromGUID(potobjectGUID,"postSetup: potobject is nil", nil, true, function() for i,obj in next, getAllObjects() do if obj.getCustomObject().mesh == 'http://pastebin.com/raw/uvvaV5Np' then return obj end end return nil end)
  pottext = getAndCheckObjectFromGUID(pottextGUID, "postSetup: pottext is nil", nil, false, function() return (pottext or getObjectFromGUID('ef2566')) end)
  currentbettext = getAndCheckObjectFromGUID(currentbettextGUID, "postSetup: currentbettext is nil", nil, false, || currentbettext)
  playerpottext = getAndCheckObjectFromGUID(playerpottextGUID,"postSetup: playerpottext is nil", nil, false, || playerpottext)
  playercurrentbettext = getAndCheckObjectFromGUID(playercurrentbettextGUID,"postSetup: playercurrentbettext is nil", nil, false, ||playercurrentbettext)
  actiontext = getAndCheckObjectFromGUID(actiontextGUID,"postSetup: actiontext is nil", nil, true,
  function()
    actiontext = getObjectFromG({getName='auto_actiontext'})
    if actiontext==nil then checkAndRespawnObjects(nil,nil) end
    return actiontext
  end)
  playerbetboundstext = getAndCheckObjectFromGUID(playerbetboundstextGUID,"postSetup: playerbetboundstext is nil", nil, true,
  function()
    playerbetboundstext = getObjectFromG({getName='auto_playerbetboundstext'})
    if playerbetboundstext==nil then checkAndRespawnObjects(nil,nil) end
    return playerbetboundstext
  end)
  savebag = getAndCheckObjectFromGUID(savebagGUID,"postSetup: savebag is nil", nil, true, getGameSaveBag)
  mainpotchips = initializePot()

  createPlayerButtons()
  createPassiveButtons()
  setBlinds()

  for i, v in ipairs(getAllObjects()) do
    if v.getName() == 'Back Table' and options.changemachine then
      local offsetx = 2 / #currencies
      local button = {}
      v.clearButtons()
      local offsetx = 2 / #currencies
      local button = {}

      if #currencies <= 10 then
        offsetx = 1.65 / (#currencies - 2)
      else
        offsetx = 1.65 / 8
      end
      local offsety = 2 / #currencies
      button.font_size = 150
      button.width = 450
      button.height = 250
      button.scale = {1 / 5, 1 / 5, 1 / 7.5}
      button.position = {0.83, - 0.1, - 0.9}
      button.rotation = {180, 0, 0}

      for j, w in ipairs(currencies) do
        if w.value ~= -1 then
          button.label = w.label
          button.click_function = 'changeMachineButton' .. j
          v.createButton(button)
          button.position[1] = button.position[1] - offsetx
        end
        if j == 9 then
          if #currencies - 11 > 0 then
            offsetx = 1.65 / (#currencies - 11)
            button.position = {0.83, - 0.1, - 0.8} -- spawn 1 button in the center
          else
            button.position = {0, - 0.1, - 0.8} -- spawn 1 button in the center
          end
        end
      end
    end
  end
  --[[ Make non-interactable parts to non-interactable --]]
  local custom = {}
  local terms = {'Front Table','Fold Banner','Chip Collector','PropsPlatform','Back Table','Dealer Table','Change Box'}
  for i, v in ipairs (getAllObjects()) do
    if indexTable(terms, v.getName()) then
      v.interactable = false
    elseif v.getName() == 'Table Overlay' then
      overlay = v
      v.interactable = false
    end
  end

  muck.setColorTint(Color({r=0, g=0, b=0, a=0}))
  --boardobject.setColorTint(pottext.TextTool.getFontColor())


  --[[ Copy scripts from objects. These are used when objects are respawned with 'Reset Objects' button on the options menu --]]
  scripts[1] = muck.getLuaScript()
  --scripts[2] = boardobject.getLuaScript()
  scripts[3] = potobject.getLuaScript()
  saveWealth = {}
  if savebag~=nil and digestSaves_Stored then
    saveWealth['stored'] = digestSaves_Stored(savebag)
    saveWealth['player'] = digestSaves_Players()
    saveWealth['all'] = deepcopy(saveWealth['stored'])
    playerIndices = insertSort(saveWealth['all'],saveWealth['player'])
    exportToUILeaderBoard(flattenTbls({saveWealth['stored'],saveWealth['player']}),true)
  end


  -- marks this load as being done for the version number
  onLoad_versionNumber = versionNumber
end
testArraysS = {}
testArraysS[#testArraysS+1] = {1, 'SA', 10}
testArraysS[#testArraysS+1] = {2, 'SB', 8}
testArraysS[#testArraysS+1] = {3, 'SC', 6}
testArraysS[#testArraysS+1] = {4, 'SD', 6}
testArraysS[#testArraysS+1] = {5, 'SE', 5}
testArraysP = {}
testArraysP[#testArraysP+1] = {1, 'PA', 11}
testArraysP[#testArraysP+1] = {2, 'PB', 9}
testArraysP[#testArraysP+1] = {3, 'PC', 6}
testArraysP[#testArraysP+1] = {4, 'PD', 5}
testArraysP[#testArraysP+1] = {5, 'PE', 5}

function insertSort(tbl_inout, tbl_in)
  -- tbl_inout and tbl_in must be presorted
  local k = 1
  for i,v in next, tbl_in do
    local inserted = false
    for j=k,#tbl_inout do
      if tbl_inout[j][3] <= v[3] then
        log(k.."|"..j)
        table.insert(tbl_inout,j,v)
        k = j+1
        inserted = true
        break
      end
    end
    if not inserted then
      k=#tbl_inout
      table.insert(tbl_inout,v)
    end
  end
end
function onSave()
  --print ('saved')
  local savebettext = {}
  local savefoldtoken = {}
  local savesidepottext = {}
  local savetablezonetext = {}
  for i, v in pairs (colors) do
    savebettext[v] = bettext[v].getGUID()
    savesidepottext[v] = sidepottext[v].getGUID()
    savetablezonetext[v] = tablezonetext[v].getGUID()
  end

  if savebag == nil then
    savebag = getGameSaveBag()
    if savebag == nil then
      broadcastToAdmins("[ffff00]Cannot auto save game without a Game Saves\nPlace a bag in the Game Saves square!") return 1
    end
  end
  if deck == nil then
    initDeck(nil,false)
    if deck==nil then broadcastToAdmins("[ffff00]Cannot auto save game without a Deck\nPlace a deck in the Card Deck square!") return 1 end
  end

  if savebag ~= nil then
    savebagGUID = savebag.getGUID()
  end

  tosave = {}
  tosave.colors = colors
  tosave.options = stripTable(deepcopy(options))
  tosave.holedealt = holedealt
  tosave.dealing = false
  tosave.players = players
  tosave.checkFoldPlayer = checkFoldPlayer
  tosave.checkCallPlayer = checkCallPlayer
  tosave.checkCallAtPlayer = checkCallAtPlayer
  tosave.checkPlayer = checkPlayer
  tosave.foldeds = foldeds
  tosave.allIns = allIns
  tosave.folded_colors = folded_colors
  tosave.checkForRound = checkForRound
  tosave.actionon = actionon
  tosave.playerbets = playerbets
  tosave.playerbets_hist = playerbets_hist
  tosave.currentbet = currentbet
  tosave.mainpotchips = mainpotchips
  tosave.pot = pot
  tosave.collecting = false
  tosave.handinprogress = handinprogress
  tosave.thehole = thehole
  tosave.theflop = theflop
  tosave.theturn = theturn
  tosave.theriver = theriver
  tosave.theshowdown = theshowdown
  tosave.thepostgame = thepostgame
  tosave.deckGUID = deck and deck.getGUID() or deckGUID
  tosave.muckGUID = muck and muck.getGUID() or muckGUID
  tosave.potobjectGUID = potobject~=nil and potobject.getGUID() or potobjectGUID
  tosave.boardobjectGUID = boardobject~=nil and boardobject.getGUID() or boardobjectGUID

  tosave.overlayGUID = overlay.getGUID()
  tosave.pottextGUID = pottext.getGUID()
  tosave.currentbettextGUID = currentbettext.getGUID()
  tosave.playerpottextGUID = playerpottext.getGUID()
  tosave.playercurrentbettextGUID = playercurrentbettext.getGUID()
  tosave.actiontextGUID = actiontext.getGUID()
  tosave.holecards = holecards
  tosave.dealt_cards = dealt_cards
  tosave.revealedcards = revealedcards
  tosave.handsshown = handsshown
  tosave.savebagGUID = savebagGUID
  tosave.bettext = JSON.encode(savebettext)
  tosave.sidepottext = JSON.encode(savesidepottext)
  tosave.tablezonetext = JSON.encode(savetablezonetext)
  tosave.versionNumber = versionNumber

  tosave.countHandsDealt = countHandsDealt or 0
  tosave.runtimeHandsDealt = runtimeHandsDealt or 0
  return JSON.encode(tosave)
end

function onPlayerConnect(pl)
  log(("%s\n%s"):format(pl.steam_name, pl.steam_id),"connect:")
  local req = "http://localhost:3000/api/validate/" .. pl.steam_id .. "?api-key=bar"
  WebRequest.get(req, function(a) webRequestValidate(a, pl) end)
end

function onPlayerDisconnect(pl)
  log(("%s\n%s"):format(pl.steam_name, pl.steam_id),"disconnect:")
end

function slot_t(params)
  local tbl_out = deepcopy(params)
  -- number
  -- position .. positional poker baby
  -- color White ... Pink
  -- playerid steamid | aid
  -- personalpot
  -- maximumpot
  ----{K_ACTION, VALUE}
  -- lastAction K_ACTION_NONE | K_ACTION_CHECK | K_ACTION_CALL | K_ACTION_RAISE | K_ACTION_ALLIN | K_ACTION_FOLD
  -- queuedaction K_ACTION_CALL | K_ACTION_CHECK | K_ACTION_RAISE | K_ACTION_FOLD
  -- reqAction  K_ACTION_CALL | K_ACTION_ALLIN \ Unlike the others this one is storage for the UI layers
  -- hand
  -- layout
  return tbl_out
end

function standupAll(ob,plc)
  if plc==nil or plc~=nil and Player[plc].admin then
    if not standupStarted then
      standupStarted = true
      local ifinal = #Player.getColors()
      for i,plc2 in next, Player.getColors() do
        if plc2 ~= "Grey" then
          Wait.time(function() if i==ifinal then standupStarted=false end if Player[plc2].seated then Player[plc2].changeColor('Grey') end end, 0.5*(i-1))
        end
      end
    end
  end
end

function onPlayerChangeColor(color)
  if color == nil then
    log('Color change nil')
    return 1
  end
  if color == "Black" then
    log('Color change to Black')
    return 1
  end

  clearPlayerButtons()
  --log('onPlayerChangeColor:clearPlayerButtons')
  createPlayerButtons()
  --log('onPlayerChangeColor:createPlayerButtons')
  calculatePots()
  --log('onPlayerChangeColor:calculatePots')

  currentSeated = {}
  local newCount = 0
  local oldCount = 0
  for i,v in next, getSeatedPlayers() do newCount=newCount+1 currentSeated[v] = true end
  --setDiff(lastSeated, currentSeated)
  seatDiff = deepcopy(lastSeated)
  for i,v in next, seatDiff do if currentSeated[i] then oldCount=oldCount+1 seatDiff[i] = nil end end

  --log statement
  --for i,v in next, seatDiff do log(("%s:%s"):format(i,tostring(v))) end

  log({newCount,oldCount})
  lastSeated = currentSeated
  --
  if color == 'Grey' then
    autoSaveBag(({next(seatDiff)})[1])
  else
    _G['loadSaveBag_'..color](_, color)
  end
end

function onChat(msg, pl)
  local players = Player.getPlayers()

  if pl.host then
    if msg == "!s" then
      for i, v in next, players do
        for j, w in next, colors do
          if j == i and v.color == "Grey" then
            v.changeColor(w)
            local p = tablezones[w].getPosition()
            local r = tablezones[w].getRotation()
            spawnChips(10000, p, r, 5)
          end
        end
      end
    end

    if msg == "!r" then
      for i, v in ipairs(players) do
        Wait.frames(function()
          v.changeColor("Grey")
        end, 40)
      end
    end
  end
end

function autoSaveBag(color_)
  local allobjects = getAllObjects()
  local lcolor = colors
  if type(color_) == 'string' then
    lcolor = {color_,}
  elseif type(color_)=='table' then
    lcolor = deepcopy(color_)
  end
  for i, v in ipairs(lcolor) do
    if Player[v].seated == false then
      local playerbag = nil
      local allobjectsinzone = tablezones[v].getObjects()
      local allobjectsinback = backtablezones[v].getObjects()
      local allobjectsinhand = Player[v].getHandObjects()
      local objrefs = {}
      for i,obj in next, allobjectsinback do
        objrefs[obj] = true
      end
      for i,obj in next, allobjectsinzone do
        objrefs[obj] = true
      end
      for i,obj in next, allobjectsinhand do
        objrefs[obj] = nil
      end
      for obj in next, objrefs do
        if obj ~= nil then
          if obj.type == 'Bag' and obj.getDescription() ~= '' then
            playerbag = obj
            dlog(8,'Found player bag ..' .. logString(obj))
            break
          end
        end
      end
      if playerbag~=nil then
        objrefs[playerbag] = nil
        for v in next, objrefs do
          if v.type ~= 'Tileset' and  v.getDescription() ~= playerbag.getDescription() and v.getName() ~= "Passive Actions" then
            playerbag.putObject(v)
          end
        end
        for i, v in ipairs(allobjects) do
          if v~=nil and v.getDescription() == playerbag.getDescription() and v.type ~= 'Bag' and v.type ~= 'Tileset' then
            playerbag.putObject(v)
          end
        end
        Wait.frames(function() assert(savebag,"savebag undefined!") savebag.putObject(playerbag) calculatePots() end, 20)
      end
    end
  end
end

function clearPlayerButtons()
  local obj = getAllObjects()
  for o, pl in ipairs(colors) do
    if foldtoken[pl].getColorTint() ~= Color(1,1,1,0.8) then
      foldtoken[pl].setColorTint({0,0,0,0.8})
    end
  end
  for i, v in ipairs (obj) do
    if v.getName() == 'Front Table' or v.getName() == 'Back Table' then
      v.clearButtons()
    end
  end
end




function toggleCheckFold(ob, pl, rightclick)
  if rightclick then return 1 end
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  if checkFoldPlayer[pl] == nil then
    checkFoldPlayer[pl] = true
  else
    checkFoldPlayer[pl] = not checkFoldPlayer[pl]

  end
  checkPlayer[pl] = false
  checkCallPlayer[pl] = false
  createPassiveButtons(ob, pl)

end
function toggleCallAt(ob, pl, rightclick)
  if rightclick then return 1 end
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  checkCallAtPlayer[pl] = not checkCallAtPlayer[pl]
  checkCallPlayer[pl] = false
  checkPlayer[pl] = false
  checkFoldPlayer[pl] = false
  createPassiveButtons(ob, pl)
end
function toggleCallAny(ob, pl, rightclick)
  if rightclick then return 1 end
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  checkCallPlayer[pl] = not checkCallPlayer[pl]
  checkCallAtPlayer[pl] = false
  checkPlayer[pl] = false
  checkFoldPlayer[pl] = false
  createPassiveButtons(ob, pl)
end

function toggleCheck(ob, pl, rightclick)
  if rightclick then return 1 end
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  if checkPlayer[pl] == nil then
    checkPlayer[pl] = true
  else
    checkPlayer[pl] = not checkPlayer[pl]
  end
  checkCallAtPlayer[pl] = false
  checkFoldPlayer[pl] = false
  checkCallPlayer[pl] = false
  createPassiveButtons(ob, pl)
end

function togglePassiveButtons()
  if options.playerbuttons.checkfoldplayer then
    local objs = getAllObjects()
    for j, w in ipairs(objs) do
      if w.getName() == "Passive Actions" then
        w.destruct()
      end
    end
    for i, v in ipairs(colors) do
      local passiveButtons = nil
      local p = tablezones[v].getPosition()
      local r = tablezones[v].getRotation()
      local xoffset = -4
      local zoffset = 0.85
      p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      local params = {}
      params.type = "BlockRectangle"
      params.position = p
      params.position["y"] = 1.43
      params.rotation = r
      params.scale = {3.16, 0.05, 1.69}

      params.callback_function = function(o) o.setName("Passive Actions") o.setLock(true) o.setDescription(v) createPassiveButtons(o) end
      passiveButtons = spawnObject(params)
      passiveButtons.interactable = false
    end
  else
    local objs = getAllObjects()
    for i, v in ipairs(objs) do
      if v.getName() == "Passive Actions" then
        v.destruct()
      end
    end
  end
end



function setInvisibility(ob, color)
  local invisibleto = deepcopy(colors)
  local index = indexTable(invisibleto, color)
  invisibleto[index] = nil
  if not options.spectatormode then
    invisibleto[#invisibleto + 1] = "Grey"
  end
  ob.setInvisibleTo(invisibleto)
end

function createPassiveButtons(o)
  local tmp
  if o == nil then
    local objs = getAllObjects()
    for i, v in ipairs(objs) do
      if v.getName() == "Passive Actions" then
        o = v
        setInvisibility(v, o.getDescription())
        v.interactable = false
      end
    end
  end
  if o~=nil then setInvisibility(o, o.getDescription()) end
  -- local seated = dGetSeatedPlayers()
  for u, pl in ipairs(colors) do
    local lcurrentbet = getChipValues(betzones[pl], {})
    local ltablevalue = getChipValues(tablezones[pl], {})
    for i, v in ipairs(tablezones[pl].getObjects()) do
      if v.getName() == 'Passive Actions' then
        v.clearButtons()
        v.setColorTint({0,0,0})
        local button = {}
        button.scale = {1,1 ,1 }
        button.position = {0, 0, 0}
        button.rotation = {0, 180, 0}
        button.width = 400
        button.height = 15
        button.font_size = 60
        local posy = 0.30
        if options.playerbuttons.checkfoldplayer then
          button.height = 10
          button.font_size = 50
          button.sound = false
          button.position = {0, 2, posy}
          if checkPlayer[pl] then
            button.label = 'Check'
            button.font_color = {r=0, g=0.4, b=0, a=1}
            button.color = {r=0.8, g=1, b=0.8, a=1}
            button.hover_color = {r=0.8, g=1, b=0.8, a=1}
          else
            button.color = {r=1, g=1, b=1, a=1}
            button.hover_color = {r=1, g=1, b=1, a=1}
            button.font_color = {r=0, g=0, b=0, a=1}
            button.label = 'Check'
          end
          if actionon == pl or not handinprogress or #Player[pl].getHandObjects() == 0  then
            button.label = 'Check'
            button.color = {r=1, g=1, b=1, a=1}
            if lcurrentbet == currentbet then
              button.font_color = {r=0, g=0, b=0, a=1}
              button.tooltip = ""
              button.click_function = 'checkAction'
            else
              button.font_color = {r=0, g=0, b=0, a=0.8}
              button.click_function = 'doNothing'
            end
          else
            button.tooltip = "Prepare a Check before your turn"
            button.click_function = 'toggleCheck'
          end
          v.createButton(button)
        end

        if options.playerbuttons.checkfoldplayer then
          posy = posy - 0.30
          button.height = 10
          button.font_size = 50
          button.sound = false
          tmp = button.width
          button.width = 250
          button.position = {0.2, 2, posy}
          button.color = {1, 1, 1, 1}
          if actionon == pl or not handinprogress or #Player[pl].getHandObjects() == 0 then
            button.label = 'Call'
            if lcurrentbet <= currentbet and ltablevalue > currentbet - lcurrentbet then
              button.font_color = {r=0, g=0, b=0, a=1}
              button.color = {0/255, 141/255, 219/255, 1}
              button.tooltip = "Call Current Bet"
              button.click_function = 'callAction'
            else
              button.font_color = {r=0, g=0, b=0, a=0.8}
              button.click_function = 'doNothing'
            end
          else
            button.tooltip = "Prepare a Check/Call before your turn"
            button.color = {r=1, g=1, b=1, a=1}
            button.hover_color = {r=1, g=1, b=1, a=1}
            button.click_function = 'toggleCallAt'
            if checkCallAtPlayer[pl] then
              button.label = 'Call'
              button.color = {r=39/255, g=138/255, b=65/255, a=1}
              button.hover_color = {r=0.8, g=0.8, b=1, a=1}
              button.font_color = {r=0, g=0, b=0.4, a=1}
            else
              button.color = {r=1, g=1, b=1, a=1}
              button.hover_color = {r=1, g=1, b=1, a=1}
              button.font_color = {r=0, g=0, b=0, a=1}
              button.label = 'Call'
            end
          end
          v.createButton(button)
          button.width = tmp
        end
        if options.playerbuttons.checkfoldplayer then
          button.color = {1, 1, 1, 1}
          button.height = 10
          button.font_size = 50
          button.sound = false
          button.width = 200
          button.position = {-0.25, 2, posy}
          if actionon == pl or not handinprogress or #Player[pl].getHandObjects() == 0 then
            button.label = 'Any'
            if lcurrentbet <= currentbet and ltablevalue > currentbet-lcurrentbet then
              button.font_color = {r=0, g=0, b=0, a=1}
              button.tooltip = ""
              button.click_function = 'callAction'
            else
              button.font_color = {r=0, g=0, b=0, a=0.7}
              button.click_function = 'doNothing'
            end
          else
            button.tooltip = "Prepare a Check/Call before your turn"
            button.color = {r=1, g=1, b=1, a=1}
            button.hover_color = {r=1, g=1, b=1, a=1}
            button.click_function = 'toggleCallAny'
            if checkCallPlayer[pl] then
              button.label = 'Any'
              button.color = {r=0.8, g=0.8, b=1, a=1}
              button.hover_color = {r=0.8, g=0.8, b=1, a=1}
              button.font_color = {r=0, g=0, b=0.4, a=1}
            else
              button.color = {r=1, g=1, b=1, a=1}
              button.hover_color = {r=1, g=1, b=1, a=1}
              button.font_color = {r=0, g=0, b=0, a=1}
              button.label = 'Any'
            end
          end
          v.createButton(button)
          button.width = tmp
        end
        if options.playerbuttons.checkfoldplayer then
          posy = posy - 0.30
          button.height = 10
          button.font_size = 50
          button.sound = false
          button.position = {0, 2, posy}
          if actionon == pl or not handinprogress or #Player[pl].getHandObjects() == 0 then
            button.tooltip = ""
            button.font_color = {r=0, g=0, b=0, a=1}
            button.color = {r=0.7, g=0, b=0, a=1}
            button.hover_color = {r=0.7, g=0, b=0, a=1}
            button.font_color = {r=1, g=1, b=1}
            button.label = 'Fold'
            button.click_function = 'foldPlayerHand'
          else
            button.tooltip = "Prepare a Check/Fold before your turn"
            button.hover_color = {r=1, g=1, b=1, a=1}
            button.color = {r=1, g=1, b=1, a=1}
            button.font_color = {r=0, g=0, b=0}
            button.click_function = 'toggleCheckFold'
            if checkFoldPlayer[pl] then
              button.color = {r=1, g=0.8, b=0.8, a=1}
              button.hover_color = {r=1, g=0.8, b=0.8, a=1}
              button.label = 'Fold'
              button.font_color = {r=0.4, g=0, b=0, a=1}
            else
              button.color = {r=1, g=1, b=1, a=1}
              button.hover_color = {r=1, g=1, b=1, a=1}
              button.font_color = {r=0, g=0, b=0, a=1}
              button.label = 'Fold'
            end
          end
          v.createButton(button)
        end
      end
    end
  end

end

function createPlayerButtons(plc_in)
  --[[ Create sort Chips onPlayers --]]
  local seated = type(plc_in)=='string' and {plc_in,}
  or (type(plc_in)=='table' and plc_in)
  or dGetSeatedPlayers()

  local button = {}

  button.rotation = {0, 180, 180}
  button.width = 250
  button.height = 15
  button.font_size = 50
  for u, pl in ipairs(seated) do
    if foldtoken[pl].getColorTint() == Color(0,0,0,0.8) then
      foldtoken[pl].setColorTint({0,0,0,0})
    end
    for i, v in ipairs(backtablezones[pl].getObjects()) do
      local posy = 1.00
      if v.getName() == "Back Table" then
        v.clearButtons()
        if options.playerbuttons.afk then
          posy = posy - 0.3
          button.tooltip = "Marks you as AFK"
          button.font_color = {r=0, g=0, b=0}
          button.width = 220
          button.color = {r=1, g=1, b=1}
          button.height = 15
          button.font_size = 40
          button.label = 'AFK'
          button.position = {-0.68, - 0.1, posy}
          button.click_function = 'goAFK'
          v.createButton(button)
        end

        if options.playerbuttons.loadsavebag then
          posy = posy - 0.3
          button.tooltip = "Loads a save bag"
          button.height = 15
          button.font_size = 40
          button.width = 220
          button.label = 'Load'
          button.position = {-0.68, - 0.1, posy}
          button.click_function = 'loadSaveBag_' .. pl
          v.createButton(button)
        end

        if options.playerbuttons.topoff then
          posy = posy - 0.3
          button.tooltip = "Top off to Max Buy-In"
          button.height = 10
          button.font_size = 40
          button.width = 220
          button.label = 'Top Up'
          button.color = {r=44/255, g=44/255, b=44/255}
          button.font_color = {r=1, g=1, b=1}
          button.position = {-0.68, - 0.1, posy}
          button.click_function = 'goTopOff_' .. pl
          button.hover_color = {r=1, g=0.1, b=0.7}
          v.createButton(button)
        end
      end
    end

    for i, v in ipairs(tablezones[pl].getObjects()) do

      local posy = 1.00
      if v.getName() == 'Front Table' then
        v.clearButtons()
        if options.playerbuttons.allin then
          if #Player[pl].getHandObjects() ~= 0 then
            button.height = 10
            button.font_size = 40
            button.width = 200
            button.hover_color = {r=1, g=1, b=1, a=1}
            button.color = {r=1, g=1, b=1, a=0}
            button.font_color = {r=0, g=0, b=1}
            button.position = {0.7, 0, 2}
            button.label = 'Wait'
            button.click_function = 'doNothing'
            button.rotation = {0, 0, 0}
            local betzone_amt = getChipValues(betzones[pl], {})
            local tablezone_amt = getChipValues(tablezones[pl], {})
            if actionon == pl then
              button.rotation = {180, 0, 0}
              if betzone_amt <= currentbet and tablezone_amt + betzone_amt > currentbet then
                button.label = 'Call'
                button.tooltip = "Call the Bet"
                button.click_function = 'callAction'
                button.hover_color = {0/255, 141/255, 219/255, 1}
                button.color = {0/255, 141/255, 219/255, 1}
                button.font_color = {1,1,1}
              end
              if betzone_amt == currentbet and playerbets_hist[pl] == currentbet then
                button.label = 'Check'
                button.tooltip = "Check the Bet"
                button.click_function = 'checkAction'
                button.hover_color = {r=1, g=1, b=1, a=1}
                button.color = {r=1, g=1, b=1, a=1}
                button.font_color = {r=0, g=0, b=0}
              end
              if betzone_amt > currentbet then
                button.label = 'Bet'
                button.tooltip = "Bet the Chips Allowed"
                button.click_function = 'betAction'
                button.hover_color = Color.Gold
                button.color = Color.Gold
                button.font_color = {r=1, g=1, b=1}
              end
              if tablezone_amt == 0  then
                button.label = 'Confirm'
                button.tooltip = "Confirm All-In"
                button.click_function = 'confirmAction'
                button.hover_color = {r=1, g=1, b=1, a=1}
                button.color = {r=1, g=1, b=1, a=1}
                button.font_color = {r=0, g=0, b=0}
              end
              if tablezone_amt + betzone_amt <= currentbet and tablezone_amt ~= 0 then
                button.label = 'All in'
                button.tooltip = "All Your Money Here"
                button.click_function = 'goAllIn'
                button.hover_color = {r=1, g=0.3, b=0}
                button.color = {r=1, g=0.3, b=0}
                button.font_color = {r=1, g=1, b=1}
              end
            elseif theshowdown then
              button.rotation = {180, 0, 0}
              button.label = 'Show'
              button.tooltip = "Table your cards"
              button.click_function = 'showAction'
              button.hover_color = {0/255, 141/255, 219/255, 1}
              button.color = {0/255, 141/255, 219/255, 1}
              button.font_color = {1,1,1}
            end
            v.createButton(button)
          end
        end
        button.tooltip = nil
        if options.playerbuttons.foldhand then
          if inTable(players,pl) or inTable(allIns,pl) or #Player[pl].getHandObjects() ~= 0 then
            button.rotation = {180, 0, 0}
            button.height = 10
            button.font_size = 40
            button.width = 200
            button.label = theshowdown==true and 'Muck' or 'Fold'
            button.color = {r=0.7, g=0, b=0, a=1}
            button.hover_color = {r=0.7, g=0, b=0, a=1}
            button.font_color = {r=1, g=1, b=1}
            button.position = {-0.7,0, 2}
            button.click_function = 'foldPlayerHand'
            v.createButton(button)
          end
        end
        posy = posy - 0.15
        button.width = 2050
        button.height = 650
        button.scale = {1 / 10, 1 / 10, 1 / 10}
        if options.playerbuttons.betamount then
          button.label = 'Bet $'
          button.color = {r=1, g=1, b=1, a=1}
          button.font_color = {r=0, g=0, b=0}
          button.position = {-0.68, -0.1, posy}
          button.font_size = 280
          button.click_function = 'doNothing'
          v.createButton(button)
        end
        posy = posy - 0.15
        if options.playerbuttons.sortchips then
          button.rotation = {180, 0, 0}
          button.font_size = 580
          button.label = 'Sort'
          button.font_color = {r=0, g=0, b=0}
          button.color = {r=1, g=1, b=1, a=1}
          button.hover_color = {r=1, g=1, b=1, a=1}
          button.position = {-0.68, - 0.1, posy}
          button.click_function = 'sortPlayerChips'
          v.createButton(button)
        end
        posy = posy - 0.15
        if options.playerbuttons.convert then
          button.label = 'Convert'
          button.position = {-0.68, -0.1, posy}
          button.font_size = 580
          button.click_function = 'quickConvertPlayerChips10_5'
          v.createButton(button)
        end
        button.scale = {1,1,1}
        if options.playerbuttons.allin then
          button.tooltip = ""
          button.height = 10
          button.font_size = 40
          button.width = 220
          button.label = 'All In'
          button.color = {r=1, g=0.3, b=0}
          button.font_color = {r=1, g=1, b=1}
          button.position = {-0.68, - 0.1, -0.75}
          button.click_function = 'goAllIn'
          button.hover_color = {r=1, g=0.3, b=0}
          v.createButton(button)
        end
      end
    end
  end
end
function digestSave(save_data, bomb_value)
  local wealth = 0
  local tF = save_data['ContainedObjects'] or {}
  local bomb_value = bomb_value or (options.banking.buyinValue * options.banking.loanPct/100)
  for i=1,#tF do
      local t = tF[i]
      if t.Nickname:sub(1,1) == '$' then
        --log(t.Nickname .. "|" .. (t.Number or 1))
        wealth = wealth +  math.abs(t.Number or 1) * currencyToNumber(t.Nickname)
      elseif t.Description:match('^Bust Counter') then
        wealth = wealth - bomb_value * tonumber(string.match(t.LuaScriptState,'"value":(%d+)') or 0)
      end
  end
  return wealth
end

function digestSaves_StoredCr(savebag_obj, sortedData)
  local savebag_ = savebag_obj or savebag
  sortedData = sortedData or {}
  local bomb_value = options.banking.buyinValue * options.banking.loanPct/100
  for i, obj_data in next, savebag_.getData().ContainedObjects do
    if inTable({'Bag','Custom_Model_Bag'},obj_data.Name) then
      -- normalish bags
      sortedData[#sortedData+1] = {i, obj_data.Nickname, digestSave(obj_data,bomb_value)}
    end
  end
  table.sort(sortedData, |a,b| a[3] > b[3])
  return sortedData
end

function digestSaves_Stored(savebag_obj)
  local savebag_ = savebag_obj or savebag
  local sortedData = {}
  local bomb_value = options.banking.buyinValue * options.banking.loanPct/100
  if savebag_.getData().ContainedObjects then
    for i, obj_data in next, savebag_.getData().ContainedObjects do
      if inTable({'Bag','Custom_Model_Bag'},obj_data.Name) then
        -- normalish bags
        sortedData[#sortedData+1] = {i, obj_data.Nickname, digestSave(obj_data,bomb_value)}
      end
    end
    table.sort(sortedData, |a,b| a[3] > b[3])
  end
  return sortedData
end
function digestSaves_Players()
  local sortedData = {}
  for plc, obj in next, saves do
    if obj~=nil then
      local chips = {}
      sortedData[#sortedData+1] = {#sortedData+1, ({steamProps(plc)})[2], getChipValues(tablezones[plc],chips)+getChipValues(backtablezones[plc],chips)+digestSave(obj.getData(),bomb_value)}
    end
  end
  table.sort(sortedData, |a,b| a[3] > b[3])
  return sortedData
end
function digestAllSaves(savebag_obj)
  local savebag_ = savebag_obj or savebag
  local sortedData = {}
  local bomb_value = options.banking.buyinValue * options.banking.loanPct/100
  local cachedTable = {'Bag','Custom_Model_Bag'}
  for i, obj_data in next, savebag_.getData().ContainedObjects do
    if inTable(cachedTable,obj_data.Name) then
      -- normalish bags
      sortedData[#sortedData+1] = {i, obj_data.Nickname, digestSave(obj_data,bomb_value)}
    end
  end
  for plc, obj in next, saves do
    if obj~=nil then
      local chips = {}
      sortedData[#sortedData+1] = {#sortedData+1, ({steamProps(plc)})[2], getChipValues(tablezones[plc],chips)+getChipValues(backtablezones[plc],chips)+digestSave(obj.getData(),bomb_value)}
    end
  end
  table.sort(sortedData, |a,b| a[3] > b[3])
  for i,v in next, sortedData do sortedData[i][1] = i end
  return sortedData
end
function exportToUILeaderBoard(tbls,rankFlg)
  for j, clc in next, getSeatedPlayers() do
    UILeaderBoards[clc].setSlot(0, {'<color="#ccffcc">Rank</color>','<color="#ccffcc">Name</color>','<color="#ccffcc">Total $</color>'})
  end
  local function colorWrap(str,color_in)
    return ('<color="#%s">%s</color>'):format(Color[color_in]:toHex(),str)
  end
  for i, row in next, tbls do
    if i > 10 then break end
    local frow = {rankFlg and i or row[1], row[2], math.log(row[3]+1,10)>5 and ('$' .. abbreviated_value(row[3])) or ('$' .. comma_value(row[3]))}
    for j, clc in next, dGetSeatedPlayers() do
      if (row[2]==({steamProps(clc)})[2]) then
        frow = {colorWrap(frow[1],clc),colorWrap(frow[2],clc),colorWrap(frow[3],clc)}
      end
    end
    for j, clc in next, getSeatedPlayers() do
      UILeaderBoards[clc].setSlot(i, frow)
    end
  end
end
function textExportDigest(tbl)
  local output = {}
  for i, entry in next, tbl do
    output[#output+1] = ("%4d \t%-32s \t%s"):format(i,entry[2],comma_value(entry[3]))
  end
  log(table.concat(output,'\n'))
end
function h_textExportDigest(pl,id,value)
  if not pl.admin then return end
  --saveWealth['stored'] = digestSaves_Stored(savebag)
  --saveWealth['player'] = digestSaves_Players()
  --saveWealth['all'] = deepcopy(saveWealth['stored'])
  --playerIndices = insertSort(saveWealth['all'],saveWealth['player'])
  textExportDigest(digestAllSaves(savebag))
end
for i, fxn_color in next, colors do
  _G["goTopOff_" .. fxn_color] = function(ob, pl)
    --get amount in tablezones[pl]
    --if amount < maxbuyin then then
    --get available
    --remove/spawn : (maxbuyin-amount <= available and maxbuyin-amount) or available
    topOffPlayerChips = true
    for i,color in next, players do
      if fxn_color==color then
          Player[pl].broadcast(("[%s]You[-] cannot top off while in play"):format(Color[fxn_color]:toHex()),"Yellow")
          topOffPlayerChips = false
          return 1
      end
    end
    local bag = saves[fxn_color]
    Wait.frames(function()
      if bag == nil then
        Player[pl].broadcast(("[%s]You[-] should Load your savebag before attempting to top off"):format(Color[fxn_color]:toHex()),"Yellow")
        topOffPlayerChips = false
        return 1
      end
      local p = tablezones[fxn_color].getPosition()
      local r = tablezones[fxn_color].getRotation()
      local xoffset = 1.2
      local zoffset = 1
      local x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      local z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      local y = p.y - 10

      local pos = {x, y, z}
      pos.x = x
      pos.y = y
      pos.z = z

      local wealth = getChipValues(tablezones[fxn_color],{})
      local exchangeAmount
      local reconstructChips = false
      local bagPosition_chips = bag.getBoundsNormalized().center + Vector(0,bag.getBoundsNormalized().size.y/2,0)
      if wealth < options.banking.buyinValue then
        banks[fxn_color].credit = 0
        local tF = bag.getData()['ContainedObjects'] or {}
        for i=1,#tF do
            local t = tF[i]
            if t.Nickname:sub(1,1) == '$' then
                banks[fxn_color].credit = banks[fxn_color].credit +  math.abs(t.Number or 1) * currencyToNumber(t.Nickname)
            end
        end
        exchangeAmount = (options.banking.buyinValue - wealth <= banks[fxn_color].credit and (options.banking.buyinValue - wealth)) or banks[fxn_color].credit
        spawnChips(exchangeAmount,pos,bag.getRotation())
        reconstructChips = true
        baggy = bag.getObjects()
        for i, t in ipairs(baggy) do
            if t.name:sub(1, 1) == '$' then
                t.position = reconstructChips and bag.getPosition()-Vector(0,1+i,5) or pos
                t.callback_function = function(obj)
                    if reconstructChips then
                        obj.destruct()
                    end
                    if (os.time() - lastCollectTime) < 1 then
                        return 1
                    else
                        sortPlayerChips(_, fxn_color)
                        sortPlayerChips(_, fxn_color)
                        lastCollectTime = os.time()
                    end
                end
                bag.takeObject(t)
            end
        end
        if reconstructChips then
            spawnChips(banks[fxn_color].credit - exchangeAmount,
            bagPosition_chips
            + Vector(0,1,0), bag.getRotation(), nil, true)
        end
      else
        Player[pl].broadcast(("[%s]You're[-] already at or above Max Buy In!"):format(Color[fxn_color]:toHex()),"Yellow")
      end
      topOffPlayerChips = false
    end, 10, 0)
    Wait.frames(function() sortPlayerChips(_,fxn_color) topOffPlayerChips = false end, 30)
  end
end


--[[ deal function: determines whether to deal players' hands, flop, turn, or river --]]

local GameModeCardCounts = 52
function deckIsValid(num,msg)
  local cond = (deck~=nil)
  if num~=nil then
    cond = cond and (deck~=nil and deck.getQuantity()==num)
    if (not cond) and (msg==true) then broadcastToAll(("Failure: Expected %d card deck"):format(num), "Red") end
  end
  return cond
end

function initDeck(num,msgflag)
  if msgflag==nil then msgflag = false end
  if not deckIsValid(num) then
    -- try and assign the deck that's there
    newDeck(nil,nil,not msgflag)
    if deckIsValid(num) then
      printToAll("New deck assigned.")
    end
  end
  if not deckIsValid(num,true) and msgflag==true then
    for i, v in ipairs (dGetSeatedPlayers()) do
      if Player[v].admin then
        broadcastToColor('Deck error. Please place an appropriate deck in the White Deck square.', v, {1, 0.3, 0.3})
      end
    end
  end
  return deckIsValid(num)
end

function deal(ob, pl)
  -- print('ob: ' .. tostring(ob) .. ' - pl: ' .. tostring(pl))
  if pl~=nil and not Player[pl].admin then return 1 end
  allInHappened = false
  allIns = allIns or {}
  allInCount = #allIns
  folded_colors = {}
  foldeds = {}
  foldedCount = 0
  sidepotcalculated = false;

  if boardobject == nil then
    print ('The board object has been lost. Please click the \'Reset Objects\' button on the options panel to reassign.')
    --return 1
    checkAndRespawnObjects()
  end

  if muck == nil then
    print ('The muck object has been lost. Please click the \'Reset Objects\' button on the options panel to reassign.')
    --return 1
    checkAndRespawnObjects()
  end

  if pottext == nil then
    print ('The pot text has been deleted. Please click the \'Reset Objects\' button on the options panel to respawn.')
    --return 1
    checkAndRespawnObjects()
  end

  if currentbettext == nil then
    print ('The current bet text has been deleted. Please click the \'Reset Objects\' button on the options panel to respawn.')
    --return 1
    checkAndRespawnObjects()
  end

  if actiontext == nil then
    print ('The action text has been deleted. Please click the \'Reset Objects\' button on the options panel to respawn.')
    --return 1
    checkAndRespawnObjects()
  end

  for i, v in ipairs(colors) do
    if bettext[v] == nil then
      print ('bettext of color ' .. v .. ' has been deleted')
      checkAndRespawnObjects()
    end
    if foldtoken[v] == nil then
      print ('foldtoken of color ' .. v .. ' has been deleted')
      checkAndRespawnObjects()
    end
    if sidepottext[v] == nil then
      print ('sidepottext of color ' .. v .. ' has been deleted')
      checkAndRespawnObjects()
    end
    if tablezonetext[v] == nil then
      print ('tablezonetext of color ' .. v .. ' has been deleted')
      checkAndRespawnObjects()
    end
  end

  if not dealing then
    local num = ((not holedealt) and 52) or nil
    noCheckRounds = false
    if not initDeck(num,true) then return 1 end
    if shuffleFirstDeal and options.shuffleFirstDeal then
      shuffleFirstDeal = false
      shuffled=false
      deckTRNGShuffle(deck)
    end
    handsshown = {}
    if not holedealt then
      if quickConvertPlayerChips then broadcastToAdmins('Wait for convert to finish and try again..','Yellow') return 1 end
      if topOffPlayerChips then broadcastToAdmins('Wait for topOff to finish and try again..','Yellow') return 1 end
      players = getOrderedListOfPlayers(pl)
      -- order UI in terms of actions
      slotColor = {}

      local slotPositions = getSlotPositions(#players)
      if UITableBar.numSlots ~= #players then UITableBar.setup(#players) end
      for i,v in next, players do
        local tbl = {}
        tbl.name = Player[v].steam_name or 'Debug-AI'
        ---tbl.stack = ("$%d($%d)"):format(getChipValues(tablezones[v], {}), banks[v].credit)
        tbl.stack = ("$%s"):format(comma_value(getChipValues(tablezones[v], {})))
        tbl.action = slotPositions[i]
        tbl.color = v
        slotColor[v] = i
        UITableBar.setSlot(i, tbl)
      end
      Wait.condition(function()
        shuffled=false
        initDeck(num,true)
        hole(pl)
        previousbet = smallBlindValue
        currentbet = bigBlindValue
        previousraise = bigBlindValue - smallBlindValue
        thehole = true
        countHandsDealt = countHandsDealt ~= nil and countHandsDealt+1 or 1
        log("Hands Dealt: " .. countHandsDealt)
        log("Session Length: " .. secondsToHHMMSS(os.difftime(os.time(),runtimeHandsDealt)))
        log("Hands / Hour: " .. countHandsDealt/(os.difftime(os.time(),runtimeHandsDealt)/3600.0))

      end, function() return shuffled==true end)
    else
      local cards = boardzone.getObjects()
      local x = 0
      for i, v in ipairs (cards) do
        if v.type == "Card" then
          x = x + 1
        end
      end
      for i,v in next, players do
        local tbl = {}
        ---tbl.stack = ("$%d($%d)"):format(getChipValues(tablezones[v], {}), banks[v].credit)
        tbl.stack = ("$%d"):format(getChipValues(tablezones[v], {}))
        tbl.color = v
        UITableBar.setSlot(slotColor[v], tbl)
      end
      previousbet = 0
      previousraise = 0
      startOfStage = true
      if x == 0 then
        flop ()
        thehole = false
        theflop = true
      elseif x == 3 then
        turn ()
        theflop = false
        theturn = true
      elseif x == 4 then
        river ()
        theturn = false
        theriver = true
      elseif x == 5 then
        theriver = false
        theshowdown = true
        hideActionText()
        actionon = nil
        createPlayerButtons()
        createPassiveButtons()
        showdown ()
        if options.forceshowdown then
          forceShowDown()
        end
      else
        broadcastToColor("[ff0000]Error:[ffffff] Invalid board", pl, {1, 1, 1})
      end
    end
  end

end

function showdown()
  local function condTable_all(tbl)
    for i,v in next, tbl do if v==false then return false end end
    return true
  end
  local timelimit = 10
  function showdownCo()
    --if Automuck
    --else
    local v_allIns = #allIns
    local v_players = #players
    broadcastToAll('Showtime! Muck or Autoshow', {1, 1, 1})

    if v_allIns==0 and v_players >= 2 then
      lastAggressor = lastAggressor or players[1] --pokerTDA rules for non-allins
      printToAll('Last Aggressor: ' .. colorSteamName(lastAggressor))
      forceShowCo({lastAggressor,},true)
    end
    if (v_allIns > 1) or (v_allIns==1 and v_players>0) then
      if options.showrules.pokertda or options.showrules.allins_callers then
        forceShowCo(flattenTbls({allIns,players}),true)
      elseif options.showrules.allins then
        forceShowCo(allIns,true)
      end
    end

    --wait 1 second
    local t0 = os.time()
    for i=0,timelimit do
      while (os.difftime(os.time(),t0) <= i) do
        coroutine.yield(0)
      end
      handsshown = {}
      for i,v in next, flattenTbls({allIns,players}) do handsshown[v] = (#revealedcards[v]>=2) end
      if condTable_all(handsshown) then break end
      broadcastToAll(timelimit-i .. ' Seconds')
    end
    broadcastToAll('Waiting Period Over')
    log(handsshown)

    if not (v_allIns==1 and v_players==0) then
    -- automuck or autoshow remainders
      forceShowCo(flattenTbls({allIns,players}))

      -- spit out hand evaluation
      evaluateRankedHands()
      -- chain into hand rewards
      --|-- evaluate and reward all sidepot bags
    end
    return 1
  end
  startLuaCoroutine(nil,"showdownCo")
end
function evaluateRankedHands(tbl_plc)
  if type(tbl_plc)=='string' then tbl_plc = {tbl_plc,} end
  if tbl_plc==nil then
    tbl_plc = {}
    for i,v in next, colors do
      if handsshown[v] then
        tbl_plc[#tbl_plc+1] = v
      end
    end
  end
  local out_str = {}
  local out_tbl = {'\n[000000]==================\nRanked Hands:\n==================[-]'}
  for i, player in next, tbl_plc do
    local msg = ("%s [000000]shows[-] %s : %s"):format(
      colorSteamName(player),
      colorString(playerhands[player].category_half,player),
      (table.concat(playerhands[player].hand_cards,' ')))
    out_str[#out_str+1] = {msg,playerhands[player].ranking}
  end
  table.sort(out_str,|a,b| a[2] < b[2])
  for i,v in next, out_str do
    out_tbl[i+1] = ("%d %s"):format(v[2],v[1])
  end
  printToAll(table.concat(out_tbl,'\n'))
  return out_str
end
function forceShowCo(tbl_plc,flg_print)
  if type(tbl_plc)=='string' then tbl_plc = {tbl_plc,} end
  assert(tbl_plc~=nil,'forceShow: tbl_plc: invalid argument')
  for i, v in ipairs(tbl_plc) do
    tableFromHand(v)
    if #holecards[v] == 0 and #revealedcards[v] >= 2 then
      handsshown[v] = true
      evaluateHand(v,flg_print)
    end
  end
  return true
end
function tableFromHand(v)
  --v as player color
  if #Player[v].getHandObjects() > 0 then
    local cards = Player[v].getHandObjects()
    local p = betzones[v].getPosition()
    local r = betzones[v].getRotation()
    local f_xoffset = function(i)
      local dx = g_dx or 0.225
      local v_out = dx * (i - #cards/2 - ((#cards+1)%2)/2)
      return v_out
    end
    local zoffset = 0
    for j, w in ipairs(cards) do
      local xoffset = f_xoffset(j)
      p = betzones[v].positionToWorld(Vector(xoffset,0,zoffset))
      --p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      --p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      p.y = 4
      w.setPosition(p)
      w.setRotationSmooth(r, false, false)
      if not inTable(revealedcards[v],w.guid) then table.insert(revealedcards[v], w.guid) end
      table.remove(holecards[v],indexTable(holecards[v],w.guid))
    end
  end
end
function forceShowDown()
  for i, v in ipairs(colors) do
    tableFromHand(v)
    Wait.frames(function()
      if #holecards[v] == 0 and #revealedcards[v] >= 2 then
        handsshown[v] = true
        evaluateHand(v)
      end
    end, 1)
  end
end

--[[ This function returns an ordered list of seated players who do not have an afk button or busted token.
    The first entry will be the player to the dealers left, and the dealer will be the last entry.
    If the dealer button is not found, returns nil. --]]
function getOrderedListOfPlayers(pl)

  local dealer = nil
  local afk = {} -- list of afk players
  local busted = {} -- list of busted players determined by busted tokens in their bet zones (when a player busts out, I usually make them sit out for a few hands before giving them more money)
  local objects = {} -- list of objects found in the dealerzones
  local dealerafk = false
  local bustedbombs = {}

  --First, look for the dealer button.
  --Also, make list of afk players.
  for i, v in ipairs (colors) do
    objects = betzones[v].getObjects()
    for j, w in ipairs (objects) do
      if w.getName() == "Dealer" then
        dealer = v
      elseif w.getName() == "suffering" or w.getName() == "Busted" then
        if not objectExistsInList (busted, v) then
          busted[#busted + 1] = v
          bustedbombs[#bustedbombs + 1] = w
        end
      elseif w.getName() == 'AFK' then
        afk[#afk + 1] = v
      end
    end
    if getChipValues(tablezones[v],{}) == 0 then
      if busted[#busted]~=v then busted[#busted+1] = v end
    end
  end

  -- return nil if dealer button not found
  if not dealer then
    broadcastToAdmins ('[ff0000]Error: [ffffff]Dealer button not found.', {1, 1, 1})
    return nil
  end

  for i, v in ipairs(bustedbombs) do
    v.destruct()
  end

  local seatedplayers = dGetSeatedPlayers() -- list of seated players, in some random order

  -- make sure dealer button is in front of a seated player
--   if inTable(busted,dealer) then
--     broadcastToAdmins('[ff0000]Error:[ffffff] Dealer button not in front of a monied player.')
--     return nil
--   end
  for i, v in ipairs (seatedplayers) do
    if v == dealer then
      --print ('Dealer: '..dealer)
      break
    end

    if i == #seatedplayers then
      broadcastToAdmins('[ff0000]Error:[ffffff] Dealer button not in front of a seated player.', {1, 1, 1})
      return nil
    end
  end


  local playersx = {}

  --sort the seatedplayers into playersx list
  for i, v in ipairs (colors) do
    for j, w in ipairs (seatedplayers) do
      if v == w then
        playersx[#playersx + 1] = w
        break
      end
    end
  end



  --rotate the list so the dealer is the last entry
  while playersx[#playersx] ~= dealer do
    playersx[#playersx + 1] = playersx[1] -- copy first entry to end of table
    table.remove(playersx, 1) -- then remove first entry
  end

  -- remove busted players from the table
  for i, v in ipairs (busted) do
    for j, w in ipairs (playersx) do
      if w == v then
        table.remove(playersx, j)
      end
    end
  end

  sortedSeatedPlayers = deepcopy(playersx)

  -- lastly, remove afk players from the table
  local actionoffset = 0
  for i, v in ipairs(afk) do
    for j, w in ipairs (playersx) do
      if w == v then
        if actionoffset == 0 and j <= 2 then
          actionoffset = actionoffset + 1
        elseif actionoffset == 1 and j == 1 then
          actionoffset = actionoffset + 1
        end
        --print ('Removing afk player: '..playersx[j])
        table.remove(playersx, j)
        if w == dealer then
          dealerafk = true
        end
        break
      end
    end
  end

  if options.blindsskipafk then
    actionoffset = 0
  end

  for i, v in ipairs (playersx) do
    playerbets[v] = 0
  end

  if actionoffset < 2 then
    actionon = playersx[2 - actionoffset]
  else
    actionon = playersx[#playersx]
  end

  -- set action on the dealer in a heads-up match
  if #playersx == 2 and not dealerafk then
    actionon = playersx[1]
  end
    if #playersx == 1 then
        actionon = playersx[1]
    end
  if actionon==nil then broadcastToAll("Ensure the button is on a seated player with available funds!","Red") end
  assert(actionon~=nil,"Ensure the button is on a seated player with available funds!")
  --return the final table
  return playersx

end



--[[ deal hole --]]

function hole (pl)
  tlog('---entering hole--')
  if not players then
    return 1 -- abort if dealer button is not in front of a seat
  else
    dealing = true
    handinprogress = true
    resetBets()
    resetSpeedDials()
    if options.autoblinds then
      payBlinds(players)
    end
    hideActionText()
    Wait.frames(function()
      calculatePots()
      processAllIns()
      startLuaCoroutine(Global, 'holeCoroutine')
    end, 2)
  end

end

function setBlinds()
  local objectsSmall = blindszones[1]
  local objectsBig = blindszones[2]
  smallBlindValue = 0
  bigBlindValue = 0
  smallBlindValue = getChipValues(objectsSmall, {})
  bigBlindValue = getChipValues(objectsBig, {})
  options.banking.buyinValue = getChipValues(getObjectFromGUID(buyinGUID),{})
  options.banking.buyinValue = options.banking.buyinValue==0 and math.huge or options.banking.buyinValue
  if options.autonotes then
    autoNotes()
  end
  smallBlindToken.setValue('Small Blind: $'..smallBlindValue)
  bigBlindToken.setValue('Big Blind: $'..bigBlindValue)
end

function autoNotes(ob, pl)
  tlog('start: autoNotes')
  notes = getNotebookTabs()
  rulesnotes = {}
  blindnotes = {}
  addendumnotes = {}
  for i, v in ipairs(notes) do
    if v.title == 'Server Rules' then
      rulesnotes = v
    end
    if v.title == 'Server Blinds' then
      blindnotes = v
    end
    if v.title == 'Addendum' then
      addendumnotes = v
    end
  end
  for _k,k in next, {'preflop','postflop'} do
    for _j,j in next, {'minraise','maxbet'} do
      for l,fffrec in next, options.betoptions[k][j] do
        if fffrec.isOn then _G[('cur_%s_%s'):format(k,j)] = fffrec end
      end
      --log(_G[('cur_%s_%s'):format(k,j)],('cur_%s_%s'):format(k,j))
    end
  end
  if blindnotes.body ~= nil and rulesnotes.body ~= nil then
    blindnotes.body = blindnotes.body:gsub("SMALL_BLIND", smallBlindValue)
    blindnotes.body = blindnotes.body:gsub("BIG_BLIND", bigBlindValue)
    blindnotes.body = blindnotes.body:gsub("BUYIN", options.banking.buyinValue<math.huge and format_int(options.banking.buyinValue) or 'Unlimited')
    rulesnotes.body = rulesnotes.body:gsub("$MIN_BET", "$"..bigBlindValue)
    -- placesholders
    for i,v in next, options.betoptions['preflop'] do if v.isOn==true then preflopOption = i end end
    for i,v in next, options.betoptions['postflop'] do if v.isOn==true then postflopOption = i end end
    rulesnotes.body = rulesnotes.body:gsub("$PREFLOP_MAX_BET",cur_preflop_maxbet and cur_preflop_maxbet:output() or "UNDEF")
    rulesnotes.body = rulesnotes.body:gsub("$PREFLOP_MIN_RAISE",cur_preflop_minraise and cur_preflop_minraise:output() or "UNDEF")
    rulesnotes.body = rulesnotes.body:gsub("$POSTFLOP_MAX_BET",cur_postflop_maxbet and cur_postflop_maxbet:output() or "UNDEF")
    rulesnotes.body = rulesnotes.body:gsub("$POSTFLOP_MIN_RAISE",cur_postflop_minraise and cur_postflop_minraise:output() or "UNDEF")

    tbl_concat = {blindnotes.body or '', '\n', rulesnotes.body or '', '\n', addendumnotes.body or '', '\n\n', welcomeMessage}
    setNotes(table.concat(tbl_concat))
  else
    printError('Restore System Notes to use Auto Notes: Options > Reset Syst. Notes')
    toggleAutoNotes(_, pl)
  end
  tlog('end: autoNotes')
end

function payBlinds(players_)
  tlog('---entering payBlinds')
  if #players == 2 then
    blindsplayers = {players_[2], players_[1]}
  else
    if options.blindsskipafk then
      blindsplayers = {players_[1], players_[2]}
    else
      blindsplayers = {sortedSeatedPlayers[1], sortedSeatedPlayers[2]}
    end
  end
  blindsvalues = {smallBlindValue, bigBlindValue}
  for i, v in ipairs(blindsplayers) do
    local chips = {}
    amount = getChipValues(betzones[v], chips)
    -- Skip auto blind if player already put money on betzone
    if amount == nil or amount ~= blindsvalues[i] then
      callCurrentBlinds(blindsvalues[i], blindsplayers[i])
    end
    playerbets_hist[blindsplayers[i]] = blindsvalues[i]
  end
  new_raise = math.abs(blindsvalues[2]-blindsvalues[1])
end


function holeCoroutine()

  local deckpos = deck.getPosition()
  local cards = 0

  if options.gamemode == 'fivestud' or onecard then
    cards = 1
  elseif options.gamemode == 'texas' or options.gamemode == 'sevenstud' then
    cards = 2
  elseif options.gamemode == 'pineapple' then
    cards = 3
  elseif options.gamemode == 'omaha' then
    cards = 4
  elseif options.gamemode == 'fivedraw' then
    cards = 5
  end

  deck.setPosition({ - 0.05, 1.4, - 1.97}) -- set the deck to the center of the table so dealt cards don't get intercepted by unintended hands
  coroutine.yield(0)
  for i = 1, cards do
    for i, v in ipairs (players) do
      if DEBUG_LEVEL>5 or Player[v].seated then
        local t = os.clock()
        local card = deck.takeObject({
            position = handzones[v].getPosition(),
            smooth = true,
            callback_function = function(obj) obj.setRotation(handzones[v].getRotation()+Vector(180,0,0)) end,
        })
        table.insert(dealt_cards,card.getGUID())
        if not options.uxoptions.facedowncards then
          Wait.condition(function() card.flip() end, || not card.isSmoothMoving())
        end
        while os.clock() < (t + options.dealdelay1) do
          coroutine.yield(0)
        end
      end
    end
  end
  coroutine.yield(0)
  deck.setPosition(deckpos)
  coroutine.yield(0)

  --[[ This loop exists to delay the call of action()
        I was having problems with a player (the dealer) being folded due to the cards not reaching the hand
        before the function was called. --]]
  t = os.clock()
  while os.clock() < (t + 1) do
    coroutine.yield(0)
  end
  getPlayersHoleCards()
  for i,v in next, players do
    if Player[v].seated then
      printToColor(("Your cards: %s"):format(cardsToString(holecards[v])),v,"Yellow")
    end
  end
  if onecard then
    onecard = false
    dealing = false
    if not handinprogress then
      players = {}
    end
    return 1
  end

  holedealt = true
  dealing = false

  action()
  removePlayerFromChecks(blindsplayers[2])
  for i, v in ipairs (players) do
    local cards = Player[v].getHandObjects()
    for j, w in ipairs (cards) do
      if w.type == 'Card' then
        w.setColorTint({1, 1, cardtint})
        cardtint = cardtint - 0.01
      end
    end
  end
  return 1

end


--[[ deal flop --]]

function flop ()

  dealing = true
  actionon = nil
  resetBets()
  resetSpeedDials()
  hideActionText()

  if options.uxoptions.stagebroadcast then
    broadcastToAll('Flop', {0, 1, 1})
  end

  startLuaCoroutine(Global, 'flopCoroutine')

end

function flopCoroutine ()
  local params = {}
  params.position = muck.getPosition() + Vector(0,0.5,0)
  params.rotation = muck.getRotation() + Vector(180,0,0)
  if muckcards==nil then muckcards = {} end
  muckcards[#muckcards+1] = deck.takeObject(params).getGUID()

  if tablecards == nil then tablecards = {} end
  for i = 1, 3 do
    local t = os.clock()
    while os.clock () < t + options.dealdelay2 do
      coroutine.yield(0)
    end
    params.position = getCardPosition(i)
    params.rotation = boardobject.getRotation()
    local card = deck.takeObject(params)
    card.setColorTint({1, 1, cardtint})
    cardtint = cardtint - 0.01
    tablecards[#tablecards+1] = card.getGUID()
  end

  t = os.clock()
  while os.clock() < (t + 1) do
    coroutine.yield(0)
  end

  dealing = false
  clearPlayerchecks()

  delayedAction()
  return 1
end

--[[ deal turn --]]

function turn ()

  dealing = true
  actionon = nil
  resetBets()
  resetSpeedDials()
  calculatePots()
  hideActionText()

  if options.uxoptions.stagebroadcast then
    broadcastToAll('Turn', {0, 1, 1})
  end

  startLuaCoroutine(Global, 'turnCoroutine')

end

function turnCoroutine ()
  local params = {}
  params.position = muck.getPosition() + Vector(0,0.5,0)
  params.rotation = muck.getRotation() + Vector(180,0,0)
  muckcards[#muckcards+1] = deck.takeObject(params).getGUID()

  local t = os.clock()
  while os.clock() < (t + options.dealdelay2) do
    coroutine.yield(0)
  end

  params.position = getCardPosition(4)
  params.rotation = boardobject.getRotation()
  local card = deck.takeObject(params)
  card.setColorTint({1, 1, cardtint})
  cardtint = cardtint - 0.01
  tablecards[#tablecards+1] = card.getGUID()

  t = os.clock()
  while os.clock() < (t + 1) do
    coroutine.yield(0)
  end

  dealing = false
  clearPlayerchecks()

  delayedAction()
  return (1)
end

--[[ deal river --]]

function river ()

  dealing = true
  actionon = nil
  resetBets()
  resetSpeedDials()
  calculatePots()
  hideActionText()

  if options.uxoptions.stagebroadcast then
    broadcastToAll('River', {0, 1, 1})
  end

  startLuaCoroutine(Global, 'riverCoroutine')

end

function riverCoroutine ()
  local params = {}
  params.position = muck.getPosition() + Vector(0,0.5,0)
  params.rotation = muck.getRotation() + Vector(180,0,0)
  muckcards[#muckcards+1] = deck.takeObject(params).getGUID()

  local t = os.clock()
  while os.clock() < (t + options.dealdelay2) do
    coroutine.yield(0)
  end

  params.position = getCardPosition(5)
  params.rotation = boardobject.getRotation()
  local card = deck.takeObject(params)
  card.setColorTint({1, 1, cardtint})
  cardtint = cardtint - 0.01
  tablecards[#tablecards+1] = card.getGUID()

  t = os.clock()
  while os.clock() < (t + 1) do
    coroutine.yield(0)
  end

  dealing = false
  clearPlayerchecks()
  action()

  return (1)

end

--[[ returns the card position based on the position and rotation of the boardobject model--]]

function getCardPosition(n)
  local p = boardobject.getPosition()
  local r = boardobject.getRotation()
  local s = boardobject.getScale()
  n = 3 - n

  p.x = p.x - ((math.cos(math.rad(r.y)) * 2.75) * n) * s.x
  p.z = p.z + ((math.sin(math.rad(r.y)) * 2.75) * n) * s.z
  p.y = p.y + 0.5

  return p
end
--[[ looks for a deck of 52 cards in the specified scripting zone (I used the white player's bet zone) and makes it the new deck object --]]
function newDeck (ob, pl, silence)

  if pl~=nil and (not Player[pl].admin) then
    return deck
  end

  local obj = deckzone.getObjects()
  for i, v in ipairs (obj) do
    if v.type == "Deck" then
      if v.getQuantity() <= options.deckSize then
        deck = {
          interactable = false
        }
        deck = getObjectFromGUID(v.getGUID())
        return deck
      end
    end
  end
  if (not (silence==true)) then broadcastToAdmins("Valid deck not found. Please place a 52-card poker deck inside the white player's bet square try again.", {1, 0.3, 0.3}) end -- it only gets to this line if a deck isn't found in the above loop
  return nil
end
function makeShortDeck(lowcardrank)
  for i, v in next, deck.getObjects() do

  end
  return true
end
function getGameSaveBag()
  for i,v in next, gamesavezone.getObjects() do
    if v.type == "Bag" and not string.match(v.getDescription(),'%d%d%d%d%d%d%d%d+') then
      savebag = v
      return savebag
    end
  end
end
function checkDuplicates()
  local error = false
  local saves = {}
  if savebag == nil then
    getGameSaveBag()
    if savebag == nil then print("[ffff00]No Game Saves found, please place a bag in the Game Saves square to assign one") return 1 end
  end
  print("[ffff00]Checking for duplicates...")
  for i,v in ipairs (savebag.getObjects()) do
    table.insert(saves, v.description)
  end
  table.sort(saves)
  for i,v in ipairs (saves) do
    if saves[i-1] == saves[i] then
      error = true
      for a,s in ipairs (savebag.getObjects()) do
        if s.description == v then
          print("[ff0000]Duplicate found: " .. s.description .. " (" .. s.name .. ")")
        end
      end
    end
  end
  if error then print("[ffff00]Warning! Remove duplicates in Game Save!") return 1 end
  print("[00ff00]All good! A healthy Game Save!")
end


function newSavebag (ob, pl)
  if not Player[pl].admin then return 1 end

  local obj = gamesavezone.getObjects()
  for i, v in ipairs (obj) do
    if v.type == "Bag" then
      savebag = getObjectFromGUID(v.getGUID())
      print ("Game save registered (" .. #savebag.getObjects() .. ")")
      -- checkDuplicates()
      return 1
    end
  end
  broadcastToColor ("No Game Saves found. Please put a bag inside the Game Saves square try again.", pl, {1, 0.3, 0.3}) -- it only gets to this line if a deck isn't found in the above loop
end

function tableMap(tbl_result, tbl_data, fxn_map)
  tbl_result = tbl_result or {}
  assert(type(tbl_data)=='table','tableMap: invalid argument tbl_data')
  assert(type(fxn_map)=='function','tableMap: invalid argument fxn_map')
  for key, value in next, tbl_data do
    if value~=nil then
      fxn_map(tbl_result,key,value)
    end
  end
  return tbl_result
end

--[[ reset the deck and variables --]]
function initializePlayerItems()
  for i,v in next, colors do
    if Player[v].seated and (saves[v]==nil or bombs[v]==nil) then
      -- find by player name/color if seated
      -- look for an AI bag
      local objectRefs = {}
      objectRefs = tableMap(objectRefs, tablezones[v].getObjects(), function(tbl,key,value) tbl[value] = true end)
      objectRefs = tableMap(objectRefs, backtablezones[v].getObjects(), function(tbl,key,value) tbl[value] = true end)
      for obj in next, objectRefs do
        if obj.type == 'Bag' and obj.getDescription() == Player[v].steam_id then
          if saves[v]==nil then
            saves[v] = obj
          end
        end
        if obj.getVar('current_value')~=nil and obj.getDescription():match("Bust Counter:")~=nil then
          if bombs[v]==nil then
            bombs[v] = obj
          end
        end
        if saves[v]~=nil and bombs[v]~=nil then break end
      end
    end
  end
  return saves, bombs
end

function resetGame (ob, pl)
  clearPlayerchecks()
  dealing = false
  holedealt = false
  thehole = false
  theflop = false
  theturn = false
  theriver = false
  theshowdown = false
  thepostgame = false
  betpreflop = false
  if pl~=nil and not Player[pl].admin then return 1 end

  sidepotcalculated = false

  if deck == nil then
    broadcastToColor('No deck is currently assigned. Please assign a new deck and try again.', pl, {1, 0.3, 0.3})
    return 0
  end

  if (
    (pottext == nil)
    or (currentbettext == nil)
    or (playerpottext == nil)
    or (playercurrentbettext == nil)
    or (actiontext == nil)
  )
  then
    checkAndRespawnObjects()
  end

  mainpotchips = initializePot()
  afk = {}
  playerhands = {}
  dealing = true
  saves, bustbombs = initializePlayerItems()

  local seated = getOrderedListOfPlayers()
  if seated==nil then broadcastToAdmins("Does no one have money? Players aren't set up correctly.","Red") error("Does no one have money? Players aren't set up correctly.") end
  for i, v in ipairs (colors) do
    for j, w in ipairs (Player[v].getHandObjects()) do
      w.setRotation({180, 0, 0})
      w.setColorTint({1, 1, 1})
    end
    if seated == nil then return 1 end
    foldtoken[v].setColorTint({ r=0, g=0, b=0, a=0.8 })
    for x, y in ipairs(seated) do
      if y == v then
        foldtoken[v].setColorTint({ r=0, g=0, b=0, a=0 })
        newDealer = seated[x+1]~=nil and seated[x+1] or seated[1]
      end
    end
    if options.autobutton then
      for b, c in ipairs(betzones[v].getObjects()) do
        if (c.type == "Generic" or c.type=="Tile") and c.getName() == "Dealer" then
        if newDealer==nil then broadcastToAdmins("Dealer isn't set correctly - make sure its in front of a seated monied player","Red") error("Halting execution") end
          p = betzones[newDealer].getPosition()
          r = betzones[newDealer].getRotation()
          local xoffset = -3
          local zoffset = 3

          p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
          p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
          c.setPosition({p.x,1.7,p.z})
          c.setRotation({r.x,r.y+180,r.z})
        end
      end
    end
    bettext[v].setValue("$0")
    sidepottext[v].setValue(" ")
    if options.displayplayermoney then
      local chips = {}
      money = getChipValues(tablezones[v], chips)
      tablezonetext[v].setValue("$" .. format_int(money))
    end
  end
-- update UI Table Bar
  UITableBar.setup(#seated)
  for i,v in next, seated do
    updateBank(v)
  end
  local byValue = table.sort(deepcopy(seated),function(a,b) return getChipValues(tablezones[a], {}) > getChipValues(tablezones[b], {}) end)
  UITableBar.highlightOff() -- sets them all to nothing
  for i,v in next, byValue do
    local tbl = {}
    tbl.name = Player[v].steam_name or 'Debug-AI'
    tbl.stack = ("$%s ($%s)"):format(math.log(banks[v].stack+1,10)>5 and abbreviated_value(banks[v].stack) or comma_value(banks[v].stack), abbreviated_value(banks[v].wealth-banks[v].stack))
    --tbl.stack = ("$%d"):format(getChipValues(tablezones[v], {}))
    tbl.action = ''
    tbl.color = v
    UITableBar.setSlot(i, tbl)
    UITableBar.show(i)
  end
  cardtint = 1
  holedealt = false
  handinprogress = false
  players = {}
  sortedSeatedPlayers = {} -- includes AFK players, but not busted players
  actionon = nil

  currentbet = 0
  pot = 0
  pottext.setValue('Pot: $'.. tostring(pot))
  currentbettext.setValue('Current Bet: $'..tostring(currentbet))
  handsshown = {}
  playerbets = {}
  hideActionText()
  allIns = {}
  checkFoldPlayer = {}
  createPlayerButtons()
  if clock ~= nil then
    clock.destruct()
  end


  -- destroy Sidepotmarke
  for i, v in ipairs(getAllObjects()) do
    if v.getName() == "Sidepotmarker" then
      v.destruct()
    end
  end
  startLuaCoroutine(Global, 'resetGameCoroutine')

end

function resetMuck(zone)

  if not deck then
    return 1
  end

  local obj = zone.getObjects()
  -- deck.setPosition({ - 0.05, 1.4, - 1.97})
  local deck_pos = deck.getPosition()
  local deck_rot = deck.getRotation()

  deck_pos.y = deck_pos.y + 0.5

  for i, v in ipairs (obj) do
    if v.type == "Card" or v.type == "Deck"
    -- and v.getDescription() ~= nil then
    --   if v.getDescription() == "Spades"
    --   or v.getDescription() == "Hearts"
    --   or v.getDescription() == "Diamonds"
    --   or v.getDescription() == "Clubs"
      then
        if v ~= deck then
          v.setColorTint({1, 1, 1})
          v.setPosition(deck_pos)
          v.setRotation(deck_rot)
          deck_pos.y = deck_pos.y + 0.1
        end
      end
    -- end
  end

  for i, v in ipairs(colors) do
    for j, w in ipairs (Player[v].getHandObjects()) do
      if w.type == 'Card' then
        deck.putObject(w)
      end
    end
  end
  zone.destruct()
end

function resetGameCoroutine()
  --Author: RomanticFool
  --Date: 2020/12/13
  --I will cut you if you break it :-D
  --Searches out any missing cards in any container, deck or surface, or deck within container.
  local t = os.clock()
  local cardCount = 0
  -- if we don't get rid of holecards until later, we can use them as references to murder them in a targeted fashion.
  if revealedcards ~= nil and holecards ~= nil then
    for i,color in next, colors do
      for j,tbl in next, {revealedcards[color],holecards[color]} do
        for k,card_guid in next, tbl do
          local obj = getObjectFromGUID(card_guid)
          if obj~=nil then
            deck.putObject(obj)
          end
        end
      end
    end
    if muckcards ~= nil and tablecards ~= nil then
      for i,tbl in next, {muckcards,tablecards,dealt_cards} do
        for i,card_guid in next, tbl do
          local obj = getObjectFromGUID(card_guid)
          if obj~=nil then
            deck.putObject(obj)
          end
        end
      end
    end
    for k, card in next, boardzone.getObjects() do
      if card.type == 'Card' or card.type == 'Deck' then
        deck.putObject(card)
      end
    end
      for k, card in next, Physics.cast({
          origin=muck.getPosition(),
          direction=Vector(0,1,0),
          max_distance=1,
          type=1,
          debug=false})
       do
          if card.hit_object~=nil and (card.hit_object.type=='Deck' or card.hit_object.type=='Card') then
              deck.putObject(card.hit_object)
          end
      end

    cardsAccountedFor = {}
    for i,rec in next, deck.getObjects() do
      cardsAccountedFor[rec.guid] = true
    end

    cardsUnaccountedFor = {}
    for i,color in next, colors do
      for j,tbl in next, {revealedcards[color],holecards[color]} do
        for k,card_guid in next, tbl do
          if cardsAccountedFor[card_guid]==nil then
            cardsUnaccountedFor[card_guid]=true
            cardsAccountedFor[card_guid]=false
            cardCount = cardCount + 1
          end
        end
      end
    end
    if muckcards ~= nil and tablecards ~= nil then
      for i,tbl in next, {muckcards,tablecards,dealt_cards} do
        for i,card_guid in next, tbl do
          if cardsAccountedFor[card_guid]==nil then
            cardsUnaccountedFor[card_guid]=true
            cardsAccountedFor[card_guid]=false
            cardCount = cardCount + 1
          end
        end
      end
    end
    local function getShit(obj,subobj)
      for card_guid,cond in next, cardsUnaccountedFor do
        if cond==true then
          if subobj.GUID == card_guid then
            if obj.getQuantity()==0 then
              local lcard_guid = card_guid
              local pos = deck.getPosition()
              -- Change this under pain of death. - RomanticFool
              Wait.frames(function()
                local tbl_objs = deckzone.getObjects()
                for i,obj in next, tbl_objs do
                  if obj.type == 'Deck' then
                    deck = getObjectFromGUID(obj.guid)
                  end
                end
                Wait.condition(function()
                 deck.putObject(getObjectFromGUID(lcard_guid)) end,
                function() return deck~=nil end, 5,
                function()
                  getObjectFromGUID(lcard_guid).setPosition(pos+Vector(0,0.2,0))
                end) end, 2)
            else
              obj.takeObject({
                position          = deck.getPosition(),
                rotation          = deck.getRotation(),
                callback_function = nil,
                smooth            = false,
                flip              = false,
                guid              = card_guid,
              })
            end
            cardsUnaccountedFor[card_guid]=false
            cardsAccountedFor[card_guid]=true
          end
        end
      end
    end
    if cardCount > 0 then
      for i,obj in next, getAllObjects() do
        if (obj.type ~= "Infinite" and obj.getQuantity() > 0 and obj ~= deck) then
          local contained = obj.getData().ContainedObjects
          if contained ~= nil then
            for k=1,#contained do
              local subobj = contained[k]
              local breakout = false
              if subobj.Name == "Card" then
                getShit(obj,subobj)
              elseif subobj.Name == "Deck" then
                for j=1,#(subobj.ContainedObjects or {}) do
                  if j==1 then log(('descended into %s in %s'):format(subobj.Name,logString(obj))) end
                  for card_guid,cond in next, cardsUnaccountedFor do
                    if cond==true and subobj.ContainedObjects[j].GUID == card_guid then
                      log('Found one!')
                      breakout = true
                      break
                    end
                  end
                end
                if breakout then
                  obj.takeObject({
                    guid=subobj.GUID,
                    callback_function = function(ssobj)
                      local contained = ssobj.getData().ContainedObjects
                      if contained ~= nil then
                        for k=1,#contained do
                          local subobj = contained[k]
                          getShit(ssobj,subobj)
                        end
                      end
                    end,}
                    )
                end
              end
            end
          end
        end
      end
    end
  end

  for i=1,60 do coroutine.yield(0) end
  -- reset card guid trackers
  local check4good = false
  for guid,cond in next, cardsAccountedFor do
    if cond then
      for j, tbl_i in next, {muckcards,tablecards,dealt_cards} do
        local index = indexTable(tbl_i, guid)
        if index~=nil then table.remove(tbl_i, index) end
      end
      for color, guids in next, holecards do
        local index = indexTable(guids, guid)
        if index~=nil then table.remove(holecards[color],index) end
      end
      for color, guids in next, revealedcards do
        local index = indexTable(guids, guid)
        if index~=nil then table.remove(revealedcards[color],index) end
      end
    end
  end
  for guid,cond in next, cardsUnaccountedFor do
    check4good = check4good or cond
  end
  if check4good == true then
    broadcastToAll("Unaccounted cards even after extensive search","Yellow")
    Wait.time(function() broadcastToAll("... Is one of you a dirty cheater?","Yellow") end, 0.5)
    dealing = false
    return 1
  end

  --[[ Print an error and unassign deck if it doesn't have 52 cards after 3 seconds --]]
  while deck.getQuantity() < options.deckSize do
    if os.clock() > (t + 3) then
      for i, v in ipairs (dGetSeatedPlayers()) do
        if Player[v].admin then
          broadcastToColor('Error: Deck missing cards. Unassigned current deck. Please assign new deck', v, {1, 0.3, 0.3})
        end
      end
      dealing = false
      return 1
    end
    coroutine.yield(0)
  end

  --[[ Print an error and unassign deck if it has more than 52 cards --]]
  if deck.getQuantity() > options.deckSize then
    for i, v in ipairs (dGetSeatedPlayers()) do
      if Player[v].admin then

        broadcastToColor('Error: Too many cards in deck. Unassigned current deck. Please assign new deck.', v, {1, 0.3, 0.3})
      end
    end
    dealing = false
    return 1
  end

  muckcards = {}
  tablecards = {}
  dealt_cards = {}
  holecards = {['White'] = {}, ['Brown'] = {}, ['Red'] = {}, ['Orange'] = {}, ['Yellow'] = {}, ['Green'] = {}, ['Teal'] = {}, ['Blue'] = {}, ['Purple'] = {}, ['Pink'] = {}}
  revealedcards = {['White'] = {}, ['Brown'] = {}, ['Red'] = {}, ['Orange'] = {}, ['Yellow'] = {}, ['Green'] = {}, ['Teal'] = {}, ['Blue'] = {}, ['Purple'] = {}, ['Pink'] = {}}

  deckTRNGShuffle(deck)

  --kludge
  if options.uxoptions.leaderboard then
    exportToUILeaderBoard(digestAllSaves(savebag),true)
  else
    for plc, lboard in next, UILeaderBoards do
      Global.UI.hide(lboard.id)
    end
  end

  t = os.clock()
  while os.clock() < (t + 1) do
    coroutine.yield(0)
  end

  dealing = false


  return (1)

end

--[[ move all chips in bet zones into the main pot --]]

function collectBets(ob, pl)

  --[[ Only host and promoted players can click this button --]]
  if not Player[pl].admin then return 1 end

  sidepotcalculated = false
  --[[ Make sure the potobject exists before running function --]]
  if potobject == nil then
    checkAndRespawnObjects()
  end

  printstring = printstring..'collect'

  if clock ~= nil then
    clock.destruct()
  end
  if options.collectmethod == 'move' then
    startLuaCoroutine(Global, 'moveBetsToPot')
  elseif options.collectmethod == 'convert' then
    startLuaCoroutine(Global, 'convertBetsToPot')
  elseif options.collectmethod == 'hybrid' then
    if pot <= options.hybridthreshold then
      startLuaCoroutine(Global, 'moveBetsToPot')
    else
      startLuaCoroutine(Global, 'convertBetsToPot')
    end
  end
  --Wait.frames(function() calculatePots() end, 10)
end

function moveBetsToPot()

  local objects = {} -- table of all objects
  local stacks = {}
  local chips = {}
  local h = {}
  bets = getChipValues(potzones[1], chips)
  for i, v in pairs (betzones) do
    bets = bets + getChipValues(v, chips)
  end

  for i, v in ipairs (chips) do
    v.setColorTint({1, 1, 1})
  end

  moveChips(chips, potobject.getPosition(), potobject.getRotation())
  for i = 1, 5 do
    coroutine.yield(0)
  end
  calculatePots()
  return 1
end

function infMovePotToWinner(args)
  assert(args ~= nil, "args are neccessary!")
  log('infMove')
  group(potzones[1].getObjects())
  Wait.frames(function()
    local amount = 0
    for i,v in next, potzones[1].getObjects() do
      if v.type=='Chip' then
        v.translate(tablezones[args.player_color].getPosition()-potzones[1].getPosition() + Vector(0,10,0))
        amount = amount +(currencyToNumber(v.getName()) * math.abs(v.getQuantity()))
      end
    end
    broadcastToAll(('%s awarded $%s'):format(colorSteamName(args.player_color),comma_value(amount)))
    Wait.time(function() calculatePots() end, 2)
  end, 1)
end
function movePotToWinner(player_color, grouping)
  local lchips = {}
  local grouping = grouping~=nil and grouping or false
  if grouping then group(potzones[1].getObjects()) end
  if player_color == nil then log('Warning: player_color is nil. returning') return end
  local p = tablezones[player_color].getPosition()
  local r = tablezones[player_color].getRotation()
  Wait.frames(function()
    local objs = potzones[1].getObjects()
    for i, v in ipairs(objs) do
      if v.type == "Chip" then
        lchips[#lchips+1] = v
        v.setPositionSmooth(p, false, false)
        v.setRotation(r)
      end
    end
  end, 15)
end

function convertBetsToPot()
  if in_convertBetsToPot == true then return 1
  else in_convertBetsToPot = true
  end
  local chips = {}
  local bets = 0
  for i, v in pairs (betzones) do
    bets = bets + getChipValues(v, chips)
  end
  bets = bets + getChipValues(potzones[1], chips)
  log(bets)
  --[[ Destroy old chips --]]
  for i, v in ipairs (chips) do
    v.destruct()
  end
  --[[ Spawn new chips in pot --]]
  coroutine.yield(0)
  coroutine.yield(0)
  spawnChips(bets, potobject.getPosition()+Vector(0,0.5,0), potobject.getRotation(), options.convertstackheight)
  Wait.frames(function() in_convertBetsToPot = false end, 1)
  return 1
end

function objectExistsInList(list, object)
  if list ~= nil then
    for i, v in ipairs(list) do
      if v == object then
        return true
      end
    end
    return false
  end
  return false
end

function removePlayerFromChecks(pl)
    if checkForRound ~= nil then
      local index = indexTable(checkForRound,pl)
      if index~=nil then checkForRound[index] = nil end
    end
end

function addPlayerToChecks(pl)
  local isInList = false
  if checkForRound ~= nil or #checkForRound ~= 0 then
    isInList = inTable(checkForRound, pl)
    if isInList then return 1
    else
      checkForRound[#checkForRound+1] = pl
    end
    -- print("GOT HERE")
  end
end
function colorPrint(tbl)
  local tbl_out = {}
  for i, v in next, table.sort(deepcopy(tbl)) do
    tbl_out[#tbl_out+1] = ('%3s'):format(string.sub(v,1,3))
  end
  return table.concat(tbl_out,' ')
end

function checkRound()
  -- print(#checkForRound .. " = " .. #players)
  if options.autoaction and (noCheckRounds~=true) and checkForRound ~= nil then
    -- for i=1, #checkForRound do
    --   print(checkForRound[i])
    -- end
    tlog('allIns: ' .. colorPrint(allIns))
    tlog('folded_colors: ' .. colorPrint(folded_colors))
    tlog('players: ' .. colorPrint(players))
    local res_minSet = minSet(players, allIns, folded_colors)
    tlog('minSet: ' .. colorPrint(res_minSet))
    tlog('checkForRound: ' .. colorPrint(checkForRound))
    if #checkForRound == #res_minSet
      or (#players == 1 and not allInHappened and #folded_colors == #checkForRound)
      or (#players == 1 and startOfStage)
    then
      log('path1 w/ ' .. #players)
      if #players == 1 and #allIns == 0 then
        hideActionText()
        actionon = nil
        theshowdown = true
        createPlayerButtons()
        log('path1.1')
        noCheckRounds = true
        local theWinner = players[1]
        Wait.frames(function() collectBets(_, theAdminColor()) end, 30)
        Wait.frames(function() movePotToWinner(theWinner)
          if false then
            Wait.time(function() resetGame() end, 8)
            Wait.time(function() deal() end, 15)
          end
        end, 60)
      elseif #players == 1 and #allIns ~= 0 and not allInHappened then -- allIn was last stage or prior
        log('path1.4')
        Wait.time(function() deal(_, theAdminColor()) end, 3)
      else
        hideActionText()
        actionon = nil
        createPlayerButtons()
        if not allInHappened then
          log('path1.2')
          Wait.frames(function() collectBets(_, theAdminColor())
            Wait.frames(function() deal(_, theAdminColor()) end, 30) end, 30)
        else
          log('path1.3')
          Wait.frames(function() log('createSidepot.path1.3') createSidepot(_, theAdminColor())
            Wait.frames(function() deal(_, theAdminColor()) end, 30) end, 30)
        end
      end
      return true
    elseif #players == 0 and #handsshown == 0 then
      actionon = nil
      log('path2')
      hideActionText()
      createPlayerButtons()
      if not allInHappened then
        noCheckRounds = true
        theshowdown = true
        local theWinner = players[1]
        Wait.frames(function() collectBets(_, theAdminColor()) end, 30)
        Wait.frames(function() movePotToWinner(theWinner)
          createPlayerButtons()
          if false then
            Wait.time(function() resetGame() end, 8)
            Wait.time(function() deal() end, 15)
          end
        end, 60)
      else
        Wait.frames(function() log('createSidepot.path2') createSidepot(_, theAdminColor())
          local repetitions = (theshowdown and 1 or 0) + (theriver and 2 or 0) + (theturn and 3 or 0) + (theflop and 4 or 0) + (thehole and 5 or 0)
          for repetition = 1, repetitions do
            Wait.frames(function() deal(_, theAdminColor()) end, 60*repetition)
          end
        end, 30)
      end
      return true
    end
    return false
  end
  return false
end

function clearPlayerchecks()
  if checkForRound ~= nil or #checkForRound == 0 then
    checkForRound = {}
  end
  return 1
end

function spawn_callback(object_spawned, name)
  object_spawned.setName(name)
end

function nextPlayerAction(ob,pl)
  action(nil, theAdminColor())
end

function processAllIns(player_color)
  local set_players = deepcopy(players)
  if type(player_color) == 'table' then
    set_players = deepcopy(player_color)
  elseif type(player_color) == 'string' then
    set_players = {player_color}
  end
  --allIns
  for i,plc in next, set_players do
    log(plc .. "|" .. getChipValues(tablezones[plc], {}))
    if getChipValues(tablezones[plc], {}) == 0 then
      allInHappened = true
      if not inTable(allIns, plc) then allIns[#allIns + 1] = plc end
      local index_actionon = indexTable(players, plc)
      actionon = index_actionon>1 and players[index_actionon-1] or players[#players]
      table.remove(players, index_actionon)
    end
  end
  allInCount = #allIns
end

function getBetRange(player_color)
  local maxBet = 0
  local minRaise = 0
  local lcurrentbet = playerbets[player_color] - playerbets_hist[player_color]
  local lpot = pot
  local isDefault = false
  if thehole then
    maxBet   = cur_preflop_maxbet:bound(lpot, currentbet,new_raise)
    minRaise = math.max(cur_preflop_minraise:bound(lpot, currentbet, new_raise), bigBlindValue)
    if cur_preflop_maxbet.name == "Unlimited" and
    cur_preflop_minraise.name == "X * Pot + Y * Prev Bet + Z * Prev Raise" and cur_preflop_minraise.X==0 and cur_preflop_minraise.Y==2 and cur_preflop_minraise.Z==0
    then
      isDefault = true
    end
  elseif theflop or theturn or theriver then
    maxBet   = cur_postflop_maxbet:bound(lpot, currentbet, new_raise)
    minRaise = math.max(cur_postflop_minraise:bound(lpot, currentbet, new_raise), bigBlindValue)
    if cur_postflop_maxbet.name == "Unlimited" and
    cur_postflop_minraise.name == "X * Pot + Y * Prev Bet + Z * Prev Raise" and cur_postflop_minraise.X==0 and cur_postflop_minraise.Y==2 and cur_postflop_minraise.Z==0
    then
      isDefault = true
    end
  end
  log(('lpot: %s pot: %s currentbet: %d lcurrentbet: %d previousbet: %d'):format(lpot, pot, currentbet, lcurrentbet, previousbet))
  log(maxBet,'maxBet')
  log(minRaise,'minRaise')
  return maxBet, minRaise, playerbets[player_color], isDefault
end
function showAction(ob,plc)
  local player_color = (ob~=nil and ob.getDescription()) or plc
  forceShowCo({player_color,},true)
end
function betAction(ob,plc)
  calculatePots()
  local player_color = (ob~=nil and ob.getDescription()) or plc
  local maxBet, minRaise, lcurrentbet = getBetRange(actionon)

  if not (minRaise <= lcurrentbet and lcurrentbet <= maxBet) then
    if maxBet == math.huge then
      broadcastToAll(('Illegal bet! $%s < [%s]$%s[-] \n($%s is already pot-committed)'):format(minRaise,Color[actionon]:toHex(),lcurrentbet,playerbets_hist[player_color]),'Red')
    else
      broadcastToAll(('Illegal bet! $%s < [%s]$%s[-] < $%s \n($%s is already pot-committed)'):format(minRaise,Color[actionon]:toHex(),lcurrentbet,maxBet,playerbets_hist[player_color]),'Red')
    end
    if options.betoptionsEnforce then return 1 end
  end

  new_raise = lcurrentbet - currentbet
  if playerbets_hist[actionon]==0 then
    printToAllandLog(('%-32s %s $%s(+$%s) to $%s'):format(colorSteamName(actionon),'bets', lcurrentbet, new_raise, pot + lcurrentbet))
  else
    printToAllandLog(('%-32s %s $%s(+$%s) to $%s'):format(colorSteamName(actionon),'raises', lcurrentbet, new_raise, pot + lcurrentbet - playerbets_hist[actionon]))
  end
  log(previousbet,'previousbet')
  log(currentbet,'currentbet')
  previousbet = currentbet
  lastAggressor = actionon
  playerbets_hist[actionon] = lcurrentbet

  clearPlayerchecks()
  addPlayerToChecks(actionon)
  for plc_, val in next, checkCallAtPlayer do checkCallAtPlayer[plc_] = false end
  for plc_, val in next, checkPlayer do checkPlayer[plc_] = false end
  action(ob,plc)
end

function confirmAction(ob, plc)
  calculatePots()
  local player_color = (ob~=nil and ob.getDescription()) or plc
  local maxBet, minRaise, lcurrentbet = getBetRange(actionon)

  if not (lcurrentbet <= maxBet) then
    broadcastToAll(('Illegal All-In! $%s < $%s \n($%s is already pot-committed)'):format(lcurrentbet,maxBet,playerbets_hist[player_color]),'Red')
    if options.betoptionsEnforce then return 1 end
  end

  --allIns
  allInHappened = true
  if not inTable(allIns, actionon) then allIns[#allIns + 1] = actionon end
  allInCount = #allIns

  printstring = printstring..'allin'..actionon
  local verb = 'all-in calls'
  if lcurrentbet > previousbet and lcurrentbet > currentbet then
    new_raise = lcurrentbet - currentbet
    verb='shoves'
    previousbet = currentbet
    currentbet = lcurrentbet
    clearPlayerchecks()
  else

  end
  if playerbets_hist[actionon]==0 then
    printToAll(('%s %s @$%s to $%s'):format(colorSteamName(actionon),verb,lcurrentbet, pot + lcurrentbet))
  else
    printToAll(('%s %s @$%s(+$%s) to $%s'):format(colorSteamName(actionon),verb,lcurrentbet,lcurrentbet-playerbets_hist[actionon], pot + lcurrentbet))
  end
  playerbets_hist[actionon] = lcurrentbet

  local index_actionon = indexTable(players, player_color)
  actionon = index_actionon>1 and players[index_actionon-1] or players[#players]
  table.remove(players, index_actionon)
  addPlayerToChecks(player_color)

  log('confirmAction:' .. lcurrentbet .. "|" .. previousbet .. "|" .. currentbet)

  action(ob,theAdminColor()) -- action is already modified by the time it goes in here...
end

function callAction(ob, pl, rightclick)
  if rightclick then return 1 end
  if ob ~= nil then
    if Player[pl].admin then
      pl = ob.getDescription()
    elseif ob.getDescription() ~= pl then
      return 1
    end
  end

  callCurrentBet(ob,pl)
  --action is called as part of above routine
end

function checkAction(ob,plc)
  local player_color = (ob~=nil and ob.getDescription()) or plc
  -- if actionon == nil then print("its nil!") return 1 end
  if plc and not Player[plc].admin and plc ~= actionon then
    log("action: insufficient privileges")
    return 1
  end
  printToAll(('%s %s @$%s to $%s'):format(colorSteamName(player_color),'checks',currentbet, pot))
  addPlayerToChecks(actionon)
  action(ob,pl)
end

function prune_actionon(actionon, players)
  local index_actionon = indexTable(players, player_color)
  actionon = index_actionon>1 and players[index_actionon-1] or players[#players]
  table.remove(players, index_actionon)
  return actionon
end

function next_actionon(actionon, players)
  --figures out the appropriate actionon
  if not actionon then
    actionon = players[1]
  else
    for i, v in ipairs (players) do
      if actionon == v then
        actionon = players[i + 1]~=nil and players[i + 1] or players[1]
        break
      end
    end
  end
  return actionon
end

function fxnTemplate(fxn, msg)
  local t_out = {
    fxn = || false,
    msg = msg or 'Default',
  }
  t_out.fxn = assert(fxn, t_out.msg)
  return t_out
end

harness = {
  current = fxnTemplate(|| false),
  next = fxnTemplate(|| false),
  set_current = function(ob, pl, rightclick) return false end,
  set_next = function(ob, pl, rightclick) return false end,
}

function driver(ob, pl, rightclick)
  while harness.next_fxn(ob, pl, rightclick)==true do
  end
end

function passiveActions_checkPlayer(actionon, playerbet, currentbet)
  local retval = nil
  if options.playerbuttons.checkplayer and actionon and (checkPlayer[actionon]) then
    if playerbet >= currentbet then
      log('checkPlayer-'..actionon)
      retval = 'checkAction'
    else
      retval = 'doNothing1'
    end
    checkPlayer[actionon] = false
  end
  tlog('checkPlayer: retval: '.. (retval or 'nil'))
  return retval
end


function passiveActions_checkCallPlayer(actionon, playerbet, currentbet)
  local retval = nil
  if options.playerbuttons.checkcallplayer and actionon and (checkCallPlayer[actionon] or checkCallAtPlayer[actionon]) then
    if playerbet >= currentbet then
      log('checkCallPlayer-check-'..actionon)
      retval = 'checkAction'
    elseif getChipValues(tablezones[actionon], {}) >= currentbet then
      log('checkCallPlayer-call-'..actionon)
      retval = 'callAction'
    elseif getChipValues(tablezones[actionon], {}) < currentbet then
      broadcastToAll(("[%s]%s[-] will have to [FFFF00]ALL-IN[-] to call!"):format(Color[actionon]:toHex(), Player[actionon].steam_name or 'DEBUG_AI'),"Black")
      retval = 'doNothing1'
    else
      broadcastToAdmins(('Error: checkCallPlayer bet status makes no sense (%s) $%d vs $%d '):format(actionon, playerbet, currentbet))
      retval = 'doNothing2'
    end
    checkCallPlayer[actionon] = false
    checkCallAtPlayer[actionon] = false
  end
  tlog('checkCallPlayer: retval: '.. (retval or 'nil'))
  return retval
end


function passiveActions_checkFoldPlayer(actionon, playerbet, currentbet)
  local retval = nil
  if options.playerbuttons.checkfoldplayer and actionon and checkFoldPlayer[actionon] then
    if playerbet >= currentbet or currentbet == 0 then
      log('checkFoldPlayer-'..actionon)
      retval = 'checkAction'
    elseif currentbet > 0 then
      log('checkFoldPlayer-'..actionon)
      retval = 'foldPlayerHand'
      --foldPlayerHand needs the right object, so lets give it *sigh*
    else
      broadcastToAdmins(('Error: checkFoldPlayer bet status makes no sense (%s) $%d vs $%d '):format(actionon, playerbet, currentbet))
      assert(false,'checkFoldPlayer unhandled error')
      retval = 'doNothing1'
    end
    checkFoldPlayer[actionon] = false
  end
  tlog('checkFoldPlayer: retval: '.. (retval or 'nil'))
  return retval
end

-- General action function called when the action needs to update / move.
---- generally called after all player input routines not during showdown that would interact
---- with the hand.
function action(ob, pl, rightclick)
  log('======StartingAction======')
  -- print("\n\namount of players " .. #players .. "\n\n")
  if rightclick then return 1 end
  -- if actionon == nil then print("its nil!") return 1 end
  if pl and not Player[pl].admin and pl ~= actionon then
    log("action: insufficient privileges")
    return 1
  end

  if sidepotcalculated then
    log("action: sidepotcalculated break")
    return 1
  end


  if ( actiontext == nil
  or playerpottext == nil
  or playercurrentbettext == nil
  ) then
    checkAndRespawnObjects()
  end

  --Move the clock, don't kill it
  if clock ~= nil then
    clock.translate(Vector(0,-2,0))
  end

  for i,v in next, allIns do addPlayerToChecks(v) end
  for i,v in next, folded_colors do addPlayerToChecks(v) end
  --checkedplayers = allins + folds + players
  log('---first check---')

  --reset delay markers for appropriate bits
  marker_callAction = false

  if checkRound() == true then
    hideActionText()
    return 1
  end
  startOfStage = false
  -- end post-action

  -- next player
  actionon = next_actionon(actionon, players)

  calculatePots()
  log(previousbet,'new previousbet')
  log(currentbet,'new currentbet')
  -- start pre-action
  local playerbet = 0
  local playerreserve = 0
  local playerhashand = 0
  if actionon then
    playerbet = getChipValues(betzones[actionon],{})
    playerreserve = getChipValues(tablezones[actionon], {})
    playerhashand = Player[actionon].getHandObjects()[1]~=nil
  else
    log('no actionon detected!')
  end
  printstring = printstring..'action'
  if actionon then
    -- log(playerbet,"pb-"..actionon)
    -- log(currentbet,"cb-"..actionon)
    f_next_action = nil           or passiveActions_checkPlayer(actionon, playerbet, currentbet)
    f_next_action = f_next_action or passiveActions_checkCallPlayer(actionon, playerbet, currentbet)
    f_next_action = f_next_action or passiveActions_checkFoldPlayer(actionon, playerbet, currentbet)

    if f_next_action ~= nil and string.match(f_next_action,'doNothing')==nil then
      if type(_G[f_next_action])=='function' then
        _G[f_next_action](nil, actionon)
        return 1
      else --error handle
        broadcastToAdmins('action: unrecognized function '..f_next_action,'Red')
        error('action: unrecognized function '..f_next_action)
      end
    end

    createPlayerButtons()
    createPassiveButtons()

    -- move actiontext to front of player
    moveActionTextToColor(actionon)

    -- spawn clock if autoclock
    if options.autoclock then
      Wait.frames(function() spawnOrMoveClock() end, 2)
    end
    UITableBar.highlightSingle(slotColor[actionon])
  else
    hideActionText()
    log('actionon is nil!')
  end
  -- end of pre-action -- player required input after this
  log('======EndingAction======')
end

function moveActionTextToColor(player_color)
  assert(player_color~=nil,'moveActionTextToColor: player_color must not be nil!')
  local playerhand = Player[player_color].getHandTransform(1)
  actiontext.TextTool.setFontColor(fontcolors[player_color]) -- change color of "Action" to player's color
  actiontext.setValue('Action') -- set action text to say "Action" in case it gets changed (sometimes it changes to "Type here" for some reason)
  actiontext.setRotation({90, playerhand.rotation.y, 0})
  playerpottext.setValue('Pot: $'..tostring(format_int(pot)))
  playerpottext.TextTool.setFontColor(Color.Gold) -- change color of "Action" to player's color
  playerpottext.setRotation({90, playerhand.rotation.y, 0})
  playercurrentbettext.setValue('Latest bet: $'..tostring(format_int(currentbet)))
  playercurrentbettext.TextTool.setFontColor("White") -- change color of "Action" to player's color
  playercurrentbettext.setRotation({90, playerhand.rotation.y, 0})  -- move action button to player if playerclickaction is toggled

  local maxBet, minRaise, unused_, isDefault = getBetRange(player_color)
  local substring = '$%s ≤ Your Raise ≤ $%s'
  if maxBet == math.huge then
    substring = '$%s ≤ Your Raise'
  elseif maxBet >= getChipValues(tablezones[player_color], {}) + playerbets_hist[player_color] then
    substring = '$%s ≤ Your Raise ≤ All In'
  end
  --if its unlimited, don't use it
  if not isDefault then
    playerbetboundstext.setValue(substring:format(minRaise,maxBet))
    playerbetboundstext.TextTool.setFontColor("White")
    playerbetboundstext.setRotation({90, playerhand.rotation.y, 0})
  else
    playerbetboundstext.setValue(' ')
  end

  local tableOffsets = {}
  tableOffsets.Oval = {}
  tableOffsets.Oval.actiontext = {}
  tableOffsets.Oval.actiontext.betzones = Vector(2.412064E-05, -0.4965034, 0.4026346)
  tableOffsets.Oval.playerpottext = {}
  tableOffsets.Oval.playerpottext.betzones = Vector(2.196251E-05, -0.4965036, 0.812635)
  tableOffsets.Oval.playercurrentbettext = {}
  tableOffsets.Oval.playercurrentbettext.betzones = Vector(2.197222E-05, -0.4965036, 0.737635)
  tableOffsets.Oval.playerbetboundstext = {}
  tableOffsets.Oval.playerbetboundstext.betzones = Vector(2.197222E-05, -0.4965036, 0.657635)


  local using = 'betzones'
  local tabletype = 'Oval'
  for i,obj in next, {'actiontext','playerpottext','playercurrentbettext','playerbetboundstext'} do
    _G[obj].setPosition(_G[using][player_color].positionToWorld(tableOffsets[tabletype][obj][using]))
  end
end

function checkPlayerStates(ob, pl)
  if ob == nil or pl == nil then return 0 end
  if pl.host then return true end
  for i, v in ipairs(players) do
    if v == actionon then

      if getChipValues(betzones[v], {}) == currentbet then
        table.insert(playersinBet, {["color"] = v, ["state"] = "call"})
      elseif getChipValues(betzones[v], {}) > currentbet then
        table.insert(playersinBet, {["color"] = v, ["state"] = "bet"})
      end
    end
  end
  for i=1, #playersinBet do
    print(playersinBet[i].color .. ' and ' .. playersinBet[i].state)
  end
end

function checkPlayersCalled(ob, pl)
  if ob == nil or pl == nil then return 0 end
  for i, v in ipairs(playersinBet) do
    -- print(v.color .. ' is ' ..  v.state)
  end
end

function playerFolded(params)
  local hasCardsInZone = false
  local obj = betzones[params.name].getObjects()
  for i, v in ipairs(obj) do
    if v.type == "Card" or v.type == "Deck" then
      hasCardsInZone = true
    end
  end
  if Player[params.name].getHandObjects()[1] or hasCardsInZone then
    p = foldtoken[params.name].getPosition()
    r = foldtoken[params.name].getRotation()
    foldtoken[params.name].setColorTint({
      r=1,
      g=1,
      b=1,
      a=0.8
    })
    -- print("THA PLAYAS" .. #players)
    -- Wait.time(function() action() end, 0.1, 0)
    UITableBar.hide(params.name,3)
  end
end

function actionToggle(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.actiontoggle then
    options.actiontoggle = false
    hideActionText()
    print ('Action text toggled off. The button can still be used to update pot and current bet values.')
  else
    options.actiontoggle = true
    print ('Action text toggled on. It will reappear next time action is passed.')
  end

  optionsHost()
end

function hideActionText()
  local DEBUG_LEVEL=-1
  if true then
    if actiontext ~= nil then
      actiontext.setPosition({0, -2 * (-DEBUG_LEVEL), 0})
    end
    if playerpottext ~= nil then playerpottext.setPosition({0, - 2*(-DEBUG_LEVEL), 0}) end
    if playercurrentbettext ~= nil then playercurrentbettext.setPosition({0, - 2*(-DEBUG_LEVEL), 0}) end
    if playerbetboundstext ~= nil then playerbetboundstext.setPosition({0, - 2*(-DEBUG_LEVEL), 0}) end
  end
end

function calculatePots()
  if pottext == nil then
    checkAndRespawnObjects()
    return 0
  end
  -- if sidepotcalculated then
  --   return 0
  -- end
  if currentbettext == nil then
    checkAndRespawnObjects()
    return 0
  end
  startLuaCoroutine(Global, 'calculatePotsCoroutine')
end

function calculatePotsCoroutine ()
  tlog('---entering calculatePotsCoroutine')
  local p = potobject.getPosition()
  local r = potobject.getRotation()

  p.y = p.y + 10

  potzones[1].setPosition (p)
  potzones[1].setRotation (r)
  potzones[1].setScale({9.5, 20, 6})

  local bets = 0
  local mainpot = 0
  local prevpot = pot
  local prevbet = currentbet
  currentbet = 0
  local chips = {}
  local better = ''
  for i, v in ipairs (colors) do
    playerbets[v] = 0
    if betzones[v]~=nil then
      playerbets[v] = getChipValues(betzones[v], chips)
      if playerbets[v] > currentbet and actionon ~= v then
        currentbet = playerbets[v]
        better = v
      end
    end
    if options.displayplayermoney then
      money = tablezones[v]~=nil and getChipValues(tablezones[v], chips) or 0
      if tablezonetext[v]~=nil then tablezonetext[v].setValue("$" .. format_int(money)) end
      bets = bets + playerbets[v]
    end
  end

  for i, v in ipairs (potzones) do
      mainpot = mainpot + getChipValues(v, chips)
  end
  gmainpot = mainpot
  --mainpot = getChipValues(potzones[1], chips)

  pot = bets + mainpot - (playerbets[actionon or 0] or 0) + (playerbets_hist[actionon or 0] or 0)

  -- this is a shitty system, it needs to die.
  if false then
    -- print the pot value in chat
    if pot > prevpot then
      printstring = printstring..'pot'
    end

    -- print the current bet in chat
    if currentbet > prevbet then
      if prevbet == 0 then
        printstring = printstring..'bet'..better
      else
        printstring = printstring..'raise'..better
      end
    end
  end

  for i = 1, 3 do
    coroutine.yield(0)
  end
  for i, v in next, colors do
    if options.displayplayerbet then
      if playerbets[v] > 0 then
        bettext[v].setValue('$' .. tostring(format_int(playerbets[v])))
      else
        bettext[v].setValue('$0')
      end
    else
      bettext[v].setValue('$0')
    end
    sidepottext[v].setValue(" ")
  end
  -- display pot value on 3dtexts

  pottext.setValue('Pot: $'..tostring(format_int(pot)))
  currentbettext.setValue('Current Bet: $'..tostring(format_int(currentbet)))
  playerpottext.setValue('Pot: $'..tostring(format_int(pot)))
  playercurrentbettext.setValue('Latest bet: $'..tostring(format_int(currentbet)))
  printMessages()

  return 1

end

nameValueMethod = {}
setmetatable(nameValueMethod,{__index = function(t_table, key)
  return |obj|0
end,})
nameValueMethod['ChipStack'] = function(obj) return obj.getQuantity() * obj.getValue('value') end
nameValueMethod['Custom_Model_Stack'] = function(obj) return obj.getQuantity() * currencyToNumber(obj.getName()) end
nameValueMethod['Custom_Model'] = function(obj) return obj.type=='Chip' and currencyToNumber(obj.getName()) or 0 end
nameValueMethod['Chip'] = function(obj) return obj.getValue() or currencyToNumber(obj.getName()) end
function sumChipValues(chips)
  local aggregate = { value = 0, }
  for i,obj in next, chips do
    if isCurrency(obj) then
      if nameValueMethod[obj.name] ~= nil then
        aggregate.value = aggregate.value + nameValueMethod[obj.name](obj)
      elseif obj.getValue('value') ~= nil then
        aggregate.value = aggregate.value + obj.getValue('value')
      else
        log(obj.getData())
        assert(nil,"Chip value isn't recognized. Please add a method for it" .. logString(obj))
      end
    end
  end
  return aggregate.value
end
function getChipValues (zone, chips)
  local objects = zone.getObjects()
  local x = 0

  -- O( objects ) -- objects * (objects-2)*(+1)/(2)
-- chips = {}
-- chips = {w1}
-- chips = {w1,w2}
-- ..
-- chips = {w1,w2,...,w#objects}

  for j, w in ipairs (objects) do
    if isCurrency(w) and (chips==nil or not objectExistsInList(chips, w)) then
      if currencyToNumber(w.getName()) then
        x = x + (currencyToNumber(w.getName()) * math.abs(w.getQuantity()))
        if chips~=nil then chips[#chips + 1] = w end
      elseif w.getValue() then
        x = x + (w.getValue() * math.abs(w.getQuantity()))
        if chips~=nil then chips[#chips + 1] = w end
      end
    end
  end

  return x

end

function resetBets()
  playerbets = {}
  playerbets_hist = {}
  for i, v in ipairs (colors) do
    playerbets[v] = 0
    playerbets_hist[v] = 0
  end
  currentbet = 0
  new_raise = 0
  lastAggressor = nil
end

function resetSpeedDials()
  checkFoldPlayer = {}
  checkPlayer = {}
  checkCallPlayer = {}
  for i, v in ipairs (players) do
    checkFoldPlayer[v] = false
    checkPlayer[v] = false
    checkCallPlayer[v] = false
    checkCallAtPlayer[v] = false
  end
  createPlayerButtons()
end

--[[ Spawn panel with host options buttons --]]
function spawnOptionsPanel(ob, pl)

  if not Player[pl].admin then return 1 end

  if optionspanel then
    destroyOptionsPanel()
    return 1
  end

  local params = {}
  params.type = 'Custom_Model'
  params.callback = 'optionsMain'
  params.position = { - 4.5, 4.45, - 25}
  params.scale = {2, 1, 2}
  params.rotation = {0, 180, 0}
  params.sound = false
  optionspanel = spawnObject(params)

  local custom = {}
  custom.mesh = 'http://pastebin.com/raw/avCFwn0Y'
  custom.collider = 'http://pastebin.com/raw/avCFwn0Y'
  custom.specular_intensity = 0
  custom.type = 4

  optionspanel.setCustomObject(custom)

  optionspanel.lock()
  optionspanel.interactable = false
  optionspanel.setColorTint({0, 0, 0})

  startLuaCoroutine(Global, 'addSelfDestruct')

end

--[[ Add buttons to panel --]]

function optionsMain(ob, pl)

  if pl~=nil and not Player[pl].admin then return 1 end

  optionspanel.clearButtons()
  optionspanel.clearInputs()

  if colorball ~= nil then
    colorball.destruct()
  end

  local button = {}

  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 1000
  button.height = 200
  button.label = 'Host Settings'
  button.click_function = 'optionsHost'
  button.font_size = 150
  button.position = {0, 0.05, - 1.5}

  optionspanel.createButton(button)

  button.width = 1000
  button.height = 200
  button.label = 'UX Settings'
  button.click_function = 'optionsUX'
  button.font_size = 150
  button.position = {0, 0.05, - 1}
  optionspanel.createButton(button)

  button.width = 1000
  button.height = 200
  button.label = 'Themes'
  button.click_function = 'optionsThemes'
  button.font_size = 150
  button.position = {0, 0.05, - 0.5}
  optionspanel.createButton(button)

  button.width = 1000
  button.height = 200
  button.label = 'Currencies'
  button.click_function = 'optionsCurrencies'
  button.font_size = 150
  button.position = {0, 0.05, 0}
  optionspanel.createButton(button)



  button.label = 'Deal one card'
  button.width = 800
  button.font_size = 100
  button.position = { - 1, 0.05, 0.5}
  button.click_function = 'dealOneCard'
  optionspanel.createButton(button)

  button.label = 'Clock'
  button.width = 800
  button.font_size = 150
  button.position = {1, 0.05, 0.5}
  button.click_function = 'spawnOrMoveClock'
  optionspanel.createButton(button)

  button.label = '«'
  button.width = 100
  button.height = 100
  button.font_size = 100
  button.click_function = 'decreaseClockTime5'
  button.position = {0.4, 0.05, 0.85}
  optionspanel.createButton(button)

  button.label = '‹'
  button.click_function = 'decreaseClockTime1'
  button.position = {0.6, 0.05, 0.85}
  optionspanel.createButton(button)

  button.label = tostring(options.clocktime)
  button.width = 300
  button.click_function = 'doNothing'
  button.position = {1, 0.05, 0.85}
  optionspanel.createButton(button)

  button.label = '›'
  button.width = 100
  button.click_function = 'increaseClockTime1'
  button.position = {1.4, 0.05, 0.85}
  optionspanel.createButton(button)

  button.label = '»'
  button.click_function = 'increaseClockTime5'
  button.position = {1.6, 0.05, 0.85}
  optionspanel.createButton(button)

  button.label = 'Fold Player'
  button.width = 800
  button.height = 200
  button.font_size = 150
  button.position = {1, 0.05, 1.5}
  button.click_function = 'foldPlayer'
  optionspanel.createButton(button)

  button.label = 'Showdown!'
  button.width = 1000
  button.height = 200
  button.font_size = 150
  button.position = {1, 0.05, 2.0}
  button.click_function = 'forceShowDown'
  optionspanel.createButton(button)

  button.label = 'Set player Afk'
  button.width = 800
  button.font_size = 100
  button.position = { - 1, 0.05, 1}
  button.click_function = 'setPlayerAfk'
  optionspanel.createButton(button)

  button.label = 'Reset Objects'
  button.font_size = 100
  button.click_function = 'checkAndRespawnObjectsFromMenu'
  button.position = { - 1.0, 0.05, 1.5}
  optionspanel.createButton(button)

  button.label = 'Reset Syst. Notes'
  button.font_size = 100
  button.click_function = 'checkAndResetNotes'
  button.position = { - 1.0, 0.05, 2}
  optionspanel.createButton(button)

  button.label = 'Check Game Save'
  button.font_size = 100
  button.click_function = 'checkDuplicates'
  button.position = { - 1.0, 0.05, 2.5}
  optionspanel.createButton(button)

  button.label = 'Standup All'
  button.font_size = 100
  button.click_function = 'standupAll'
  button.position = { - 1.0, 0.05, 3}
  optionspanel.createButton(button)
end
-- function CallWithPackedArgs(params)
--   assert(params.fxn, "functions are necessary")
-- end
function dealOneCard(ob, pl)
  if pl then
    if not Player[pl].admin and pl ~= actionon then
      return 1
    end
  end

  if not initDeck(num) then return 1 end

  if not dealing then
    if not handinprogress then
      players = getOrderedListOfPlayers()
    end

    if not players then
      return 1
    end

    onecard = true
    dealing = true
    startLuaCoroutine(Global, 'holeCoroutine')
  end
end

--[[ If the rewind button is used while the options menu is open, the black square will remain and be non-interactable. This script is added to it so it self-destructs in that event. --]]
function addSelfDestruct()
  for i = 1, 5 do
    coroutine.yield(0)
  end
  if optionspanel ~= nil then
    optionspanel.setLuaScript('function onload() self.destruct() end')
  end
  return 1
end

function betsOptionsHost(ob,pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  optionspanel.clearButtons()
  optionspanel.clearInputs()
  local button = {}
  local s = ''
  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 150
  button.height = 150
  button.label = '◄'
  button.font_size = 125
  button.click_function = 'optionsHost'
  button.position = { - 1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  pos = Vector(- 0.75, 0.05, - 1.0)
  local i = 0
  local j = 0
  local k = 0
  local fpos = function(i,j,k) return 0.35*(i-1)+0.3*(j+k-1) end
  button.width = 1800
  button.height = 150
  button.font_size = 75
  button.position = pos + Vector(0.75, 0, fpos(1,0,0))
  button.click_function = 'toggle_betoptionsEnforce'
  button.color = {130/255,135/255,135/255}
  button.label = ("ENFORCED BETTING RULES"):format(flop,bettype)
  button.label = strCheckBox(options.betoptionsEnforce) .. button.label
  optionspanel.createButton(button)
  for _i,flop in next, {'preflop','postflop'} do
    i = i + 1
    for _j,bettype in next, {'maxbet','minraise'} do
      j = j + 1
      button.width = 1000
      button.height = 150
      button.font_size = 75
      button.position = pos + Vector(0, 0, fpos(i,j,k))
      button.click_function = 'betsOptionsHost'
      button.color = {130/255,235/255,135/255}
      button.label = ("%s - %s"):format(flop,bettype)
      optionspanel.createButton(button)
      button.width = 100
      button.position = pos + Vector(1.4, 0, fpos(i,j,k))
      button.label = 'X'
      optionspanel.createButton(button)
      button.position = pos + Vector(2, 0, fpos(i,j,k))
      button.label = 'Y'
      optionspanel.createButton(button)
      button.position = pos + Vector(2.6, 0, fpos(i,j,k))
      button.label = 'Z'
      optionspanel.createButton(button)
      for betstyle,subsubrec in next, options.betoptions[flop][bettype] do
        k = k + 1
        _G[('toggle_betoptions_%d_%d_%d'):format(i,j,k)] = function(obj, player_color, alt_click)
          --options.betoptions[flop][betstyle].isOn = not options.betoptions[flop][betstyle].isOn
          for l,frec in next, options.betoptions[flop][bettype] do
            options.betoptions[flop][bettype][l].isOn = chooseOp(l==betstyle, true, false)
          end
          betsOptionsHost(nil,nil)
        end
        button.width = 1400
        button.height = 150
        button.font_size = 75
        button.position = pos + Vector(-0.25, 0, fpos(i,j,k))
        button.click_function = ('toggle_betoptions_%d_%d_%d'):format(i,j,k)
        if options.betoptions[flop][bettype][betstyle].isOn then
          button.color = "Red"
          button.label = '☑ ' .. betstyle
        else
          button.color = {235/255,235/255,235/255}
          button.label = '□ ' .. betstyle
        end
        optionspanel.createButton(button)

        if options.betoptions[flop][bettype][betstyle].X then
          _G[('toggle_betoptions_%d_%d_%d_X'):format(i,j,k)] = function(obj, player_color, input, stillEditing)
            if not stillEditing then
              options.betoptions[flop][bettype][betstyle].X = tonumber(input)
            end
            if options.autonotes then autoNotes() end
          end
          local inputParams = {
            input_function = ('toggle_betoptions_%d_%d_%d_X'):format(i,j,k),
            function_owner = Global,
            label          = "X value",
            tooltip        = "X value",
            position       = pos + Vector(1.4,0,fpos(i,j,k)),
            rotation       = {0, 0, 0},
            width          = 250,
            height         = 100,
            font_size      = 60,
            color          = {1,1,1},
            font_color     = {0, 0, 0},
            alignment      = 2,
            value          = options.betoptions[flop][bettype][betstyle].X,
            validation     = 3,
          }
          optionspanel.createInput(inputParams)
        end
        if options.betoptions[flop][bettype][betstyle].Y then
          _G[('toggle_betoptions_%d_%d_%d_Y'):format(i,j,k)] = function(obj, player_color, input, stillEditing)
            if not stillEditing then
              options.betoptions[flop][bettype][betstyle].Y = tonumber(input)
            end
            if options.autonotes then autoNotes() end
          end
          local inputParams = {
            input_function = ('toggle_betoptions_%d_%d_%d_Y'):format(i,j,k),
            function_owner = Global,
            label          = "Y value",
            tooltip        = "Y value",
            position       = pos + Vector(2,0,fpos(i,j,k)),
            rotation       = {0, 0, 0},
            width          = 250,
            height         = 100,
            font_size      = 60,
            color          = {1,1,1},
            font_color     = {0, 0, 0},
            alignment      = 2,
            value          = options.betoptions[flop][bettype][betstyle].Y,
            validation     = 3,
          }
          optionspanel.createInput(inputParams)
        end
        if options.betoptions[flop][bettype][betstyle].Z then
          _G[('toggle_betoptions_%d_%d_%d_Z'):format(i,j,k)] = function(obj, player_color, input, stillEditing)
            if not stillEditing then
              options.betoptions[flop][bettype][betstyle].Z = tonumber(input)
            end
            if options.autonotes then autoNotes() end
          end
          local inputParams = {
            input_function = ('toggle_betoptions_%d_%d_%d_Z'):format(i,j,k),
            function_owner = Global,
            label          = "Z value",
            tooltip        = "Z value",
            position       = pos + Vector(2.6,0,fpos(i,j,k)),
            rotation       = {0, 0, 0},
            width          = 250,
            height         = 100,
            font_size      = 60,
            color          = {1,1,1},
            font_color     = {0, 0, 0},
            alignment      = 2,
            value          = options.betoptions[flop][bettype][betstyle].Z,
            validation     = 3,
          }
          optionspanel.createInput(inputParams)
        end
      end
    end
  end
  --
  for _k,k in next, {'preflop','postflop'} do
    for _j,j in next, {'minraise','maxbet'} do
      for l,fffrec in next, options.betoptions[k][j] do
        if fffrec.isOn then
          fffrec.name = l
          _G[('cur_%s_%s'):format(k,j)] = fffrec
        end
      end
    end
  end
  if options.autonotes then
    autoNotes()
  end
end

function optionsHost(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end

  optionspanel.clearButtons()
  optionspanel.clearInputs()

  local button = {}
  local s = ''

  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 150
  button.height = 150
  button.label = '◄'
  button.font_size = 125
  button.click_function = 'optionsMain'
  button.position = { - 1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  -- if options.actiontoggle then
  --   button.label = '☑ Action'
  -- else
  --   button.label = '□ Action'
  -- end
  -- button.font_size = 75
  -- button.width = 350
  -- button.height = 100
  -- button.click_function = 'actionToggle'
  -- button.position = { - 1.5, 0.05, - 1.5}
  -- optionspanel.createButton(button)

  -- if options.actiontoggle then
  --   if options.playerclickaction then
  --     button.label = '+Players'
  --   else
  --     button.label = '+Host'
  --   end
  --   button.click_function = 'togglePlayerClickAction'
  --   button.position = { - 1.5, 0.05, - 1.25}
  --   optionspanel.createButton(button)
  -- end
    button.width = 350
    button.font_size = 75
    if options.autoblinds then
      button.label = '☑ Auto Blinds'
    else
      button.label = '□ Auto Blinds'
    end
    button.position =  { - 0.35, 0.05, - 0.75}
    button.tooltip = "Blinds will be paid automatically - Set the blinds by placing a chip on the blinds section in the top right of the white secret zone"
    button.width = 500
    button.click_function = 'toggleAutoBlinds'
    optionspanel.createButton(button)


    if options.autonotes then
      button.label = '☑ Auto Notes'
    else
      button.label = '□ Auto Notes'
    end
    button.position =  { - 0.35, 0.05, - 0.50}
    button.width = 500
    button.tooltip = "Blinds will be updated in the Notes. To edit notes; switch to Black color and enter Notebook > Server Rules/Blinds"
    button.click_function = 'toggleAutoNotes'
    optionspanel.createButton(button)

    if options.autoclock then
      button.label = '☑ Autoclock'
    else
      button.label = '□ Autoclock'
    end
    button.tooltip = ''
    button.position = { - 1.35, 0.05, - 1.0}
    button.width = 500
    button.click_function = 'toggleAutoclock'
    optionspanel.createButton(button)

    if options.autoclock then
      button.label = '‹'
      button.width = 100
      button.click_function = 'decreaseAutoclockTime'
      button.position = { - 1.7, 0.05, - 0.75}
      optionspanel.createButton(button)

      button.label = tostring(options.autoclocktime)
      button.width = 200
      button.position = { - 1.35, 0.05, - 0.75}
      button.click_function = 'doNothing'
      optionspanel.createButton(button)

      button.label = '›'
      button.width = 100
      button.click_function = 'increaseAutoclockTime'
      button.position = { - 1.0, 0.05, - 0.75}
      optionspanel.createButton(button)

      if options.clockpausebutton then
        button.label = '☑ Pause button'
      else
        button.label = '□ Pause button'
      end
      button.width = 600
      button.position = { - 1.35, 0.05, - 0.5}
      button.click_function = 'toggleAutoclockPauseButton'
      optionspanel.createButton(button)
    end

    if options.autofold then
      button.label = '☑ Autofold'
    else
      button.label = '□ Autofold'
    end
    button.width = 500
    button.position = { - 0.35, 0.05, - 1.0}
    button.click_function = 'toggleAutofold'
    optionspanel.createButton(button)


  if options.collectmethod == 'move' then
    button.label = 'Collect method: Move'
    button.width = 800
  elseif options.collectmethod == 'convert' then
    button.label = 'Collect method: Convert'
    button.width = 850
  elseif options.collectmethod == 'hybrid' then
    button.label = 'Collect method: Hybrid:'
    button.width = 850
  else
    button.label = options.collectmethod
    button.width = 800
  end
  button.click_function = 'changeCollectMethod'
  button.position = { - 1, 0.05, 0}
  optionspanel.createButton(button)

  if options.collectmethod == 'hybrid' then
    button.label = '«'
    button.width = 100
    button.click_function = 'decreaseHybridThreshold1000'
    button.position = {0.0, 0.05, 0}
    optionspanel.createButton(button)

    button.label = '‹'
    button.click_function = 'decreaseHybridThreshold100'
    button.position = {0.2, 0.05, 0}
    optionspanel.createButton(button)

    button.label = '$'..tostring(options.hybridthreshold)
    button.width = 350
    button.click_function = 'doNothing'
    button.position = {0.65, 0.05, 0}
    optionspanel.createButton(button)

    button.label = '›'
    button.width = 100
    button.click_function = 'increaseHybridThreshold100'
    button.position = {1.1, 0.05, 0}
    optionspanel.createButton(button)

    button.label = '»'
    button.click_function = 'increaseHybridThreshold1000'
    button.position = {1.3, 0.05, 0}
    optionspanel.createButton(button)
  end

  if options.collectmethod == 'convert' or options.collectmethod == 'hybrid' then

    button.label = 'Minimum Stack Height:'
    button.width = 850
    button.click_function = 'doNothing'
    button.position = { - 1, 0.05, 0.25}
    optionspanel.createButton(button)

    button.width = 100
    button.label = '‹'
    button.click_function = 'decreaseConvertStackHeight1'
    button.position = {0.2, 0.05, 0.25}
    optionspanel.createButton(button)

    button.label = tostring(options.convertstackheight)
    button.width = 350
    button.click_function = 'doNothing'
    button.position = {0.65, 0.05, 0.25}
    optionspanel.createButton(button)

    button.label = '›'
    button.width = 100
    button.click_function = 'increaseConvertStackHeight1'
    button.position = {1.1, 0.05, 0.25}
    optionspanel.createButton(button)
  end

  button.label = 'Betting Rules'
  button.width = 650
  button.click_function = 'betsOptionsHost'
  button.position = { - 0.375, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.label = 'Game Modes'
  button.width = 650
  button.click_function = 'doNothing'
  button.position = { 0.95, 0.05, - 1.8}
  optionspanel.createButton(button)

  if options.blindsskipafk then
    button.label = '☑ Blinds Skip AFK'
  else
    button.label = '□ Blinds Skip AFK'
  end
  button.width = 650
  button.click_function = 'toggleBlindsSkipAFK'
  button.position = { - 0.375, 0.05, - 1.5}
  optionspanel.createButton(button)

  button.label = "Start New Session"
  button.width = 650
  button.click_function = 'startNewSession'
  button.position = { - 0.575, 0.05, - 1.25}
  optionspanel.createButton(button)

  if options.gamemode == 'omaha' then
    s = '►'
  else
    s = ''
  end
  button.label = s..'Omaha Hold\'em'
  button.width = 650
  button.click_function = 'setGameModeOmaha'
  button.position = {1.0, 0.05, - 1.0}
  optionspanel.createButton(button)

  if options.gamemode == 'pineapple' then
    s = '►'
  else
    s = ''
  end
  button.label = s..'Pineapple'
  button.width = 700
  button.click_function = 'setGameModePineapple'
  button.position = {1.0, 0.05, - 1.25}
  optionspanel.createButton(button)

  if options.gamemode == 'texas' then
    s = '►'
  else
    s = ''
  end
  button.label = s..'Texas Hold\'em'
  button.width = 600
  button.click_function = 'setGameModeTexas'
  button.position = {1.0, 0.05, - 1.5}
  optionspanel.createButton(button)


  ------ [ left column ] ------



  ------ [ right column ] ------

  if options.enforcefoldinturn then
    button.label = '☑ Fold in turn'
  else
    button.label = '□ Fold in turn'
  end
  button.width = 1000
  button.click_function = 'toggleEnforceFoldInTurn'
  button.position = {1, 0.05, 0.6}
  optionspanel.createButton(button)

  if options.lockbags then
    button.label = '☑ Lock save bags'
  else
    button.label = '□ Lock save bags'
  end
  button.width = 1000
  button.click_function = 'toggleLockBags'
  button.position = {1, 0.05, 0.8}
  optionspanel.createButton(button)


  if options.starterpack then
    button.label = '☑ Starter pack'
  else
    button.label = '□ Starter pack'
  end
  button.width = 1000
  button.tooltip = "New users will get the savebox with whatever contents (start chips, counter)"

  button.click_function = 'toggleStarterPack'
  button.position = {1, 0.05, 1}
  optionspanel.createButton(button)

  if options.autobutton then
    button.label = '☑ Auto Button'
  else
    button.label = '□ Auto Button'
  end
  button.width = 1000
  button.tooltip = "When resetting for a new game, the dealer button will automatically move to the next player"

  button.click_function = 'toggleAutoButton'
  button.position = {1, 0.05, 1.2}
  optionspanel.createButton(button)

  if options.lockchips then
    button.label = '☑ Lock Chips'
  else
    button.label = '□ Lock Chips'
  end
  button.width = 1000
  button.tooltip = "The chips will be locked so players cant steal or put money out of turn."

  button.click_function = 'toggleLockChips'
  button.position = {1, 0.05, 1.4}
  optionspanel.createButton(button)

  if options.playerbuttons.checkfoldplayer then
    button.label = '☑ Passive Actions'
  else
    button.label = '□ Passive Actions'
  end
  button.width = 1000
  button.tooltip = "Players can passively check or fold depending on the bet"

  button.click_function = 'toggleCheckFoldPlayer'
  button.position = {1, 0.05, 1.6}
  optionspanel.createButton(button)

  if options.forceshowdown then
    button.label = '☑ Force Showdown'
  else
    button.label = '□ Force Showdown'
  end
  button.width = 1000
  button.tooltip = "All players will show their cards during showdown, simultaneously"

  button.click_function = 'toggleForceShowdown'
  button.position = {1, 0.05, 1.8}
  optionspanel.createButton(button)

  if options.autoaction then
    button.label = '☑ Auto Action'
  else
    button.label = '□ Auto Action'
  end
  button.width = 1000
  button.tooltip = "Game automatically advances whenever possible"
  button.click_function = 'toggleAutoAction'
  button.position = {1, 0.05, 2}
  optionspanel.createButton(button)

  if options.userandomatmospheric then
    button.label = '☑ Use Random Atmospheric'
  else
    button.label = '□ Use Random Atmospheric'
  end
  button.width = 1000
  button.tooltip = "Game automatically advances whenever possible"
  button.click_function = 'toggleUseRandomAtmospheric'
  button.position = {1, 0.05, 2.2}
  optionspanel.createButton(button)
end

function doNothing()
  return 1
end

function optionsUX(ob, pl)

  if pl~=nil and not Player[pl].admin then return 1 end

  optionspanel.clearButtons()

  local button = {}

  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 150
  button.height = 150
  button.label = '◄'
  button.font_size = 125
  button.click_function = 'optionsMain'
  button.position = { - 1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 650
  button.height = 150
  button.font_size = 75
  if options.uxoptions.actionmessage then
    button.label = '☑ Action message'
  else
    button.label = '□ Action message'
  end
  button.click_function = 'toggleActionMessage'
  button.position = { - 1.0, 0.05, - 1.5}
  optionspanel.createButton(button)

  button.width = 700
  button.height = 150
  button.font_size = 75
  if options.uxoptions.actionbroadcast then
    button.label = '☑ Action broadcast'
  else
    button.label = '□ Action broadcast'
  end
  button.click_function = 'toggleActionBroadcast'
  button.position = { - 1.0, 0.05, - 1.25}
  optionspanel.createButton(button)

  button.width = 600
  button.height = 150
  button.font_size = 75
  if options.uxoptions.currentbetmessage then
    button.label = '☑ Current bet'
  else
    button.label = '□ Current bet'
  end
  button.click_function = 'toggleCurrentBetMessage'
  button.position = {1.0, 0.05, - 1.5}
  optionspanel.createButton(button)

  button.width = 600
  button.height = 150
  button.font_size = 75
  if options.uxoptions.better then
    button.label = '☑ └Better/raiser'
  else
    button.label = '□ └Better/raiser'
  end
  button.click_function = 'toggleBetter'
  button.position = {1.0, 0.05, - 1.25}
  if options.uxoptions.currentbetmessage then
    optionspanel.createButton(button)
  end

  button.width = 700
  button.height = 150
  button.font_size = 75
  if options.uxoptions.allinbroadcast then
    button.label = '☑ All-in broadcast'
  else
    button.label = '□ All-in broadcast'
  end
  button.click_function = 'toggleAllinBroadcast'
  button.position = {1.0, 0.05, - 1.0}
  optionspanel.createButton(button)

  button.height = 150
  button.font_size = 75
  if options.uxoptions.potmessage == 0 then
    button.width = 700
    button.label = 'Pot message: Off'
  elseif options.uxoptions.potmessage == 1 then
    button.width = 1000
    button.label = 'Pot message: On collect only'
  elseif options.uxoptions.potmessage == 2 then
    button.width = 900
    button.label = 'Pot message: On change'
  end
  button.click_function = 'togglePotMessage'
  button.position = {1.0, 0.05, - 0.75}
  optionspanel.createButton(button)

  button.width = 850
  button.height = 150
  button.font_size = 75
  if options.uxoptions.stagebroadcast then
    button.label = '☑ Game stage broadcast'
  else
    button.label = '□ Game stage broadcast'
  end
  button.click_function = 'toggleStageBroadcast'
  button.position = { - 1.0, 0.05, - 1.0}
  optionspanel.createButton(button)

  button.width = 850
  button.height = 150
  button.font_size = 75
  if options.uxoptions.turnsounds then
    button.label = '☑ Turn Sounds'
  else
    button.label = '□ Turn Sounds'
  end
  button.click_function = 'toggle_turnsounds'
  button.position = { - 1.0, 0.05, - 0.75}
  optionspanel.createButton(button)

  if options.uxoptions.facedowncards then
    button.label = '☑ Deal Face Down'
  else
    button.label = '□ Deal Face Down'
  end
  button.click_function = 'toggleFaceDownCards'
  button.position = { - 1.0, 0.05, 0.25}
  optionspanel.createButton(button)

   ------ [ left column ] ------

   if options.displayplayerbet then
    button.label = '☑ Display Player Bets'
  else
    button.label = '□ Display Player Bet'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayPlayerBet'
  button.position = { - 1, 0.05, 0.6}
  optionspanel.createButton(button)

  if options.displayplayermoney then
    button.label = '☑ Display Player Money'
  else
    button.label = '□ Display Player Money'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayPlayerMoney'
  button.position = { - 1, 0.05, 0.8}
  optionspanel.createButton(button)

  -- if options.changemachine then
  --   button.label = '☑ change Machine'
  -- else
  --   button.label = '□ change Machine'
  -- end
  -- button.width = 1000
  -- button.click_function = 'togglechangeMachine'
  -- button.position = { - 1, 0.05, 1}
  -- optionspanel.createButton(button)

  if options.playerbuttons.sortchips then
    button.label = '☑ Display Sort Chips Button'
  else
    button.label = '□ Display Sort Chips Button'
  end
  button.width = 1000
  button.click_function = 'toggleDisplaySortChips'
  button.position = {-1, 0.05, 1.0}
  optionspanel.createButton(button)


  if options.playerbuttons.convert then
    button.label = '☑ Display Convert Button'
  else
    button.label = '□ Display Convert Button'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayConvert'
  button.position = {-1, 0.05, 1.2}
  optionspanel.createButton(button)

  if options.playerbuttons.allin then
    button.label = '☑ Display AllIn Button'
  else
    button.label = '□ Display AllIn Button'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayAllIn'
  button.position = {-1, 0.05, 1.4}
  optionspanel.createButton(button)

  if options.playerbuttons.afk then
    button.label = '☑ Display AFK Button'
  else
    button.label = '□ Display AFK Button'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayAFK'
  button.position = {-1, 0.05, 1.6}
  optionspanel.createButton(button)


  if options.playerbuttons.loadsavebag then
    button.label = '☑ Display Load Save Button'
  else
    button.label = '□ Display Load Save Button'
  end
  button.width = 1000
  button.click_function = 'toggleLoadSaveBag'
  button.position = {-1, 0.05, 1.8}
  optionspanel.createButton(button)

  if options.playerbuttons.topoff then
    button.label = '☑ Display Top Off Btn'
  else
    button.label = '□ Display Top Off Btn'
  end
  button.width = 1000
  button.click_function = 'toggleDisplayTopOff'
  button.position = {-1, 0.05, 2.0}
  optionspanel.createButton(button)


  button.label = strCheckBox(options.playerbuttons.betamount,'Display Bet Amount Btn')
  button.width = 1000
  button.click_function = 'toggleDisplayBetAmount'
  button.position = {-1, 0.05, 2.2}
  optionspanel.createButton(button)

  button.label = strCheckBox(options.uxoptions.leaderboard,'Display Leaderboard')
  button.width = 1000
  button.click_function = 'toggleLeaderboard'
  button.position = {1.0, 0.05, 2.2}
  optionspanel.createButton(button)
end

function toggle_turnsounds(ob,pl)
  if Player[pl].admin then
    options.uxoptions.turnsounds = not options.uxoptions.turnsounds
    optionsUX()
  end
end

function optionsThemes(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  optionspanel.clearButtons()
  optionspanel.clearInputs()

  local button = {}

  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 150
  button.height = 150
  button.label = '◄'
  button.font_size = 125
  button.click_function = 'optionsMain'
  button.position = { - 1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.label = 'Set Font Color'
  button.width = 600
  button.font_size = 75
  button.click_function = 'changeFontColor'
  button.position = { - 0.75, 0.05, - 1.75}
  optionspanel.createButton(button)

  button.label = 'Set Overlay Color'
  button.width = 600
  button.click_function = 'changeTableColor'
  button.position = {0.75, 0.05, - 1.75}
  optionspanel.createButton(button)

  button.label = 'Darken Overlay'
  button.width = 600
  button.click_function = 'darkenOverlay'
  button.position = { - 0.75, 0.05, - 1.5}
  optionspanel.createButton(button)

  button.label = 'Lighten Overlay'
  button.width = 600
  button.click_function = 'lightenOverlay'
  button.position = {0.75, 0.05, - 1.5}
  optionspanel.createButton(button)

  if overlay==nil then overlay = getObjectFromG({getName='Table Overlay',}) end
  if overlay~= nil then
    if overlay.interactable then
      button.label = '☑ Make Overlay Interactable'
    else
      button.label = '□ Make Overlay Interactable'
    end
    button.width = 1100
    button.click_function = 'setInteractableOverlay'
    button.position = { - 0.75, 0.05, - 1.25}
    optionspanel.createButton(button)
  end

  local themeSectionOffset = -0.5
  --[[ spawn theme buttons --]]
  for i, v in ipairs (themes) do
    local s = ''
    if i == themeindex then
      s = '►'
    end
    button.width = (((string.len(themes[i].label) + string.len(s)) * 40) + 0 )
    button.height = 100
    button.font_size = 65
    button.label = themes[i].label..s
    button.click_function = 'setTheme'..tostring(i)
    button.position = { - 1.75, 0.05, (themeSectionOffset + ((i - 1) * 0.25))}
    optionspanel.createButton(button)
  end



  --[[ spawn subtheme buttons --]]
  for i, v in ipairs (themes[themeindex]) do
    local s = ''
    if i == subthemeindex then
      s = '►'
    end
    button.width = (((string.len(themes[themeindex][i].label) + string.len(s)) * 40) + 0)
    button.height = 100
    button.label = themes[themeindex][i].label..s
    button.click_function = 'setSubtheme'..tostring(i)
    button.position = { - 0.75, 0.05, (themeSectionOffset + ((i - 1) * 0.25))}
    optionspanel.createButton(button)
  end

  --[[ spawn diffuse buttons --]]
  for i, v in ipairs (themes[themeindex][subthemeindex]) do
    button.width = ((string.len(themes[themeindex][subthemeindex][i].label) * 35) + 0)
    button.height = 100
    button.label = themes[themeindex][subthemeindex][i].label
    button.click_function = 'overlay'..tostring(i)
    button.position = {1, 0.05, (themeSectionOffset + ((i - 1) * 0.25))}
    optionspanel.createButton(button)
  end

  if colorball == nil then
    local params = {}
    local p = optionspanel.getPosition()
    params.position = {p.x, p.y, p.z + 3.5}
    params.type = 'go_game_piece_white'
    params.scale = {0.5, 0.5, 0.5}
    params.sound = false
    colorball = spawnObject(params)
    local color = pottext.TextTool.getFontColor()
    colorball.lock()
    colorball.setColorTint(color)
    colorball.setDescription('Change my color tint, then click \'Font Color\' button to change color of text fonts.')
  end

  local inputParams = {
    input_function = "setCustomThemeInput",
    function_owner = Global,
    label          = "Theme URL",
    tooltip        = "Custom theme",
    position       = {-0.7, 0.05, themeSectionOffset - 0.25},
    rotation       = {0, 0, 0},
    width          = 1200,
    height         = 100,
    font_size      = 60,
    color          = {1,1,1},
    font_color     = {0, 0, 0},
    alignment      = 2,
    value          = overlay.getCustomObject()['diffuse'],
    validation     = 1,
  }

  optionspanel.createInput(inputParams)

  button.label = 'Custom Theme'
  button.width = 500
  button.click_function = 'setCustomTheme'
  button.position = {1.1, 0.05, themeSectionOffset - 0.25}
  optionspanel.createButton(button)
end

function setCustomTheme(ob,pl)
  if pl~=nil and Player[pl].admin then
    changeOverlay({diffuse=custom_theme_url})
  end
end

function setCustomThemeInput(obj, color, input, stillEditing)

  if not stillEditing then
    custom_theme_url = input

  end
  --https://i.imgur.com/vwGSWDW.png
end



function toggleCheckFoldPlayer(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  options.playerbuttons.checkfoldplayer = not options.playerbuttons.checkfoldplayer
  createPlayerButtons()
  togglePassiveButtons()
  optionsHost()
end

function toggleForceShowdown(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  options.forceshowdown = not options.forceshowdown
  createPlayerButtons()
  optionsHost()
end


function togglechangeMachine(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  options.changemachine = not options.changemachine

  for i, v in ipairs(getAllObjects()) do
    if v.getName() == 'Back Table' then
      v.clearButtons()
      if options.changemachine then
        local offsetx = 2 / #currencies
        local button = {}

        if #currencies <= 10 then
          offsetx = 1.65 / (#currencies - 2)
        else
          offsetx = 1.65 / 8
        end
        local offsety = 2 / #currencies
        button.font_size = 150
        button.width = 450
        button.height = 250
        button.scale = {1 / 5, 1 / 5, 1 / 7.5}
        button.position = {0.83, - 0.1, - 0.9}
        button.rotation = {180, 0, 0}

        for j, w in ipairs(currencies) do
          if w.value ~= -1 then
            button.label = w.label
            button.click_function = 'changeMachineButton' .. j
            v.createButton(button)
            button.position[1] = button.position[1] - offsetx
          end
          if j == 9 then
            if #currencies - 11 > 0 then
              offsetx = 1.65 / (#currencies - 11)
              button.position = {0.83, - 0.1, - 0.8} -- spawn 1 button in the center
            else
              button.position = {0, - 0.1, - 0.8} -- spawn 1 button in the center
            end
          end
        end
      end
    end
  end


  optionsHost()
end

function toggleDisplayPlayerMoney(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  options.displayplayermoney = not options.displayplayermoney

  if options.displayplayermoney then
    for i, v in ipairs (colors) do
      money = getChipValues(tablezones[v], chips)
      tablezonetext[v].setValue("$" .. format_int(money))
    end
  else
    for i, v in ipairs (colors) do
      tablezonetext[v].setValue(" ")
    end
  end
  optionsUX()
end



function optionsCurrencies(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  optionspanel.clearButtons()

  local button = {}

  button.width = 150
  button.height = 150
  button.label = '☒'
  button.font_size = 125
  button.click_function = 'destroyOptionsPanel'
  button.position = {1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  button.width = 150
  button.height = 150
  button.label = '◄'
  button.font_size = 125
  button.click_function = 'optionsMain'
  button.position = { - 1.75, 0.05, - 1.8}
  optionspanel.createButton(button)

  --[[ spawn currencies buttons --]]

  button.width = 500
  button.height = 100
  button.font_size = 100
  button.label = "Currency"
  button.click_function = 'doNothing'
  button.position = { - 1.25, 0.05, - 1.55 }
  optionspanel.createButton(button)

  button.width = 500
  button.height = 100
  button.font_size = 100
  button.label = "Layout"
  button.click_function = 'doNothing'
  button.position = {1, 0.05, - 1.55 }
  optionspanel.createButton(button)


  button.position = { - 1.25, 0.05, - 1.25 }
  local c = 0
  for i, v in pairs (currenciesSelectionStacklayout ) do
    c = c + 1
    local s = ''
    if i == options.currencies then
      s = '►'
    end
    button.width = (((string.len(i) + string.len(s)) * 30) + 40 )
    button.height = 100
    button.font_size = 65
    button.label = i..s
    button.click_function = 'changeCurrencies' .. c
    button.position[3] = button.position[3] + 0.25
    optionspanel.createButton(button)
    if i == options.currencies then
      for j, w in ipairs (v) do
        local s = ''
        if w == options.stacklayout then
          s = '►'
        end
        local button2 = {}
        button2.width = (((string.len(w) + string.len(s)) * 30) + 40)
        button2.font_size = 65
        button2.height = 100
        button2.label = w..s
        button2.click_function = 'setStacklayout' .. j
        button2.position = {1, 0.05, (-1 + ((j - 1) * 0.25))}
        optionspanel.createButton(button2)
      end
    end
  end
end


for i=1,10 do
  _G['setStacklayout'..i] = function(ob,pl)
    if pl then
      if not Player[pl].admin then
        return 1
      end
    end
    options.stacklayout = currenciesSelectionStacklayout[options.currencies][i]
    optionsCurrencies()
  end
end
for i=1,19 do
  _G['changeCurrencies'..i] = function(ob,pl)
    if pl then
      if not Player[pl].admin then
        return 1
      end
    end
    changeCurrenciesCo(i)
  end
end

function changeCurrenciesCo(number)
  c = 0
  for i, v in pairs (currenciesSelectionStacklayout ) do
    c = c + 1
    if(c == number) then
      options.currencies = i
      options.stacklayout = v[1]
      currencies = deepcopy(currenciesSelection[i])
    end
  end

  for i, v in ipairs(getAllObjects()) do
    -- Update Buttons
    if v.getName() == 'Back Table' then
      v.clearButtons()
      if options.changemachine then
        local offsetx = 2 / #currencies
        local button = {}

        if #currencies <= 10 then
          offsetx = 1.65 / (#currencies - 2)
        else
          offsetx = 1.65 / 8
        end
        local offsety = 2 / #currencies
        button.font_size = 150
        button.width = 450
        button.height = 250
        button.scale = {1 / 5, 1 / 5, 1 / 7.5}
        button.position = {0.83, - 0.1, - 0.9}
        button.rotation = {180, 0, 0}

        for j, w in ipairs(currencies) do
          if w.value ~= -1 then
            button.label = w.label
            button.click_function = 'changeMachineButton' .. j
            v.createButton(button)
            button.position[1] = button.position[1] - offsetx
          end
          if j == 9 then
            if #currencies - 11 > 0 then
              offsetx = 1.65 / (#currencies - 11)
              button.position = {0.83, - 0.1, - 0.8} -- spawn 1 button in the center
            else
              button.position = {0, - 0.1, - 0.8} -- spawn 1 button in the center
            end
          end
        end
      end

    end
    -- Delete Old Infinite Money Bags
    if v.getDescription() == 'Infinite Money Bag' then
      v.destruct()
    end
  end


  -- spawn infinite Bags
  local params = {}
  local posx = 2
  local posy = 2.2
  local posz = -23

  local offsetx = 4
  local offsetz = -1.7


  for i, v in ipairs (currencies) do
    local obj
    if v.value == -1 then
      break -- no dummy chips spawn
    end
    params.position = {}
    params.position.x = posx + offsetx * ((i - 1) % 2)
    params.position.y = posy
    params.position.z = posz + offsetz * math.floor((i - 1) / 2)
    --rPrint(params.position,100,i .. ": ")
    params.position[1] = params.position.x
    params.position[2] = params.position.y
    params.position[3] = params.position.z


    params.rotation = deepcopy(v.params.rotation)
    params.rotation[2] = (params.rotation[2] + 180) % 360
    params.scale = v.params.scale
    params.params = {v.name}
    params.callback = nil
    params.callback_owner = Global
    params.sound = false

    if not v.standard then
      params.type = 'Custom_Model'
      custom = {}
      tblAggregate(custom,v.custom)
      custom.type = 7 -- infinite
      custom.material = 1

      obj = spawnObject(params)
      obj.setCustomObject(custom)
      obj.setName(v.name)
      obj.setDescription("Infinite Money Bag")

      -- let chip fall into bag
      params.position.y = posy + 3
      params.position[2] = posy + 3
      custom.type = 5 -- chip
      obj = spawnObject(params)
      obj.setCustomObject(custom)
      obj.setName(v.name)
    else
      params.type = 'Infinite_Bag'
      params.callback_function = function(obj)
        obj.setScale(Vector(0.7,0.7,0.7))
      end
      obj = spawnObject(params)
      obj.setName(v.name)
      obj.setDescription("Infinite Money Bag")
      params.callback_function = nil
      -- let chip fall into bag
      params.type = "Chip_" .. v.value
      params.position.y = posy + 3
      params.position[2] = posy + 3
      obj = spawnObject(params)
      obj.setName(v.name)
    end
  end



  -- all of the convert and spawn chips functions currently require the
  --  currencies table to be sorted from max to min, with a default dummy
  --  included. Some players do not put them in the required order, but
  --  we can fix that painlessly after they've spawned in the host desired
  --  order (which is the reason people put them in the wrong order)
  table.sort(currencies,function(a,b) return a.value > b.value end)
  optionsCurrencies()
end


function spawnOrMoveClock (ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end

  log(('actionon=%s'):format(actionon or 'nil'))
  if clock ~= nil then
    if pl then
      clock.Clock.setValue(options.clocktime + 1)
      clock.Clock.pauseStart()
      clock.clearButtons()
    end
  end

  local params = {}
  params.sound = false
  if actionon then
    local playerhand = betzones[actionon].getPosition()
    local playerhandr = betzones[actionon].getRotation()
    params.scale = {0.8, 0.8, 1}
    params.position = {playerhand.x, 0.4, playerhand.z}
    params.rotation = {90, playerhandr.y, 0}
  else
    params.position = {0, 0.5, - 4}
    params.rotation = {90, 180, 0}
  end

  if actionon then
    params.type = 'Digital_Clock'
    params.callback = 'setClockTimer'
    if pl then
      params.params = {pl}
    else
      params.params = nil
    end
    if clock == nil then
      clock = spawnObject(params)
    else
      clock.setPosition(params.position)
      clock.setRotationSmooth(params.rotation, false, false)
      setClockTimer(clock)
    end
  end
end

function setClockTimer(ob, pl)
  clock.lock()
  clock.getComponent("AudioSource").set("mute",true)
  if pl then
    clock.Clock.setValue(options.clocktime + 1)
  else
    clock.Clock.setValue(options.autoclocktime + 1)
  end

  clock.Clock.pauseStart()

  if options.autoclock and options.clockpausebutton and not pl then
    local button = {}
    button.rotation = {90, 180, 0}
    button.position = { - 0.3, 0.5, - 0.15}
    button.font_size = 60
    button.width = 200
    button.height = 50
    button.label = 'Pause'
    button.click_function = 'pauseClock'
    clock.createButton(button)
  end
  startLuaCoroutine(Global, 'setClockTimerCoroutine')
end

function setClockTimerCoroutine()

  local clockGUID = clock.getGUID()

  while clock ~= nil and clock.Clock.getValue() > 0 do
    if clock.Clock.getValue() < 2 and clock.getComponent("AudioSource").get("mute")==true then
      clock.getComponent("AudioSource").set("mute",false)
    end
    coroutine.yield(0)
  end

  local t = os.clock()

  while os.clock() < t + 1 do
    coroutine.yield(0)
  end

  if clock ~= nil then
    if clockGUID ~= clock.getGUID() then
      return 1
    end
  else
    return 1
  end

  if options.autofold then
    foldPlayer()
  end

  clock.destruct()

  return 1
end

function toggleAutoBlinds(ob, pl)
  if not Player[pl].admin then return 1 end
  options.autoblinds = not options.autoblinds
  optionsHost()
end

function toggleAutoNotes(ob, pl)
  if not Player[pl].admin then return 1 end
  options.autonotes = not options.autonotes
  optionsHost()
  autoNotes()
end



function toggleAutoclock(ob, pl)
  if not Player[pl].admin then return 1 end

  options.autoclock = not options.autoclock
  optionsHost()
end

function toggleAutofold(ob, pl)
  if not Player[pl].admin then return 1 end

  options.autofold = not options.autofold
  optionsHost()
end

function decreaseAutoclockTime(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.autoclocktime > 1 then
    options.autoclocktime = options.autoclocktime - 1
  end
  optionsHost()
end

function increaseAutoclockTime(ob, pl)
  if not Player[pl].admin then return 1 end

  options.autoclocktime = options.autoclocktime + 1
  optionsHost()
end

function toggleAutoclockPauseButton(ob, pl)
  if not Player[pl].admin then return 1 end

  options.clockpausebutton = not options.clockpausebutton
  optionsHost()
end

function pauseClock(ob, pl)
  if not Player[pl].admin and pl ~= actionon then
    return 1
  end

  clock.Clock.pauseStart()
end

function decreaseClockTime5(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.clocktime > 5 then
    options.clocktime = options.clocktime - 5
  else
    return 1
  end

  optionsMain()
end
function decreaseClockTime1(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.clocktime > 1 then
    options.clocktime = options.clocktime - 1
  else
    return 1
  end

  optionsMain()
end
function increaseClockTime1(ob, pl)
  if not Player[pl].admin then return 1 end

  options.clocktime = options.clocktime + 1

  optionsMain()
end
function increaseClockTime5(ob, pl)
  if not Player[pl].admin then return 1 end

  options.clocktime = options.clocktime + 5

  optionsMain()
end

function foldPlayer(ob, pl)
  log('---foldPlayer---')
  if pl~=nil and not Player[pl].admin then return 1 end
  if actionon==nil then return 1 end
  foldPlayerHand({getDescription=function() return actionon end,}, pl)
end

function delayedAction()
  for i = 1, 2 do
    coroutine.yield(0)
  end

  action()
  return 1
end

function decreaseHybridThreshold1000(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.hybridthreshold > 1000 then
    options.hybridthreshold = options.hybridthreshold - 1000
  end

  optionsHost()
end

function decreaseHybridThreshold100(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.hybridthreshold > 100 then
    options.hybridthreshold = options.hybridthreshold - 100
  end

  optionsHost()
end

function increaseHybridThreshold100(ob, pl)
  if not Player[pl].admin then return 1 end

  options.hybridthreshold = options.hybridthreshold + 100

  optionsHost()
end

function increaseHybridThreshold1000(ob, pl)
  if not Player[pl].admin then return 1 end

  options.hybridthreshold = options.hybridthreshold + 1000

  optionsHost()
end


function decreaseConvertStackHeight1(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.convertstackheight > 1 then
    options.convertstackheight = options.convertstackheight - 1
  else
    options.convertstackheight = 0
  end

  optionsHost()
end

function increaseConvertStackHeight1(ob, pl)
  if not Player[pl].admin then return 1 end
  options.convertstackheight = options.convertstackheight + 1

  if options.convertstackheight >= 10 then
    options.convertstackheight = 10
  end
  optionsHost()
end







function doNothing()
end

function changeFontColor(ob, pl)

  if not Player[pl].admin then return 1 end

  local color = colorball.getColorTint()
  pottext.TextTool.setFontColor(color)
  currentbettext.TextTool.setFontColor(color)
  muck.setColorTint(color)
  boardobject.setColorTint(color)
end

function changeTableColor(ob, pl)

  if not Player[pl].admin then return 1 end

  local color = colorball.getColorTint()
  overlay.setColorTint(color)
end
function startNewSession(ob, pl)
  if not Player[pl].admin then
    return 1
  end
  broadcastToAll("Starting New Session","Green")
  countHandsDealt = 0
  runtimeHandsDealt = os.time()
end
function setGameModeTexas(ob, pl)

  if not Player[pl].admin or options.gamemode == 'texas' then
    return 1
  end

  options.gamemode = 'texas'
  printToAll('Game mode set to Texas Hold\'em. See rules in the notebook if you don\'t know how to play.', {1, 1, 1})

  optionsHost()
end
function setGameModeOmaha(ob, pl)

  if not Player[pl].admin or options.gamemode == 'omaha' then
    return 1
  end

  options.gamemode = 'omaha'
  printToAll('Game mode set to Omaha Hold\'em. See rules in the notebook if you don\'t know how to play.', {1, 1, 1})

  optionsHost()
end
function setGameModePineapple(ob, pl)

  if not Player[pl].admin or options.gamemode == 'pineapple' then
    return 1
  end

  options.gamemode = 'pineapple'
  printToAll('Game mode set to Pineapple. See rules in the notebook if you don\'t know how to play.', {1, 1, 1})

  optionsHost()
end
function setGameModeFiveCard(ob, pl)

  if not Player[pl].admin or options.gamemode == 'fivecard' then
    return 1
  end

  options.gamemode = 'fivedraw'
  printToAll('Game mode set to Five Card Draw. See rules in the notebook if you don\'t know how to play.', {1, 1, 1})

  optionsHost()
end

function getParams(obj)
  local params = {}
  params.position = obj.getPosition()
  params.scale = obj.getScale()
  params.rotation = obj.getRotation()

  return params
end

function setInteractableOverlay(ob, pl)
  if Player[pl].admin then
    overlay.interactable = not overlay.interactable
    optionsThemes()
  end
end
--setTheme1, setTheme2, setTheme3, setTheme4, setTheme5, setTheme6,
--setTheme7, setTheme8, setTheme9, setTheme10, setTheme11,
--setTheme12,

for i=1,12 do
  _G['setTheme'..i] = function(ob,pl)
    if Player[pl].admin then
      themeindex = i
      subthemeindex = i
      optionsThemes()
    end
  end
end

--setSubtheme1, setSubtheme2, setSubtheme3, setSubtheme4, setSubtheme5, setSubtheme6,
--setSubtheme7, setSubtheme8, setSubtheme9, setSubtheme10, setSubtheme11,
--setSubtheme12,

for i=1,12 do
  _G['setSubtheme'..i] = function(ob,pl)
    if Player[pl].admin then
      subthemeindex = i
      optionsThemes()
    end
  end
end

--overlay1 to overlay12
for i=1,12 do
  _G[('overlay%d'):format(i)] = function(ob, pl)
    if pl~=nil and Player[pl].admin then
      changeOverlay(themes[themeindex][subthemeindex][i])
    end
  end
end

function getObjectFromG(params)
  local obj = nil
  for i,obj in next, getAllObjects() do
    for k,key in next, params do
      local func = obj[k]
      if type(func) == 'function' then
        if (func() == key) then return obj end
      end
    end
  end
  return nil
end
function chooseOp(cond,a,b)
  -- (Cond) ? a : b
  if cond then
    return a
  else
    return b
  end
end
function changeOverlay(params)
  if overlay==nil then overlay = getObjectFromG({getName="Table Overlay"}) end

  local custom = overlay.getCustomObject()
  custom.diffuse = params.diffuse
  custom.normal = (params.normal~=nil and params.normal) or ''
  custom.material = (params.material~=nil and params.material) or 0
  custom.specular_sharpness = (params.specular_sharpness~=nil and params.specular_sharpness) or 0.1
  custom.specular_intensity = (params.specular_intensity~=nil and params.specular_intensity) or {r=1,g=1,b=1}
  custom.specular_color = (params.specular_color~=nil and params.specular_color) or 3
  custom.fresnel_strength = (params.fresnel_strength~=nil and params.fresnel_strength) or 0.1
  if params.cast_shadows~=nil then
    custom.cast_shadows = params.cast_shadows
  else
    custom.cast_shadows = true
  end
  --log(custom)
  local fbool = overlay.interactable
  overlay.setCustomObject(custom)
  overlay = overlay.reload()
  overlay.interactable = fbool
  overlay.setColorTint({1, 1, 1})
end

--[[ Destroy options panel --]]
function destroyOptionsPanel(ob, pl)

  if pl and not Player[pl].admin then
    return 1
  end

  optionspanel.clearButtons()
  optionspanel.clearInputs()
  optionspanel.destruct()
  optionspanel = nil
  if colorball ~= nil then
    colorball.destruct()
  end
end

function toggleBlindsSkipAFK(ob, pl)

  if not Player[pl].admin then return 1 end

  options.blindsskipafk = not options.blindsskipafk

  optionsHost()
end

function darkenOverlay(ob, pl)

  if not Player[pl].admin then return 1 end

  local color = overlay.getColorTint()
  for i, v in pairs (color) do
    if v >= 0.05 then
      color[i] = v - 0.05
    else
      color[i] = 0
    end
  end

  overlay.setColorTint(color)
end

function lightenOverlay(ob, pl)

  if not Player[pl].admin then return 1 end

  local color = overlay.getColorTint()
  for i, v in pairs (color) do
    if v <= 1.95 then
      color[i] = v + 0.05
    else
      color[i] = 2
    end
  end

  overlay.setColorTint(color)
end

function changeCollectMethod(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.collectmethod == 'move' then
    options.collectmethod = 'convert'
    print('Collect method set to: Convert. Bets will now be converted up when collected. Bets will be convert with at least a height of ' .. options.convertstackheight)
  elseif options.collectmethod == 'convert' then
    options.collectmethod = 'hybrid'
    print('Collect method set to: Hybrid. Bets will be converted up once the pot is over $'..options.hybridthreshold..'.')
  elseif options.collectmethod == 'hybrid' then
    options.collectmethod = 'move'
    print('Collect method set to: Move. Bets will be moved into the pot.')
  else
    options.collectmethod = 'move'
    print('Unknown collect method found: Collect method set to: Move. Bets will be moved into the pot.')
  end

  optionsHost()
end
function updatePatchTab()
  local notes = Notes.getNotebookTabs()
  local addendumFound = false
  for i = #notes, 1, -1 do
    if notes[i].title == "PatchNotes" then
      Notes.removeNotebookTab(notes[i].index)
    end
  end
  local params = {
    title = "PatchNotes",
    body = patchNotes_formatted,
    color = "Grey"
    }
    Notes.addNotebookTab(params)
end
function checkAndResetNotes(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  -- Remove all system notes
  local notes = Notes.getNotebookTabs()
  local addendumFound = false
  for i = #notes, 1, -1 do
    if notes[i].title == "Server Rules" then
      Notes.removeNotebookTab(notes[i].index)
    end
    if notes[i].title == "Server Blinds" then
      Notes.removeNotebookTab(notes[i].index)
    end
    if notes[i].title == "Addendum" then
      addendumFound = true
    end
    if notes[i].title == "PatchNotes" then
      Notes.removeNotebookTab(notes[i].index)
    end
  end
  local params
  params = {
    title = "Server Blinds",
    body = "[ffffff]Small blind: [007700]$SMALL_BLIND\n[ffffff]Big blind: [007700]$BIG_BLIND\n[ffffff]Max Buyin: [007700]$BUYIN\n",
    color = "White"
  }
  Notes.addNotebookTab(params)
  params = {
    title = "Server Rules",
    body = [[
    [ffffff]Min bet: [007700]$MIN_BET[-]
Preflop
    [ffffff]Max bet: [007700]$PREFLOP_MAX_BET[-]
    [ffffff]Min raise: [007700]$PREFLOP_MIN_RAISE[-]
Postflop
    [ffffff]Max bet: [ff3300]$POSTFLOP_MAX_BET[-]
    [ffffff]Min raise: [ff3300]$POSTFLOP_MIN_RAISE[-]
    ]],
    color = "White"
  }
  Notes.addNotebookTab(params)
  if not addendumFound then
    params = {
    title = "Addendum",
    body = [[[69696969]Put your addendum rules here![-] ]],
    color = "White"
    }
    Notes.addNotebookTab(params)
  end
  updatePatchTab()
  if options.autonotes then autoNotes() end
end
function cAndRObjs(ob,pl,value)
  sidepotcalculated = false

  local meshes = {'http://pastebin.com/raw/133e1Z0L', 'http://pastebin.com/raw/U9rtcyua', 'http://pastebin.com/raw/uvvaV5Np', 'https://raw.githubusercontent.com/johnpenny/tts-poker-table-coverings/master/poker-table-boards.obj'}
  local diffuses = {'http://i.imgur.com/QinS8Hc.png', 'http://i.imgur.com/hIKi7Mq.png', 'http://i.imgur.com/novIseH.png', 'http://i.imgur.com/jPnTE9e.png'}
  local allobjects = getAllObjects()
  local objects = {'muck', 'boardobject', 'potobject', 'overlay'}
  local objectnames = {'Muck', 'Board', 'Pot', 'Overlay'}
  local objectexists = {false, false, false, false} -- muck, board, pot, overlay
  local positions = {{ - 9.175, 1.35, - 1.9}, {0, 1.35, - 2}, {0, 1.35, - 7.5}, {0, 0.7, 0}}
  local custom = {}
  local params = {}
  local textparams = {}
  local function textparams_t(lname)
    local textparams_tbl = {}
    textparams_tbl.position = {0,0,0}
    textparams_tbl.rotation = {0,0,0}
    textparams_tbl.type = '3DText'
    textparams_tbl.sound = false
    textparams_tbl.callback_function = function(obj)
        if lname~=nil then
            obj.setName('auto_'..lname)
            _G[lname..'GUID'] = obj.getGUID()
        end
    end
    return textparams_tbl
  end
  -- mark unlost objects as existing
  for i, v in ipairs (objects) do
    if Global.getVar(v) ~= nil then
      objectexists[i] = true
      --print (objectnames[i]..' exists.')
    end
  end

  -- search for objects and reassign any that are found
  for i, v in ipairs (allobjects) do
    custom = v.getCustomObject()
    for j, w in ipairs (meshes) do
      if custom.mesh == w then
        if not objectexists[j] then
          Global.setVar(objects[j], v)
          objectexists[j] = true
          print(objectnames[j]..' reassigned.')
        end
      end
    end
  end

  -- respawn nonexistent objects
  for i, v in ipairs (objectexists) do
    if not v then
      params.type = 'Custom_Model'
      params.position = positions[i]
      params.rotation = {0, 0, 0}
      params.sound = false
      custom.mesh = meshes[i]
      custom.diffuse = diffuses[i]
      custom.type = 4

      local o = spawnObject(params)
      o.setCustomObject(custom)

      if i ~= 4 then
        o.setLuaScript(scripts[i])
      else
        o.lock()
        o.interactable = false
        o.setName('Table Overlay')
      end

      Global.setVar(objects[i], o)

      print (objectnames[i]..' respawned.')
    end
  end
  local actionscript = "blubb"

  --[[ Check and respawn texts --]]
  if actiontext == nil then
    actiontext = getObjectFromGUID(actiontextGUID)~=nil and getObjectFromGUID(actiontextGUID) or getObjectFromG({getName="auto_actiontext"})
    if actiontext == nil then
      textparams = textparams_t('actiontext')
      textparams.position = {0, 0, 0}
      textparams.rotation = {0, 0, 0}
      actiontext = spawnObject(textparams)
      actiontext.TextTool.setValue('Action')
      actiontext.TextTool.setFontSize(68)
      actiontext.setLuaScript([[t = nil -- time at loading
      speed = 10 -- controls how fast the action text pulsates
      scalezero = 1 -- scale of text at its smallest point
      scalemax = 1.5 -- scale of text at its largest point

      function onload()
        t = os.clock()
      end

      function update()
        local x = scalezero + ((math.sin((os.clock() - t) * speed) + 1) * ((scalemax - scalezero) / 2))
        self.setScale({x, x, x})
      end]])
    end
  end
  if smallBlindToken == nil then
    smallBlindToken = spawnObjectJSON({
      json              = [[{ "Name": "3DText", "Transform": { "posX": 5.018901, "posY": 1.32648253, "posZ":
-4.25648451, "rotX": 90.0, "rotY": 180.0, "rotZ": 0.0, "scaleX": 2.0, "scaleY":
1.0, "scaleZ": 1.0 }, "Nickname": "", "Description": "", "GMNotes": "",
"ColorDiffuse": { "r": 1.0, "g": 1.0, "b": 1.0 }, "Locked": true, "Grid": true,
"Snap": true, "IgnoreFoW": false, "MeasureMovement": false, "DragSelectable":
true, "Autoraise": true, "Sticky": true, "Tooltip": true, "GridProjection":
false, "HideWhenFaceDown": false, "Hands": false, "Text": { "Text": "Small Blind: $500", "colorstate": { "r": 1.0, "g": 1.0, "b": 1.0 }, "fontSize": 28 },
"LuaScript": "", "LuaScriptState": "", "XmlUI": "", "GUID": "6cfc37"
}]],
    })
  end
  if bigBlindToken == nil then
    bigBlindToken = spawnObjectJSON({
      json              = [[{ "Name": "3DText", "Transform": { "posX": -4.97972775, "posY": 1.32648349,
"posZ": -4.298301, "rotX": 90.0, "rotY": 180.0, "rotZ": 0.0, "scaleX": 1.0,
"scaleY": 1.0, "scaleZ": 1.0 }, "Nickname": "", "Description": "", "GMNotes":
"", "ColorDiffuse": { "r": 1.0, "g": 1.0, "b": 1.0 }, "Locked": true, "Grid":
true, "Snap": true, "IgnoreFoW": false, "MeasureMovement": false,
"DragSelectable": true, "Autoraise": true, "Sticky": true, "Tooltip": true,
"GridProjection": false, "HideWhenFaceDown": false, "Hands": false, "Text": {
"Text": "Big Blind: $1000", "colorstate": { "r": 1.0, "g": 1.0, "b": 1.0 },
"fontSize": 32 }, "LuaScript": "", "LuaScriptState": "", "XmlUI": "", "GUID":
"9904f3"
}]],
    })
  end
  if pottext == nil then
    pottext = getObjectFromGUID(pottextGUID)~=nil and getObjectFromGUID(pottextGUID) or getObjectFromG({getName="auto_pottext"})
    if pottext==nil then
      log('new pottext')
      pottext = spawnObjectJSON({json=[[{"GUID":"ef2566","Name":"3DText","Transform":{"posX":0.00000190734863,"posY":1.33000183,"posZ":0.00000381469727,"rotX":90,"rotY":180,"rotZ":0,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"auto_pottext","Description":"","GMNotes":"","ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"Text":{"Text":"Pot: $0","colorstate":{"r":1,"g":1,"b":1},"fontSize":64},"LuaScript":"","LuaScriptState":"","XmlUI":""}]]})
    else
      pottext.TextTool.setFontSize(64)
      pottext.TextTool.setValue('Pot: $0')
    end
  end
  if currentbettext == nil then
    currentbettext = getObjectFromGUID(currentbettextGUID)
    if currentbettext==nil then
      log('new currentbettext')
      currentbettext = spawnObjectJSON({json=[[{"GUID":"8b3c5e","Name":"3DText","Transform":{"posX":0.00000190734863,"posY":1.33000183,"posZ":1.00000381,"rotX":90,"rotY":180,"rotZ":0,"scaleX":1,"scaleY":1,"scaleZ":1},"Nickname":"auto_currentbettext","Description":"","GMNotes":"","ColorDiffuse":{"r":1,"g":1,"b":1},"LayoutGroupSortIndex":0,"Locked":true,"Grid":true,"Snap":true,"IgnoreFoW":false,"MeasureMovement":false,"DragSelectable":true,"Autoraise":true,"Sticky":true,"Tooltip":true,"GridProjection":false,"HideWhenFaceDown":false,"Hands":false,"Text":{"Text":"Current Bet: $0","colorstate":{"r":1,"g":1,"b":1},"fontSize":52},"LuaScript":"","LuaScriptState":"","XmlUI":""}]]})
    else
      currentbettext.TextTool.setFontSize(52)
      currentbettext.TextTool.setValue('Current Bet: $0')
    end
  end
  if playerpottext == nil then
    textparams = textparams_t('playerpottext')
    textparams.position = {0, 0, 1}
    playerpottext = spawnObject(textparams)
    playerpottextGUID = playerpottext.getGUID()
  end
  playerpottext.TextTool.setFontSize(52)
  if playercurrentbettext == nil then
    textparams = textparams_t('playercurrentbettext')
    textparams.position = {0, 0, 2}
    playercurrentbettext = spawnObject(textparams)
    playercurrentbettextGUID = playercurrentbettext.getGUID()
  end
  playercurrentbettext.TextTool.setFontSize(52)

  if playerbetboundstext == nil then
    playerbetboundstext = getObjectFromG({getName='playerbetboundstext'})
    if playerbetboundstext == nil then
      textparams = textparams_t('playerbetboundstext')
      textparams.position = {0, 0, 3}
      playerbetboundstext = spawnObject(textparams)
    end
    playerbetboundstextGUID = playerbetboundstext.getGUID()
  end
  playerbetboundstext.TextTool.setFontSize(52)

  function playerTextSetup(obj, v, label)
    local playerhand = Player[v].getHandTransform(1)
    local r = {90, playerhand.rotation.y, 0}
    obj.setRotation(r)
    local lname = 'auto_' .. label .. '_'..v
    obj.setName(lname)
    _G[label..'GUIDs'][ColorIndexes[v]] = obj.getGUID()
  end
  for i, v in ipairs(colors) do
    local color = v
    if bettext[v] == nil then
      textparams = textparams_t()
      local playerhand = Player[v].getHandTransform(1)
      textparams.position = {playerhand.position.x + playerhand.forward.x * 10 + playerhand.right.x * 4, 1.4, playerhand.position.z + playerhand.forward.z * 10 + playerhand.right.z * 4}
      textparams.callback_function = function(obj)
        playerTextSetup(obj, v, 'bettext')
        obj.TextTool.setFontColor(Color[v])
        obj.TextTool.setFontSize(64)
        obj.setValue('$0')
      end
      bettext[v] = spawnObject(textparams)
    end
    if sidepottext[v] == nil then
      textparams = textparams_t()
      local playerhand = Player[v].getHandTransform(1)
      textparams.position = {playerhand.position.x + playerhand.forward.x * 10.8, 1.33, playerhand.position.z + playerhand.forward.z * 10.8}
      textparams.callback_function = function(obj) playerTextSetup(obj,v,'sidepottext') end
      sidepottext[v] = spawnObject(textparams)
      local obj = sidepottext[v]
      Wait.condition(function()
        playerTextSetup(obj,color,'sidepottext')
        obj.TextTool.setFontColor(Color[v])
        obj.TextTool.setFontSize(64)
        obj.setValue('spawned')
      end, function() return obj.spawning end, 1, function() print('TIMEOUT ..' .. logString(obj)) end)
    end
    if tablezonetext[v] == nil then
      textparams = textparams_t()
      local chips = {}
      local playerhand = Player[v].getHandTransform(1)
      textparams.position = {playerhand.position.x + playerhand.forward.x * - 2.5 + playerhand.right.x * 3, 1.45, playerhand.position.z + playerhand.forward.z * - 2.5 + playerhand.right.z * 4}
      textparams.callback_function = function(obj) playerTextSetup(obj,v,'tablezonetext') end
      tablezonetext[v] = spawnObject(textparams)
      local obj = tablezonetext[v]
      Wait.condition(function()
        playerTextSetup(obj,color,'tablezonetext')
        obj.TextTool.setFontColor(Color[v])
        obj.TextTool.setFontSize(64)
        obj.setValue(" ")
        if options.displayplayermoney then
          local money = getChipValues(tablezones[v], chips)
          obj.setValue("$" .. format_int(money))
        end
      end, function() return obj.spawning end, 1, function() print('TIMEOUT ..' .. logString(obj)) end)
    end
  end
end
function checkAndRespawnObjectsFromMenu(ob,pl,value)
  if pl~=nil and not Player[pl].admin then return 1 end
  -- murder text if clicked by button
  for i, obj in next, Global.getObjects() do if obj.type == '3D Text' then obj.destruct() end end
  Wait.frames(function() cAndRObjs(ob,pl,value) end, 1)
end
function checkAndRespawnObjects(ob, pl, value)
  if pl~=nil and not Player[pl].admin then return 1 end
  -- murder text if clicked by button
  if ob~=nil and value==true then
    for i, obj in next, Global.getObjects() do if obj.type == '3D Text' then obj.destruct() end end
    Wait.frames(function() cAndRObjs(ob,pl,value) end, 1)
  else
    cAndRObjs(ob,pl,value)
  end
end

function toggle_betoptionsEnforce(ob, pl)
  if not Player[pl].admin then return 1 end
  options.betoptionsEnforce = not options.betoptionsEnforce
  betsOptionsHost()
end

function togglePlayerClickAction(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.playerclickaction then
    options.playerclickaction = false
    print ('The Action button will now remain in a static position for the host to click.')

    local buttons = actionbutton.getButtons()

    buttons[1].label = 'Action'

    actionbutton.editButton(buttons[1])
  else
    options.playerclickaction = true
    print ('The action button will now be moved in front of the player whose turn it is to act.')

    local buttons = actionbutton.getButtons()

    buttons[1].label = 'Done'

    actionbutton.editButton(buttons[1])
  end

  optionsHost()
end

--optionsHost functions
optionsHost_toggles = {}
optionsHost_toggles[#optionsHost_toggles+1] = {'EnforcePotLimit','enforcepotlimit'}
optionsHost_toggles[#optionsHost_toggles+1] = {'EnforceFoldInTurn','enforcefoldinturn'}
optionsHost_toggles[#optionsHost_toggles+1] = {'EnforceDoubleRaise','enforcedoubleraise'}
-- createPlayerButtons formulations
optionsHost_toggles[#optionsHost_toggles+1] = {'LockBags',string.lower('LockBags')}
optionsHost_toggles[#optionsHost_toggles+1] = {'StarterPack',string.lower('StarterPack')}
optionsHost_toggles[#optionsHost_toggles+1] = {'AutoButton',string.lower('AutoButton')}
optionsHost_toggles[#optionsHost_toggles+1] = {'LockChips','lockchips'}
optionsHost_toggles[#optionsHost_toggles+1] = {'AutoAction','autoaction'}
optionsHost_toggles[#optionsHost_toggles+1] = {'UseRandomAtmospheric','userandomatmospheric'}
for i, rec in next, optionsHost_toggles do
  log(i..': creating .. toggle'..rec[1])
  _G['toggle'..rec[1]] = function(ob, pl)
    if not Player[pl].admin then return 1 end
    options[rec[2]] = not options[rec[2]]
    if rec[3]~=nil then _G[rec[3]]() end
    optionsHost()
  end
end

optionsHostPlayer_toggles = {}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayPlayerBet',string.lower('DisplayPlayerBet')}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayConvert',string.lower('Convert'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayBetAmount',string.lower('betamount'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplaySortChips',string.lower('SortChips'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayTopOff',string.lower('TopOff'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayAllIn',string.lower('AllIn'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'DisplayAFK',string.lower('AFK'),'createPlayerButtons','playerbuttons'}
optionsHostPlayer_toggles[#optionsHostPlayer_toggles+1] = {'LoadSaveBag',string.lower('LoadSaveBag'),'createPlayerButtons','playerbuttons'}

for i, rec in next, optionsHostPlayer_toggles do
  log(i..': creating .. toggle'..rec[1])
  _G['toggle'..rec[1]] = function(ob, pl)
    if not Player[pl].admin then return 1 end
    if rec[4]~=nil and rec[4]~='' then
      options[rec[4]][rec[2]] = not options[rec[4]][rec[2]]
    else
      options[rec[2]] = not options[rec[2]]
    end
    if rec[3]~=nil then _G[rec[3]]() end
    optionsUX()
  end
end

optionsUX_toggles = {}
optionsUX_toggles[#optionsUX_toggles+1] = {'ActionMessage',string.lower('ActionMessage')}
optionsUX_toggles[#optionsUX_toggles+1] = {'ActionBroadcast',string.lower('ActionBroadcast')}
optionsUX_toggles[#optionsUX_toggles+1] = {'StageBroadcast',string.lower('StageBroadcast')}
optionsUX_toggles[#optionsUX_toggles+1] = {'CurrentBetMessage',string.lower('CurrentBetMessage')}
optionsUX_toggles[#optionsUX_toggles+1] = {'Better',string.lower('Better')}
optionsUX_toggles[#optionsUX_toggles+1] = {'AllinBroadcast',string.lower('AllinBroadcast')}
optionsUX_toggles[#optionsUX_toggles+1] = {'FaceDownCards',string.lower('FaceDownCards')}
optionsUX_toggles[#optionsUX_toggles+1] = {'Leaderboard','leaderboard','showHideLeaderboard'}


for i, rec in next, optionsUX_toggles do
  log(i..': creating .. toggle'..rec[1])
  _G['toggle'..rec[1]] = function(ob, pl)
    if not Player[pl].admin then return 1 end
    options.uxoptions[rec[2]] = not options.uxoptions[rec[2]]
    if rec[3]~=nil then _G[rec[3]]() end
    optionsUX()
  end
end
function showHideLeaderboard()
  if options.uxoptions.leaderboard then
    for plc, lboard in next, UILeaderBoards do
      Global.UI.show(lboard.parent)
      Global.UI.setAttribute(lboard.parent,"visibility",plc)
    end
  else
    for plc, lboard in next, UILeaderBoards do
      Global.UI.hide(lboard.parent)
    end
  end
end
function togglePotMessage(ob, pl)
  if not Player[pl].admin then return 1 end

  if options.uxoptions.potmessage >= 2 then
    options.uxoptions.potmessage = 0
  else
    options.uxoptions.potmessage = options.uxoptions.potmessage + 1
  end

  optionsUX()
end

function turnNoise(params)
  if options.uxoptions.turnsounds then
    --params.color : color of player to make noise for
    Turns.order = {params.color,}
    Turns.enable = true
    Wait.frames(function() Turns.enable = false end, 10)
  end
end

function printMessages()
  tlog('in:printMessages')
  local p = ''

  for i, v in ipairs(colors) do
    if string.find(printstring, v) then
      p = v
      break
    end
  end

  if string.find(printstring, 'bet') or string.find(printstring, 'raise') then
    if options.uxoptions.currentbetmessage then
      local s = 'Current bet: $'..currentbet
      if options.uxoptions.better then
        if string.find(printstring, 'bet') then
          if Player[p].steam_name then
            s = s..', made by [' .. Color[p]:toHex() .. ']'..Player[p].steam_name..'[ffffff].'
          else
            s = s..', made by [' .. Color[p]:toHex() .. ']'..p..'[ffffff].'
          end
        else
          if Player[p].steam_name then
            s = s..', raised by [' .. Color[p]:toHex() .. ']'..Player[p].steam_name..'[ffffff].'
          else
            s = s..', raised by [' .. Color[p]:toHex() .. ']'..p..'[ffffff].'
          end
        end
      else
        s = s..'.'
      end

      printToAll(s, {1, 1, 1})
    end
  end


  if options.uxoptions.allinbroadcast and string.find(printstring, 'allin') then
    if string.find(printstring, p) then
      if Player[p].steam_name then
        broadcastToAll ('[' .. Color[p]:toHex() .. ']'..Player[p].steam_name..'[ffffff] is all in!', {1, 1, 1})
      else
        broadcastToAll ('[' .. Color[p]:toHex() .. ']'..p..'[ffffff] is all in!.', {1, 1, 1})
      end
    end
  end

  if string.find(printstring, 'action') and actionon then
    turnNoise({color=actionon})
    if options.uxoptions.actionmessage then
      if Player[actionon].steam_name then
        printToAll ("Action on "..'[' .. Color[actionon]:toHex() .. ']'..Player[actionon].steam_name..'[ffffff].', {1, 1, 1})
      else
        printToAll ("Action on "..'[' .. Color[actionon]:toHex() .. ']'..actionon..'[ffffff].', {1, 1, 1})
      end
    end

    if options.uxoptions.actionbroadcast and Player[actionon].seated then
      broadcastToColor("Action on you!", actionon, {1, 0, 0})
    end
  end

  if options.uxoptions.potmessage > 0 then
    if (options.uxoptions.potmessage >= 1 and string.find(printstring, 'collect')) or (options.uxoptions.potmessage > 1 and string.find(printstring, 'pot')) then
      printToAll('Pot: $'..pot..'.', {1, 1, 1})
    end
  end

  printstring = ''
  tlog('out:printMessages')
end

function onObjectDropped(player, object)
  tlog('in:onObjectDropped')
  local oName = object.getName()
  if string.match(oName, '^%+(%d+)')~=nil then --'+60 Seconds'
    local return_pos = Vector({ ["x"] = -0.395369440317154,["y"] = -0.492920637130737,["z"] = -1.40896558761597,})
    local addTime = tonumber(string.match(oName, '^%+(%d+)'))
    if player == actionon and indexTable(betzones[player].getObjects(), object) then
      if clock then
        clock.setValue(clock.getValue() + addTime)
        clock.Clock.pauseStart()
        object.destruct()
        broadcastToAll(("Added %d seconds to shotclock"):format(addTime),"Green")
      else
        -- send it back
        -- doesn't work if black. gotta put in the pick up category too.
        object.setPositionSmooth(betzones[player].positionToWorld(return_pos), false, false)
        object.setRotationSmooth(betzones[player].getRotation()+Vector(0,-90,0), false, false)
      end
    elseif player ~= actionon then

    end
    return 1
  end
  if oName == '' and object.type == 'Bag' then

    for i, v in ipairs(colors) do
      if objectExistsInList(betzones[v].getObjects(), object) then
        calculatePots()
      end
      if objectExistsInList(tablezones[v].getObjects(), object) or objectExistsInList(backtablezones[v].getObjects(), object) then
        object.setName(Player[v].steam_name)
        object.setDescription(Player[v].steam_id)
        return 1
      end
    end
  end
  if oName == 'Busted' or oName == 'Bust Counter' then

    for i, v in ipairs(colors) do
      if objectExistsInList(tablezones[v].getObjects(), object) or objectExistsInList(backtablezones[v].getObjects(), object) then
        if oName == 'Bust Counter' then
        object.setDescription("Bust Counter: " .. Player[v].steam_id)
        elseif oName == 'Busted' then
        object.setDescription(Player[v].steam_id)
        end
        object.setName(Player[v].steam_name)
        return 1
      end
    end
  end
  if handinprogress and object.type == 'Card' then
    local plc = nil
    for i, v in next, dGetSeatedPlayers() do
      if inTable(holecards[v],object.getGUID()) or inTable(revealedcards[v],object.getGUID()) then
        plc = v
        break
      end
    end
    if plc~=nil then
      if handsshown[plc] then return 0 end -- if the player already revealed their hand, then abort function. this is to prevent players from spamming chat by repeatedly picking up and dropping their cards
      for i, v in ipairs (colors) do
        for j, w in ipairs (Player[v].getHandObjects()) do
          if w == object then return 0 end -- they dropped it into their hand, so abort function
        end
      end
      local r = object.getRotation()
      if (r.x < 80 or r.x > 280) and (r.z < 80 or r.z > 280) then -- it's face-up
        for i, v in ipairs (holecards[plc]) do
          if v == object.getGUID() and not inTable(revealedcards[plc], object.getGUID()) then
            table.insert(revealedcards[plc], table.remove(holecards[plc], i))
            break
          end
        end
        if #holecards[plc] == 0 then
          handsshown[plc] = true
          evaluateHand(plc,true)
        end
      end
    end
  end

  if object.type == "Bag" and Player[player].admin then
      if objectExistsInList(gamesavezone.getObjects(), object) then
        if savebag ~= nil and savebag.getGUID() == object.getGUID() then return 1 end
        newSavebag(object, player)
        checkDuplicates()
      end
  end
  if isCurrency(object) then

    -- currentbet = 0
    if inTable(blindszones[1].getObjects(),object) or inTable(blindszones[2].getObjects(),object) then setBlinds() end
    if (os.time() - lastCollectTime) < 0.25 then

      return 1
    else
      Wait.time(function() lastCollectTime=os.time() calculatePots() end, 0.24)

      createPlayerButtons()
      lastCollectTime = os.time()
    end

    for i, v in ipairs (colors) do
      local chips = {}
      local value = "$" .. getChipValues(tablezones[v], chips)
      playerbets[v] = getChipValues(betzones[v], chips)
      if playerbets[v] > currentbet then
        currentbet = playerbets[v]
        better = v
      end
      for j, w in ipairs (chips) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
      for j, w in ipairs (backtablezones[v].getObjects()) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
      for j, w in ipairs (betzones[v].getObjects()) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
    end
    object.setColorTint({1, 1, 1})
  end
  tlog('out:onObjectDropped')
end

function onObjectSpawn(object)
  tlog('in:onObjectSpawn')
  if isCurrency(object) then
    for i, v in ipairs (colors) do
      for j, w in ipairs (tablezones[v].getObjects()) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
      for j, w in ipairs (backtablezones[v].getObjects()) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
      for j, w in ipairs (betzones[v].getObjects()) do
        if w == object then
          object.setColorTint(chiptints[v])
          return 1
        end
      end
    end
    object.setColorTint({1, 1, 1})
  end
  tlog('out:onObjectSpawn')
end

function isCurrency(object)
  if object.type == 'Chip' and not string.match(object.getName(), '^%+(%d+)') then
    if object.getValue() then
      return true
    elseif currencyToNumber(object.getName()) ~= nil then
      if currencyToNumber(object.getName()) > 0 then
        return true
      end
    else
      return false
    end
  end
  return false
end
function getPlayersHoleCards()
  for i, v in ipairs (players) do
    for j, w in ipairs (Player[v].getHandObjects()) do
      table.insert(holecards[v], w.getGUID())
    end
  end
  return holecards
end
function evaluateHand_Texas(player)
  local sevencards = getSevenCards(player)
  local handvals = {}
  handEvaluator = handEvaluator or getObjectFromG({getName="RomanticFool's Hand Ranker"})
  if handEvaluator ~= nil then
    local cardinput = {}
    for i,cardobj in next, sevencards do
      cardinput[#cardinput+1] = {nameToChar(cardobj.getName()),cardobj.getDescription(),cardobj.guid, inTable(revealedcards[player], cardobj.guid), cardobj.guid}
    end
    handvals = handEvaluator.call("getRanking_Binned",{{choose=5, objs=cardinput},})
  else
    broadcastToAll('Falling Back to Old Hand Evaluator - no rankings!')
    if not sevencards then return 0 end

    local cards = {['Spades'] = {}, ['Hearts'] = {}, ['Clubs'] = {}, ['Diamonds'] = {}}
    local suits = {'Spades', 'Hearts', 'Clubs', 'Diamonds'}
    local ranks = {'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace'}
    local handranks = {'Royal Flush', 'Straight Flush', 'Four of a Kind', 'Full House', 'Flush', 'Straight', 'Three of a Kind', 'Two Pairs', 'One Pair', 'High Card'}

    -- Populate cards table
    for i, v in ipairs (sevencards) do
      for j, w in ipairs (ranks) do
        if getConvertedName(v.getName()) == w then
          table.insert(cards[v.getDescription()], nameToValue(w))
          break
        end
      end
    end
    -- Sort tables
    for i, v in ipairs (suits) do
      table.sort(cards[v])
    end
    -- Check for each type of hand until a hand is found

    -- Royal flush

    local flushexists = false
    local flushsuit = ''

    for i, v in ipairs (suits) do
      if #cards[v] >= 5 then -- a flush exists at least
        flushexists = true
        flushsuit = v
        local value = 0
        for j = 1, 5 do
          value = value + cards[v][#cards[v] - (j - 1)]
        end
        if value == 60 then -- it's a royal flush!
          broadcastToAll(player..' shows a '..flushsuit..' Royal Flush!', {0, 1, 0})
          return values['royalflush']
        end
      end
    end

    -- Straight Flush

    if flushexists then
      local consecutives = 0
      local highcard = 0
      local lowconsecutives = false
      local ace = false
      for i, v in ipairs (cards[flushsuit]) do
        if i == 1 then
          consecutives = 1
        else
          if v == (cards[flushsuit][i - 1] + 1) then
            consecutives = consecutives + 1
            if consecutives >= 5 then
              highcard = v
            elseif consecutives == 4 and v == 5 then
              lowconsecutives = true
            end
          else
            consecutives = 1
          end
          if v == 14 then
            ace = true
          end
        end
      end

      -- check for straight flush to the 5
      if highcard == 0 and ace and lowconsecutives then highcard = 5 end

      if highcard > 0 then
        broadcastToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows a '..flushsuit..' Straight Flush to the '..valueToName(highcard), {1, 1, 1})
        return values['straightflush']+highcard
      end
    end

    -- Create list of all cards based on rank to use in finding pairs, etc.

    local cards2 = {}

    for i, v in ipairs (suits) do
      for j, w in ipairs (cards[v]) do
        table.insert(cards2, w)
      end
    end

    table.sort(cards2)
    local quantities = {}

    for i, v in ipairs (cards2) do
      if not quantities[valueToName(v)] then
        quantities[valueToName(v)] = 1
      else
        quantities[valueToName(v)] = quantities[valueToName(v)] + 1
      end
    end
    local quads = {}
    local trips = {}
    local pairs = {}
    local singles = {}
    for i, v in ipairs (ranks) do
      if quantities[v] == 4 then table.insert(quads, v) end
      if quantities[v] == 3 then table.insert(trips, v) end
      if quantities[v] == 2 then table.insert(pairs, v) end
      if quantities[v] == 1 then table.insert(singles, v) end
    end

    -- Check for quads
    if #quads > 0 then
      broadcastToAll('[' .. Color[player]:toHex() .. ']'..player..' shows Four of a Kind: '..quads[#quads]..'s!', {1, 1, 1})
      return values['quads'] + next(singles,nil)
    end

    -- Check for full house
    if #trips > 0 and #trips + #pairs >= 2 then
      if #pairs > 0 then
        printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows a Full House: '..trips[#trips]..'s full of '..pairs[#pairs]..'s!', {1, 1, 1})
      else
        printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows a Full House: '..trips[#trips]..'s full of '..trips[#trips - 1]..'s!', {1, 1, 1})
      end
      return 0
    end

    -- Flush
    if flushexists then
      printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows a '..flushsuit..' Flush, '..valueToName(cards[flushsuit][#cards[flushsuit]])..' high!', {1, 1, 1})
      return 0
    end

    -- Check for Straight
    local consecutives = 0
    local highcard = 0
    local lowconsecutives = false
    local ace = false
    for i, v in ipairs (cards2) do
      if i == 1 then
        consecutives = 1
      else
        if v == (cards2[i - 1] + 1) then
          consecutives = consecutives + 1
          if consecutives >= 5 then
            highcard = v
          elseif consecutives == 4 and v == 5 then
            lowconsecutives = true
          end
        elseif v ~= cards2[i - 1] then
          consecutives = 1
        end
        if v == 14 then
          ace = true
        end
      end
    end

    -- check for straight flush to the 5
    if highcard == 0 and ace and lowconsecutives then highcard = 5 end

    if highcard > 0 then
      printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows a Straight to the '..valueToName(highcard)..'!', {1, 1, 1})
      return 0
    end

    -- Check for trips
    if #trips > 0 then
      printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows Three of a Kind: '..trips[#trips]..'s.', {1, 1, 1})
      return 0
    end

    -- Check for two pair
    if #pairs >= 2 then
      printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows Two Pair: '..pairs[#pairs]..'s and '..pairs[#pairs - 1]..'s.', {1, 1, 1})
      return 0
    end

    -- Check for one pair
    if #pairs == 1 then
      printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows One Pair: '..pairs[#pairs]..'s.', {1, 1, 1})
      return 0
    end

    -- High card
    printToAll ('[' .. Color[player]:toHex() .. ']'..player..' shows '..singles[#singles]..' High.', {1, 1, 1})
  end
  return handvals
end
function evaluateHand_Omaha(player)
  local handvals = {}
  handEvaluator = handEvaluator~=nil and handEvaluator or getObjectFromG({getName="RomanticFool's Hand Ranker"})
  if handEvaluator ~= nil then
    ciph = {}
    for i,v in next, revealedcards[player] do
      local cardobj = getObjectFromGUID(v)
      ciph[#ciph+1] = {nameToChar(cardobj.getName()), cardobj.getDescription(), true, cardobj.guid}
    end
    cibh = {}
    for i,cardobj in next, boardzone.getObjects() do
      if cardobj.type == 'Card' then
        cibh[#cibh+1] = {nameToChar(cardobj.getName()), cardobj.getDescription(), false, cardobj.guid}
      end
    end
    handvals = handEvaluator.call("getRanking_Binned",{ {choose=2,objs=ciph},{choose=3,objs=cibh} })
  end
  return handvals
end

-- Hand Evaluator - '2 card entries'
-- spit out hand evaluation in order | at every stage
--|-- triggered by theshowdown
--|-- auto show people after X seconds | muck to avoid
--|-- broadcast countdown to Everybody
--|-- format: [color]Name[-] shows <Categorization> : <Cards>

function evaluateHand(player, flg_print)
  if options.gamemode == 'texas' then
    playerhands[player] = evaluateHand_Texas(player)
  elseif options.gamemode == 'omaha' then
    playerhands[player] = evaluateHand_Omaha(player)
  else
    return 0
  end -- doesn't work for omaha since it doesn't consider which cards are in the player's hand and which are on the board.
  --log(playerhands[player])
  local msg = ("%s shows %s : %s (%d)"):format(
    colorSteamName(player),
    colorString(playerhands[player].category_half,player),
    (table.concat(playerhands[player].hand_cards,' ')),
    playerhands[player].ranking)
  if flg_print==true then printToAll ( msg, {1,1,1}) end
  return {playerhands[player].ranking, player, colorSteamName(player), }
end

function getSevenCards(player)
  local sevencards = {}

  for i, v in ipairs (boardzone.getObjects()) do
    if v.type == 'Card' then
      if v.getName() == '' or v.getDescription() == '' then
          log(('Card: %s unavailable rank and suit data'):format(logString(v)))
          return nil
      end
      sevencards[#sevencards + 1] = v
    end
  end
  for i, v in next, revealedcards[player] do
    local card = getObjectFromGUID(v)
    if card~=nil and card.type == 'Card' then
      if card.getName() == '' or card.getDescription() == '' then
          broadcastToAdmins(('Card: %s unavailable rank and suit data'):format(logString(card)))
          return nil
      end
      if not inTable(sevencards, v) then
          sevencards[#sevencards + 1] = card
      else
          broadcastToAdmins(('Warning: duplicate card %s'):format(logString(card)))
      end
    end
  end

  return sevencards
end

function getConvertedName(name)
  if name == '2' then return 'Two' end
  if name == '3' then return 'Three' end
  if name == '4' then return 'Four' end
  if name == '5' then return 'Five' end
  if name == '6' then return 'Six' end
  if name == '7' then return 'Seven' end
  if name == '8' then return 'Eight' end
  if name == '9' then return 'Nine' end
  if name == '10' then return 'Ten' end
  return name
end
function nameToChar(name)
  if name == 'Two' or name == '2' then return '2' end
  if name == 'Three' or name == '3' then return '3' end
  if name == 'Four' or name == '4' then return '4' end
  if name == 'Five' or name == '5' then return '5' end
  if name == 'Six' or name == '6' then return '6' end
  if name == 'Seven' or name == '7' then return '7' end
  if name == 'Eight' or name == '8' then return '8' end
  if name == 'Nine' or name == '9' then return '9' end
  if name == 'Ten' or name == '10' then return 'T' end
  if name == 'Jack' then return 'J' end
  if name == 'Queen' then return 'Q' end
  if name == 'King' then return 'K' end
  if name == 'Ace' then return 'A' end
end
function nameToValue(name)
  if name == 'Two' or name == '2' then return 2 end
  if name == 'Three' or name == '3' then return 3 end
  if name == 'Four' or name == '4' then return 4 end
  if name == 'Five' or name == '5' then return 5 end
  if name == 'Six' or name == '6' then return 6 end
  if name == 'Seven' or name == '7' then return 7 end
  if name == 'Eight' or name == '8' then return 8 end
  if name == 'Nine' or name == '9' then return 9 end
  if name == 'Ten' or name == '10' then return 10 end
  if name == 'Jack' then return 11 end
  if name == 'Queen' then return 12 end
  if name == 'King' then return 13 end
  if name == 'Ace' then return 14 end
end

function valueToName(value)
  if value == 2 then return 'Two' end
  if value == 3 then return 'Three' end
  if value == 4 then return 'Four' end
  if value == 5 then return 'Five' end
  if value == 6 then return 'Six' end
  if value == 7 then return 'Seven' end
  if value == 8 then return 'Eight' end
  if value == 9 then return 'Nine' end
  if value == 10 then return 'Ten' end
  if value == 11 then return 'Jack' end
  if value == 12 then return 'Queen' end
  if value == 13 then return 'King' end
  if value == 14 then return 'Ace' end
end



function onObjectPickedUp(player, object)
  tlog('in:onObjectPickedUp')
  if Player[player].admin then return 0 end
  local r = object.getPosition()
  local description = ''

  if object.getName() ~= '' then
    description = object.getName()
  elseif object.getValue() then
    description = object.getValue()
  else
    description = object.type
  end

  --[[ Check if the object is inside the dealer's area --]]
  if r.x < 8.5 and r.x > - 8.5 and r.z < - 16.5 and r.z > - 52 then
    object.translate({0, 1, 0})
    return 0
  end

  --[[ Check if the object is on another player's table or bet zone, and not in player's own table or betzone --]]
  if options.lockchips then
    if player ~= actionon and handinprogress then
      if object.type == "Chip" then
        object.translate({0, 0.1, 0})
        return 0
      end
    end
  end
--log(object)
  if player=="Black" or
  not objectExistsInList(tablezones[player].getObjects(), object) and
  not objectExistsInList(betzones[player].getObjects(), object) and
  not objectExistsInList(backtablezones[player].getObjects(), object)
  then
      for i, v in ipairs (colors) do
      if player=="Black" or v ~= player then
          if player=="Black" or
          (objectExistsInList(tablezones[v].getObjects(), object) or
          objectExistsInList(betzones[v].getObjects(), object) or
          objectExistsInList(backtablezones[v].getObjects(), object)) and
          not objectExistsInList(boardzone.getObjects(), object)
          then
              object.translate({0, 0.1, 0})
              return 0
          end
      end
    end
  end
  if object.getName() == "Dealer" and not Player[player].admin then
    object.translate({0, 1, 0})
    return 0
  end

  --[[ If the object is a card and not in the player's own hand, then drop it. Only works with named cards. --]]

  local ranks = {['Ace'] = true, ['Two'] = true, ['Three'] = true, ['Four'] = true, ['Five'] = true, ['Six'] = true, ['Seven'] = true, ['Eight'] = true, ['Nine'] = true, ['Ten'] = true, ['Jack'] = true, ['Queen'] = true, ['King'] = true}
  if object.type == 'Card' and ranks[getConvertedName(object.getName())] then
    for i, v in ipairs (Player[player].getHandObjects()) do
      if object == v then return 0 end
    end
    for i, v in ipairs (holecards[player]) do
      if object.getGUID() == v then return 0 end
    end
    for i, v in ipairs (revealedcards[player]) do
      if object.getGUID() == v then return 0 end
    end
    object.translate({0, 1, 0})
  end
  tlog('out:onObjectPickedUp')
end

function initializePot()
  local p = stacklayout[options.stacklayout]
  -- reset height
  for i, v in pairs (p) do
    v.height = 0
    v.x = 0
    v.y = 0
    v.z = 0
  end
  return p
end


function callCurrentBet(ob, pl)

  if marker_callAction==true then return 1 end
  marker_callAction = true
  local hasPlayer = false
  local chips = {}
  local betZone = nil
  local tableZone = nil
  local amountNeeded = 0;
  local amountPlayerHas = 0;
  local amountInBettingZone = 0;
  for i, v in ipairs(colors) do
    if v == pl then
      hasPlayer = true
      betZone = betzones[v]
      tableZone = tablezones[v]
      amountInBettingZone = getChipValues(betZone, {})
      amountPlayerHas = getChipValues(tableZone, chips)
      amountNeeded = (currentbet - amountInBettingZone)

      --print("amountInBettingZone " .. amountInBettingZone)
      --print("amountPlayerHas " .. amountPlayerHas)
    end
  end
  if hasPlayer == false then return end
  if pl ~= actionon then
    return 0
  end

  if amountPlayerHas < amountNeeded then marker_callAction = false return end
  if amountNeeded < 0 then createPlayerButtons() marker_callAction = false return
  elseif amountNeeded ~= 0 then
    --print("spawnChips " .. amountNeeded)
    local r = tableZone.getRotation()
    r.y = (r.y + 180) % 360
    local xoffset = -0.8
    local zoffset = -1.5
    p = betZone.getPosition()
    p["y"] = 6
    p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
    p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)

    if playerbets_hist[pl]==0 then
      printToAll(('%-32s %-s $%s to $%s'):format(colorSteamName(pl),'calls',currentbet, pot + currentbet - playerbets_hist[pl]))
    else
      printToAll(('%-32s %-s $%s(+$%s) to $%s'):format(colorSteamName(pl),'calls', currentbet, currentbet - playerbets_hist[pl], pot + currentbet - playerbets_hist[pl]))
    end
    playerbets_hist[pl] = currentbet

    if moveChipsFromColor(pl, amountNeeded, p, r, _, true) ~= true then
      spawnChips(amountNeeded, p, r, _, true)

      p = tablezones[pl].getPosition()
      r = tablezones[pl].getRotation()
      p["y"] = 6
      xoffset = 1.4
      zoffset = 0
      p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      r.y = (r.y + 180) % 360
      if (amountPlayerHas - amountNeeded) >= 0  then
          for j,k in ipairs(tableZone.getObjects()) do
          if isCurrency(k) then
              k.destruct()
          end
          end
          newPlayerMoneyAmount = amountPlayerHas - amountNeeded
          if(newPlayerMoneyAmount ~= 0) then
          spawnChips(newPlayerMoneyAmount, p, r, 5)
          end
      end
    end
  end
  --allows chips to spawn before counting them
  Wait.frames(function()
    calculatePots()
    addPlayerToChecks(pl)
    action()
  end, 1)
end

function callCurrentBlinds(blinds, pl)
  tlog('in:function callCurrentBlinds')
  hasPlayer = false
  local chips = {}
  betZone = nil
  tableZone = nil
  amountNeeded = 0;
  amountPlayerHas = 0;
  amountInBettingZone = 0;

  hasPlayer = true
  betZone = betzones[pl]
  tableZone = tablezones[pl]
  amountInBettingZone = getChipValues(betZone, {})
  amountPlayerHas = getChipValues(tableZone, chips)
  amountNeeded = blinds
  --print("currentbet " .. currentbet)
  --print("amountInBettingZone " .. amountInBettingZone)
  --print("amountPlayerHas " .. amountPlayerHas)
  if hasPlayer == false then return end
  if amountPlayerHas < amountNeeded then return end
  if amountNeeded <= 0 then return end
  --print("spawnChips " .. amountNeeded)
  local r = tableZone.getRotation()
  r.y = (r.y + 180) % 360

  p = betZone.getPosition()
  p["y"] = 6
  p["x"] = p.x
  p["z"] = p.z
  spawnChips(amountNeeded, p, r, _, true)

  p = tablezones[pl].getPosition()
  r = tablezones[pl].getRotation()

  xoffset = 1.4
  zoffset = 0
  x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
  z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
  y = p.y - 10

  pos = {x, y, z}
  pos.x = x
  pos.y = y
  pos.z = z

  r.y = (r.y + 180) % 360


  if (amountPlayerHas - amountNeeded) >= 0  then
    for j,k in ipairs(tableZone.getObjects()) do
      if isCurrency(k) then
        k.destruct()
      end
    end
    newPlayerMoneyAmount = amountPlayerHas - amountNeeded
    if(newPlayerMoneyAmount ~= 0) then
      spawnChips(newPlayerMoneyAmount, pos, r, 5)
    end
    -- updatePlayerMoneyText(pl, newPlayerMoneyAmount)
  end
  removePlayerFromChecks(pl)
 calculatePots()
 tlog('out:function callCurrentBlinds')
end

function onObjectEnterContainer(bag, ob)
  tlog('in:onObjectEnterContainer')
  if bag.getName() == "Sidepotbag" and ob.type == "Chip" then
    local inputs = bag.getInputs()
    local amountinput = nil
    for i,v in ipairs(inputs) do
      if v.label == "Amount" then
        amount = tonumber(v.value)
        amountinput = v
      end
    end
    amount = amount + (currencyToNumber(ob.getName()) * math.abs(ob.getQuantity()))
    amountinput.value = tostring(amount)
   -- bag.clearInputs()
    bag.editInput(amountinput)
  -- local amount = inputs[0].value
  end
  tlog('out:onObjectEnterContainer')
end

function calculatePots_RateLimited()
    local callTime = os.time()
    if os.difftime(callTime,time_stamps.calculatePots.time) >= time_stamps.calculatePots.delay then
        time_stamps.calculatePots.time=os.time()
        calculatePots()
        if process_queue.calculatePots~=nil then
            Wait.stop(process_queue.calculatePots)
        end
        process_queue.calculatePots = Wait.time(function() calculatePots() end, time_stamps.calculatePots.delay * 1.1)
    end
end

function onObjectEnterScriptingZone(zone, obj)
  tlog('in:onObjectEnterScriptingZone:'..zone.getGUID())
  calculatePots_RateLimited()
  tlog('out:onObjectEnterScriptingZone:'..zone.getGUID())
end

function onObjectLeaveScriptingZone(zone, obj)
  tlog('in:onObjectLeaveScriptingZone:'..zone.getGUID())
  calculatePots_RateLimited()
  tlog('out:onObjectLeaveScriptingZone:'..zone.getGUID())
end

function onObjectLeaveContainer(bag, ob)
  tlog('in:onObjectLeaveContainer')
  if bag.getName() == "Sidepotbag" and ob.getName():sub(1, 1) == '$' then
    local inputs = bag.getInputs()
    local amountinput = nil
    if inputs~=nil then
      for i,v in ipairs(inputs) do
        if v.label == "Amount" then
          amount = tonumber(v.value)
          amountinput = v
        end
      end
      amount = amount - (currencyToNumber(ob.getName()) * math.abs(ob.getQuantity()))
      amountinput.value = tostring(amount)
      -- bag.clearInputs()
      bag.editInput(amountinput)
      -- local amount = inputs[0].value
    end
  elseif bag == deck and ob.type == 'Card' then
    table.insert(dealt_cards,ob.guid)
  end
  tlog('out:onObjectLeaveContainer')
end

function infSplitPot(tbl_of_colors)
  assert(tbl_of_colors ~= nil and #tbl_of_colors > 0, "Bad Call to intSplitPot")
  local chips = {}
  local total = getChipValues(potzones[1],chips)
  local perPlayer = total / #tbl_of_colors
  local rem = 0
  for i,v in next, tbl_of_colors do
    rem = rem + spawnChips(perPlayer, tablezones[v].getPosition() + Vector(0,2,0), Vector(0,0,0), nil, true)
  end
  remColor = tbl_of_colors[math.random(1,#tbl_of_colors)]
  if rem > 1 then printToAll(string.format("%s received extra %s%d",remColor,currencySymbol or '$',rem), remColor) end
  rem = spawnChips(rem,tablezones[remColor].getPosition()
      + Vector(0,2,0), Vector(0,0,0), nil, true)
  if rem > 1 then log(string.format("Lost %f chipvalue in the split",rem)) end
  for i,obj in next, chips do
    obj.destruct()
  end
  Wait.frames(function() calculatePots() end, 5)
end

function createSidepot(ob, pl)
  if startedSidepot then return end
  Wait.condition(function() log('Ending Sidepot') end, || startedSidepot==false, 2)
  if pl~=nil and not Player[pl].admin then return 1 end
  log('Starting Sidepot')
  startLuaCoroutine(Global, "coCreateSidepot")
end

for i,color in next, colors do
  _G['sidePotTo'..color] = function(ob,col)
    if Player[col].admin then
      moveSidePotTo(color,ob)
    end
  end
end

function coCreateSidepot()
  if sidepotfailcount > sidepotfailcountlimit then
    convertfailcount = 0
    print("Error in Sidepotcreations, chips were moved");
    return 1
  end

  -- cant build sidepots twice
  if sidepotcalculated then
    return 1
  end
  startedSidepot = true
  local chips1 = {}
  local positions1 = {}
  local rotations1 = {}
  for i, v in pairs (betzones) do
    objects = v.getObjects()
    for j, w in ipairs (objects) do
      if w.type == 'Chip' then
        if w.getValue() or currencyToNumber(w.getName()) ~= nil then
          chips1[#chips1 + 1] = w
        end
      end
    end
  end
--   for i, v in ipairs (chips1) do
--     positions1[#positions1 + 1] = v.getPosition()
--     rotations1[#rotations1 + 1] = v.getRotation()
--   end
  for i = 1, 2 do
    coroutine.yield(0)
  end
  local chips2 = {}
  local lplayerbets = {}
  local positions2 = {}
  local rotations2 = {}
--   for i, v in ipairs (chips2) do
--     positions2[#positions2 + 1] = v.getPosition()
--     rotations2[#rotations2 + 1] = v.getRotation()
--   end
--   --[[ Check chip positions --]]
--   for i, v in ipairs(positions1) do
--     if positions2[i]~=nil and (v.x ~= positions2[i].x or v.y ~= positions2[i].y or v.z ~= positions2[i].z) then
--       sidepotfailcount = sidepotfailcount + 1
--       chips2[i].highlightOn("Red",15)
--       log("error in convert .. " .. sidepotfailcount)
--       coroutine.yield(0)
--     end
--   end
  for i, v in ipairs (colors) do
    lplayerbets[i] = { getChipValues(betzones[v], chips2), betzones[v], v, 0}
    if lplayerbets[i][1]~=0 then printToAll(('[%s]%s[-] has $%d at sidepot'):format(Color[v]:toHex(),Player[v].steam_name or 'DEBUG-AI',lplayerbets[i][1])) end
  end
  table.sort(lplayerbets, |a,b| a[1] > b[1])
  --log(lplayerbets)
  for i, v in ipairs (lplayerbets) do
    if i == #lplayerbets then
      v[4] = v[1] * i
    else
      v[4] = ( v[1] - lplayerbets[i + 1][1]) * i
    end
  end

  local currentMin = {
    value = lplayerbets[1][4]==0 and math.huge or lplayerbets[1][4],
    index = 0,
  }
  for i, v in ipairs (lplayerbets) do
    if v[1] > 0  then
      currentMin.value = v[4]
      currentMin.index = i
    end
  end
  --largest v
  local lchips = {}
  local mainpot = getChipValues(potzones[1],lchips)
  if currentMin.index == 0 then startedSidepot = false broadcastToAll('no bets detected!',Color.Red) return 1 end
  lplayerbets[currentMin.index][4] = lplayerbets[currentMin.index][4] + mainpot

  if clock ~= nil then
    clock.destruct()
  end
  for i, v in ipairs (chips2) do
    v.destruct()
  end
  for i,lchip in next, lchips do
    lchip.destruct()
  end
  local spawnedcolors = {}
  local params = {}
  local bagparams = {}
  bagparams.type = "Bag"
  bagparams.sound = false
  bagparams.callback_function = function(o) o.setColorTint(Color.GoldLight) end

  for i, v in ipairs (lplayerbets) do
    if v[1] > 0  then
      if v[4] > 0 then
      -- bettext[v[3]].setValue("Bet: $" .. tostring(v[1]))
      -- sidepottext[v[3]].setValue("Sidepot: $" .. tostring(v[4]))
      end
      local p = {}
      local r = {}
      local zoffset = 7
      local xoffset = 0
      local bagScript = [[
      function filterObjectEnter(ob)
        if ob.type == 'Chip' then
          return true
        end
        return false
      end
      function onLoad(save_str)
      end
      function onSave()
      end
      ]]
      p = v[2].getPosition()
      r = v[2].getRotation()
      p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      bagparams.position = p
      bagparams.position["y"] = 10
      if v[4] > 0 then
        bowl = spawnObject(bagparams)
        bowl.setCustomObject({stackable = true})
        bowl.setName("Sidepotbag")
        bowl.setLuaScript(bagScript)
        bowl.setDescription(v[3])
        if i==1 then
          local thisbowl = bowl
          Wait.frames(function() _G["sidePotTo"..v[3]](thisbowl,theHostColor()) end, 60)
        end
      end
      p["y"] = 12
      p["x"] = p.x
      p["z"] = p.z
      r = v[2].getRotation()
      r.y = (r.y + 180) % 360

      spawnChips(v[4], p, r, _, true)

      zoffset = -1.5
      xoffset = -1.5
      p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
      p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
      local zoffset = 0

      spawnedcolors[#spawnedcolors + 1] = v[3]
      local lxoffset = 0
      local lzoffset = 0

      if v[4] > 0 then
        for k, w in ipairs(spawnedcolors) do
          -- p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
          -- p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)

          local buttonparams = {}
          p = {x=3,y=0,z=0}
          r = bowl.getRotation()
          p.x = p.x + (math.cos(math.rad(r.y)) * lxoffset) + (math.sin(math.rad(r.y)) * lzoffset)
          -- p.z = p.z - (math.rad(r.y) * lxoffset) + (math.rad(r.y) * lzoffset)

          buttonparams.position = p
          buttonparams.position["y"] = 1.5
          buttonparams.position["z"] = 2
          buttonparams.rotation = r
          buttonparams.rotation["y"] = 180
          buttonparams.label = w
          buttonparams.color = Color[w]
          buttonparams.hover_color = Color[w]
          buttonparams.font_color = {0,0,0,0}
          buttonparams.font_size = 340
          buttonparams.width = 500
          buttonparams.height = 500
          buttonparams.click_function = "sidePotTo"..w
          buttonparams.function_owner = Global

          bowl.createButton(buttonparams)

          lzoffset = lzoffset - 1
          lxoffset = lxoffset - 1
        end
        r = bowl.getRotation()
        local inputparams = {}
        inputparams.input_function = "doNothing"
        inputparams.position = {0, 1.5, -2}
        inputparams.width = 3000
        inputparams.rotation = r
        -- inputparams.rotation["y"] = 180
        inputparams.rotation["x"] = 180
        inputparams.scale = {-1,1,1}
        inputparams.height = 400
        inputparams.font_size = 360
        inputparams.alignment = 3
        inputparams.validation = 3

        inputparams.label = "Amount"
        inputparams.value = "0"

        bowl.createInput(inputparams)
        inputparams.position = {0, 1.5, -3.3}
        inputparams.rotation["x"] = 180
        inputparams.scale = {-1,1,1}

        -- inputparams.rotation["y"] = 180
        inputparams.width = 1000
        inputparams.value = ""
        inputparams.label = "Split"
        inputparams.validation = 2
        bowl.createInput(inputparams)

        local buttoncontrolparams = {}
        buttoncontrolparams.click_function = "splitMinus"
        buttoncontrolparams.position = {1.75, 1.5, -3.3}
        buttoncontrolparams.height = 400
        buttoncontrolparams.width = 400
        buttoncontrolparams.font_size = 400
        buttoncontrolparams.label = "-"
        bowl.createButton(buttoncontrolparams)
        buttoncontrolparams.click_function = "splitPlus"
        buttoncontrolparams.position = {-1.75, 1.5, -3.3}
        buttoncontrolparams.label = "+"
        bowl.createButton(buttoncontrolparams)
      end

    end
    coroutine.yield(0)
  end
  sidepotcalculated = true
  startedSidepot = false
  return 1
end

function splitPlus(ob, pl)
  if Player[pl].admin then
    local splitval = ob.getInputs()[2]
    if splitval.value == "" or splitval.value == "0" then
      ob.editInput({index=splitval.index, value = 1})
    elseif tonumber(splitval.value) >= 1 then
      ob.editInput({index=splitval.index, value = tonumber(splitval.value) + 1})
    end
  end
end

function splitMinus(ob, pl)
  if Player[pl].admin then
    local splitval = ob.getInputs()[2]
    if splitval.value == "" or splitval.value == "0" then
      ob.editInput({index=splitval.index, value = ""})

      return 1
    elseif tonumber(splitval.value) >= 1 then
      ob.editInput({index=splitval.index, value = tonumber(splitval.value) - 1})
    end
  end
end

function moveSidePotTo(pl, ob)

  local tablePos = tablezones[pl].getPosition()
  local tableRot = tablezones[pl].getRotation()
  local bagObj = ob.getObjects()
  local params = {}
  local offsets = 1
  local inputs = ob.getInputs()
  local amountinput = nil
  local splitinput = nil
  local amount = 0
  local split = 0
  for i, v in ipairs(inputs) do
    if v.label == "Split" then
      splitinput = v
      split = tonumber(v.value)
    end
    if v.label == "Amount" then
      amountinput = v
      amount = tonumber(v.value)
    end
  end
  if split == nil or split == 0 then
    for i, v in ipairs(bagObj) do

      v.position = tablePos
      v.position["y"] = 2
      v.callback_function = function() calculatePots() end
      ob.takeObject(v)
      -- offsets = offsets + 1
    end
    printToAll(colorSteamName(pl) .. ' receives sidepot of ' .. comma_value(amount))
    ob.destruct()
  elseif split > 0 and amount > 0 then
    sharedamount = amount/split
    ob.reset()
    p = ob.getPosition()
    p["y"] = 7
    amountinput.value = tostring(0)
    ob.editInput(amountinput)
    spawnChips(sharedamount, tablePos, tableRot, nil, true)
    printToAll(colorSteamName(pl) .. ' receives chopped sidepot of ' .. comma_value(sharedamount))
    amount = amount - sharedamount
    split = split - 1
    spawnChips(amount, p, ob.getRotation(), nil, true)
    -- amountinput.value = tostring(amount)
    splitinput.value = tostring(split)
    ob.editInput(splitinput)
    -- ob.editInput(amountinput)
    calculatePots()

  end
  if amount == 0 then
    ob.destruct()
  end


end

-- chips should correspond to the chipstable, position, rotation is where the chips should move to
function moveChips(chips, p, r)
  local chipstack = initializePot()
  local h = {}
  local chips2 = {}
  for i, v in pairs (chipstack) do
    chips2[i] = {}
    h[i] = {}
  end
  for i, v in pairs(chipstack) do
    v.x = p.x + (math.cos(math.rad(r.y)) * v.xoffset) + (math.sin(math.rad(r.y)) * v.zoffset)
    v.z = p.z - (math.sin(math.rad(r.y)) * v.xoffset) + (math.cos(math.rad(r.y)) * v.zoffset)
    v.y = p.y + v.yoffset + v.height
  end

  -- move also chips within the potzone
  for j, w in ipairs (chips) do
    if w.type == "Chip" and not w.held_by_color then
      local hit = false
      for k, x in pairs (currencies) do
        local stack
        if h[x.stack] == nil then
          stack = "misc"
        else
          stack = x.stack
        end
        if w.getValue() == x.value or w.getName() == x.name then
          hit = true
          chips2[stack][#chips2[stack] + 1] = w
          if w.getQuantity() > 0 then
            h[stack][#h[stack] + 1] = w.getQuantity() * x.height
          else
            h[stack][#h[stack] + 1] = x.height
          end
          break -- next object
        end
      end
      -- unknown chips
      if not hit then

        local x = currencies[#currencies] -- should be dummy value
        local stack = "misc"
        chips2[stack][#chips2[stack] + 1] = w
        if w.getQuantity() > 0 then
          h[stack][#h[stack] + 1] = w.getQuantity() * x.height
        else
          h[stack][#h[stack] + 1] = x.height
        end
      end
    end
  end

  for i, v in pairs (chips2) do
    for j, w in ipairs (v) do

      local rot = {0, 0, 0}
      for k, x in pairs (currencies) do
        if (w.getValue() == x.value) or (w.getName() == x.name) then
          rot.x = (r.x + x.params.rotation[1]) % 360
          rot.y = (r.y + x.params.rotation[2]) % 360
          rot.z = (r.z + x.params.rotation[3]) % 360
          rot[1] = rot.x
          rot[2] = rot.y
          rot[3] = rot.z
        end
      end
      w.setRotation(rot)
      w.setPosition(chipstack[i])
      w.translate({0, 0.1, 0})
      chipstack[i].y = chipstack[i].y + h[i][j]
      chipstack[i].height = chipstack[i].height + h[i][j]
    end
  end


  return 1
end
function moveCountFromObj(obj, count, p, r)
    if count == 0 then return true end
    local available = obj.getQuantity()
    if available == count or available==-1 then
        obj.setPositionSmooth(p,false,true)
    elseif available > 0 then
        for i=1,count do
            obj.takeObject({position=p,rotation=r,smooth=false})
        end
    end
    Wait.condition(function() calculatePots_RateLimited() end, || obj~=nil and obj.resting or (obj==nil and true))
end
function moveChipsFromColor(player_color, money, p, r)
    local tolerance = 0.001
    local chips = {}
    local available = getChipValues(tablezones[player_color], chips)
    table.sort(chips,|a,b| currencyToNumber(a.getName()) > currencyToNumber(b.getName()))
    if available < money then return false end
    local remaining = money
    local bins = {} -- indexed by object reference
    for i, obj in next, chips do
      local chipValue = currencyToNumber(obj.getName())
      bins[obj] = math.min(math.abs(obj.getQuantity()), math.floor(remaining/chipValue))
      --log(('%4s , %g , %g , %g'):format(obj.getName(), remaining, remaining/chipValue, bins[obj]))
      remaining = remaining - bins[obj] * chipValue
    end
    if(remaining < tolerance) then -- treat as zero
      for i, obj in next, chips do
        moveCountFromObj(obj, bins[obj], p, r)
      end
      return true
    else
      return false
    end
    return nil
end
-- spawnChips(money, position, rotation)
function spawnChips(money, p, r, minheight, call)
    tlog('in:function spawnChips')
    local spawnData = nil
    if minheight == nil then
      minheight = 0
    end
    money = money + 0.001 -- prevents rounding error
    money = comma_value(money) + 0

    local chipstack = {}

    local params = {}
    local custom = {}

    -- prevent spawning to much Chips
    local function getMax(tbl_t,sub)
        local sub = sub
        local max = 0
        for i,rec in next, tbl_t do
            max = ((max >= rec.value) and max) or rec.value
        end
        return max
    end
    if money > getMax(currencies) * 50 then


      money = math.floor(money)
      params.position = p
      params.rotation = r
      params.scale = {1.12, 1.12, 1.12}
      params.params = {"$" .. string.format("%.0f", money) }
      params.type = 'Custom_Model'
      params.callback = nil
      params.sound = false

      custom.mesh = "http://cloud-3.steamusercontent.com/ugc/841461304086373873/9925B4E8ECFC5BBB13AB9FD1BB93E768C2DD3151/"
      custom.diffuse = "http://cloud-3.steamusercontent.com/ugc/841461304094020976/22277301EF8ACDDD4649BD6F382CF950967A8D50/"

      custom.type = 5
      custom.material = 1

      local obj = spawnObject(params)
      obj.setCustomObject(custom)
      obj.setName("$" .. comma_value(money) )
      printToAll('Conversion Limit reached, alternate Bar with the money value spawned', {1, 1, 0})
      return 1
    end



    chipstack = initializePot()


    for i, v in pairs(chipstack) do
      if call == true then
        v.x = p.x
        v.z = p.z
      else
        v.x = p.x + (math.cos(math.rad(r.y)) * v.xoffset) + (math.sin(math.rad(r.y)) * v.zoffset)
        v.z = p.z - (math.sin(math.rad(r.y)) * v.xoffset) + (math.cos(math.rad(r.y)) * v.zoffset)
      end
      v.y = p.y + v.yoffset + v.height
    end

    params.rotation = r
    params.callback_owner = Global
    local bins = {}
    -- does the minimums
    local i = #currencies
    while i > 0 do
      v = currencies[i]
      bins[i] = 0
      if not (v.value == -1) then
        local j = 0
        if not v.standard then
          while (j < minheight) and (money >= v.value) do
            money = money - v.value
            j = j + 1
          end
        else
          while (j < minheight) and (money >= v.value) do
            money = money - v.value
            j = j + 1
          end
        end
        bins[i] = j
      end
      i = i - 1
    end
    --fills up the rest
    for i, v in ipairs (currencies) do

      if v.value == -1 then
        break -- no dummy chips spawn
      end
      params = {}
      custom = {}
      params.rotation = v.params.rotation
      params.scale = v.params.scale
      params.params = {v.name}
      params.sound = false

      if chipstack[v.stack] == nil then
        stack = "misc"
      else
        stack = v.stack
      end
      params.position = {}
      params.position.x = chipstack[stack].x
      params.position.y = chipstack[stack].y + chipstack[stack].height
      params.position.z = chipstack[stack].z
      chipstack[stack].height = chipstack[stack].height + v.height

      local j = 0
      while money >= tonumber(v.value) do
        money = money - v.value
        j = j + 1
      end
      if not v.standard then
        chipStackData.Name = 'Custom_Model'
        chipStackData.CustomMesh.MeshURL = v.custom.mesh
        chipStackData.CustomMesh.DiffuseURL = v.custom.diffuse
        chipStackData.CustomMesh.NormalURL = v.custom.normal or ''
        chipStackData.CustomMesh.Convex = v.custom.convex or false
        chipStackData.CustomMesh.ColliderURL = v.custom.collider or ''
        chipStackData.CustomMesh.TypeIndex = 5
        chipStackData.CustomMesh.MaterialIndex = 1
        chipStackData.CustomMesh.CastShadows = v.custom.cast_shadows or false
        for i, txt in next, {'X','Y','Z'} do
            chipStackData.Transform['scale' .. txt] = v.params.scale[i] or 1
        end
        local rot = {}
        rot.x = (r.x + v.params.rotation[1]) % 360
        rot.y = (r.y + v.params.rotation[2]) % 360
        rot.z = (r.z + v.params.rotation[3]) % 360
        rot[1] = rot.x
        rot[2] = rot.y
        rot[3] = rot.z
        params.rotation = rot
      else
        params.type = 'Chip_'.. v.value
        params.callback = nil
        params.callback_owner = Global
        params.params = nil
        std_chipData.Name = 'Chip_'.. v.value
        std_chipStackData.MeshIndex = v.value
      end

      bins[i] = (bins[i]~=nil and bins[i] or 0) + j
      local obj = nil
    --  RF1234 ["CustomMesh"] = { ["MeshURL"] = "https://www.dropbox.com/s/xtrjnjilifnjvsw/Chip.obj?dl=1",["DiffuseURL"]RF1234 = "https://i.imgur.com/OrMbZbF.png",["NormalURL"] = "",["ColliderURL"] = "",["Convex"] = true,["MaterialIndex"] = 1,["TypeIndex"] = 5,["CastShadows"] = true,}RF1234
      if bins[i] > 0 then
        if bins[i] < 2 then
            --params.type = 'Custom_Model'
            chipStackData.Number = bins[i]
        else
            chipStackData.Name = 'Custom_Model_Stack'
            chipStackData.Number = bins[i]
            std_chipStackData.Number = bins[i]
        end
        chipStackData.Nickname = v.name
        --local obj = spawnObject(params)
        if not v.standard then
          spawnData = chipStackData
        else
          spawnData = bins[i]>1 and std_chipStackData or std_chipData
        end
        obj = spawnObjectData({data = spawnData, position = params.position, rotation=params.rotation})
      end
    end
    tlog('out:function spawnChips')
    return money -- returns the leftover money
  end

-- spawnChips(money, position, rotation)
function old_spawnChips(money, p, r, minheight, call)
  tlog('in:function spawnChips')
  if minheight == nil then
    minheight = 0
  end
  money = money + 0.001 -- prevents rounding error
  money = comma_value(money) + 0

  local chipstack = {}

  local params = {}
  local custom = {}

  -- prevent spawning to much Chips
  local function getMax(tbl_t,sub)
      local sub = sub
      local max = 0
      for i,rec in next, tbl_t do
          max = ((max >= rec.value) and max) or rec.value
      end
      return max
  end
  if money > getMax(currencies) * 50 then
    money = math.floor(money)
    params.position = p
    params.rotation = r
    params.scale = {1.12, 1.12, 1.12}
    params.params = {"$" .. string.format("%.0f", money) }
    params.type = 'Custom_Model'
    params.callback = nil
    params.sound = false

    custom.mesh = "http://cloud-3.steamusercontent.com/ugc/841461304086373873/9925B4E8ECFC5BBB13AB9FD1BB93E768C2DD3151/"
    custom.diffuse = "http://cloud-3.steamusercontent.com/ugc/841461304094020976/22277301EF8ACDDD4649BD6F382CF950967A8D50/"

    custom.type = 5
    custom.material = 1

    local obj = spawnObject(params)
    obj.setCustomObject(custom)
    obj.setName("$" .. comma_value(money) )
    printToAll('Conversion Limit reached, alternate Bar with the money value spawned', {1, 1, 0})
    return 1
  end



  chipstack = initializePot()


  for i, v in pairs(chipstack) do
    if call == true then
      v.x = p.x
      v.z = p.z
    else
      v.x = p.x + (math.cos(math.rad(r.y)) * v.xoffset) + (math.sin(math.rad(r.y)) * v.zoffset)
      v.z = p.z - (math.sin(math.rad(r.y)) * v.xoffset) + (math.cos(math.rad(r.y)) * v.zoffset)
    end
    v.y = p.y + v.yoffset + v.height
  end

  params.rotation = r
  params.callback_owner = Global
  local bins = {}
  local i = #currencies
  while i > 0 do
    v = currencies[i]
    bins[i] = 0
    if not (v.value == -1) then
      params.rotation = v.params.rotation
      params.scale = v.params.scale
      params.params = {v.name}
      params.sound = false

      local rot = {}
      rot.x = (r.x + v.params.rotation[1]) % 360
      rot.y = (r.y + v.params.rotation[2]) % 360
      rot.z = (r.z + v.params.rotation[3]) % 360
      rot[1] = rot.x
      rot[2] = rot.y
      rot[3] = rot.z
      params.rotation = rot
      local stack = ''
      if chipstack[v.stack] == nil then
        stack = "misc"
      else
        stack = v.stack
      end
      if not v.standard then

        params.type = 'Custom_Model'
        params.callback_owner = Global
        custom.mesh = v.custom.mesh
        custom.diffuse = v.custom.diffuse
        custom.type = 5
        custom.material = 1


        local j = 0
        while (j < minheight) and (money >= v.value) do
          params.position = {}
          params.position.x = chipstack[stack].x
          params.position.y = chipstack[stack].y + chipstack[stack].height
          params.position.z = chipstack[stack].z

          local obj = spawnObject(params)
          obj.setCustomObject(custom)
          obj.setName(v.name)
          money = money - v.value
          chipstack[stack].height = chipstack[stack].height + v.height
          j = j + 1
        end
        bins[i] = j
      else
        params.type = 'Chip_'.. v.value
        params.callback = nil
        params.callback_owner = Global
        params.params = nil
        local j = 0
        while (j < minheight) and (money >= v.value) do
          params.position = {}
          params.position.x = chipstack[stack].x
          params.position.y = chipstack[stack].y + chipstack[stack].height
          params.position.z = chipstack[stack].z
          spawnObject(params)
          money = money - v.value
          chipstack[stack].height = chipstack[stack].height + v.height
          j = j + 1
        end
      end
    end
    i = i - 1
  end
  for i, v in ipairs (currencies) do

    if v.value == -1 then
      break -- no dummy chips spawn
    end
    params.rotation = v.params.rotation
    params.scale = v.params.scale
    params.params = {v.name}
    params.sound = false

    if chipstack[v.stack] == nil then
      stack = "misc"
    else
      stack = v.stack
    end

    if not v.standard then
      params.type = 'Custom_Model'
      params.callback_owner = Global
      custom.mesh = v.custom.mesh
      custom.diffuse = v.custom.diffuse
      custom.type = 5
      custom.material = 1
      local rot = {}
      rot.x = (r.x + v.params.rotation[1]) % 360
      rot.y = (r.y + v.params.rotation[2]) % 360
      rot.z = (r.z + v.params.rotation[3]) % 360
      rot[1] = rot.x
      rot[2] = rot.y
      rot[3] = rot.z
      params.rotation = rot
      while money >= tonumber(v.value) do
        params.position = {}
        params.position.x = chipstack[stack].x
        params.position.y = chipstack[stack].y + chipstack[stack].height
        params.position.z = chipstack[stack].z
        local obj = spawnObject(params)
        obj.setCustomObject(custom)
        obj.setName(v.name)
        money = money - v.value
        chipstack[stack].height = chipstack[stack].height + v.height
      end
    else
      params.type = 'Chip_'.. v.value
      params.callback = nil
      params.callback_owner = Global
      params.params = nil
      while money >= v.value do
        params.position = {}
        params.position.x = chipstack[stack].x
        params.position.y = chipstack[stack].y + chipstack[stack].height
        params.position.z = chipstack[stack].z
        spawnObject(params)
        money = money - v.value
        chipstack[stack].height = chipstack[stack].height + v.height
      end
    end
  end
  tlog('out:function spawnChips')
  return money -- returns the leftover money
end

function sortPlayerChips(ob, pl)
  if ob ~= nil then
    if Player[pl].admin then
      pl = ob.getDescription()
    elseif ob.getDescription() ~= pl then
      return 1
    end
  end

  local chips = {}
  local value
  value = getChipValues(tablezones[pl], chips)
  if options.displayplayermoney then
    tablezonetext[pl].setValue("$" .. format_int(value))
  end

  p = tablezones[pl].getPosition()
  r = tablezones[pl].getRotation()

  xoffset = 1.4
  zoffset = 0
  x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
  z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
  y = p.y - 10

  pos = {x, y, z}
  pos.x = x
  pos.y = y
  pos.z = z

  r.y = (r.y + 180) % 360
  moveChips(chips, pos, r)


end

function quickConvertPlayerChips10(ob, pl)
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end


  if quickConvertPlayerChips == true then
    -- if 15 seconds are over after the last convertion then start another one (function broke before)
    if (os.time() - quickConvertPlayerTime) < 15 then
      return
    else
      quickConvertPlayerTime = os.time()
    end
  else
    quickConvertPlayerChips = true
    quickConvertPlayerTime = os.time()
  end




  quickConvertPlayersPlayer = pl
  quickConvertPlayersObject = ob

  startLuaCoroutine(Global, 'quickConvertPlayerChips10Co')

end

function quickConvertPlayerChips10Co()
  local pl = quickConvertPlayersPlayer
  local ob = quickConvertPlayersObject

  local objects = {}
  local chips1 = {}
  local positions1 = {}
  local rotations1 = {}

  v = tablezones[pl]
  objects = {}
  objects = v.getObjects()
  for j, w in ipairs (objects) do
    if isCurrency(w) then
      if w.getValue() or currencyToNumber(w.getName()) ~= nil then
        chips1[#chips1 + 1] = w
      end
    end
  end


  for i, v in ipairs (chips1) do
    positions1[#positions1 + 1] = v.getPosition()
    rotations1[#rotations1 + 1] = v.getRotation()
  end

  for i = 0, 2 do
    coroutine.yield(0)
  end


  objects = {}
  local chips2 = {}
  local positions2 = {}
  local rotations2 = {}

  v = tablezones[pl]
  objects = {}
  objects = v.getObjects()
  for j, w in ipairs (objects) do
    if w.type == 'Chip' then
      if w.getValue() or currencyToNumber(w.getName()) ~= nil then
        chips2[#chips2 + 1] = w
      end
    end
  end


  if #chips2 ~= #chips1 then
    quickConvertPlayerChips = false
    return 1
  end

  for i = 0, 2 do
    coroutine.yield(0)
  end


  for i, v in ipairs (chips2) do
    positions2[#positions2 + 1] = v.getPosition()
    rotations2[#rotations2 + 1] = v.getRotation()
  end

  --[[ Check chip positions --]]
  for i, v in ipairs(positions1) do
    if v.x ~= positions2[i].x or v.y ~= positions2[i].y or v.z ~= positions2[i].z then
      quickConvertPlayerChips = false
      return 1
    end
  end

  --[[ Check chip rotations --]]
  for i, v in pairs(rotations1) do
    if v.x ~= rotations2[i].x or v.y ~= rotations2[i].y or v.z ~= rotations2[i].z then
      quickConvertPlayerChips = false
      return 1
    end
  end

  local chips = {}
  local money = 0


  money = getChipValues(tablezones[pl], chips)
  --[[ Destroy old chips --]]
  for i, v in ipairs (chips) do
    v.destruct()
  end

  for i = 0, 10 do
    coroutine.yield(0)
  end

  local p = tablezones[pl].getPosition()
  local r = tablezones[pl].getRotation()

  xoffset = -1.15
  zoffset = 1
  x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
  z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
  y = p.y - 10

  pos = {x, y, z}
  pos.x = x
  pos.y = y
  pos.z = z

  r.y = (r.y + 180) % 360

  spawnChips(money, pos, r, 10)


  --[[ Wait five frames to allow chips to spawn before updating pot values --]]

  quickConvertPlayerChips = false
  return 1
end

function quickConvertPlayerChips10_5(ob, pl)
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  -- if (os.time() - lastCollectTime) < 1 and pl == lastplayer then
  --   printToColor("You cant convert multiple times within 1 second", pl, {1, 1, 0} )
  --   return 1
  -- else
  --   lastplayer = pl
  --   lastCollectTime = os.time()
  -- end
  if quickConvertPlayerChips == true then
    -- if 30 seconds are over after the last convertion then start another one (function broke before)
    if (os.time() - quickConvertPlayerTime) < 30 then
      return
    else
      quickConvertPlayerTime = os.time()
    end
  else
    quickConvertPlayerChips = true
    quickConvertPlayerTime = os.time()
  end

  quickConvertPlayersPlayer = pl
  quickConvertPlayersObject = ob

  startLuaCoroutine(Global, 'quickConvertPlayerChips10_5Co')

end

function quickConvertPlayerChips10_5Co()
  local pl = quickConvertPlayersPlayer
  local ob = quickConvertPlayersObject
  local objects = {}
  local chips1 = {}
  local positions1 = {}
  local rotations1 = {}

  v = tablezones[pl]
  objects = {}
  objects = v.getObjects()
  for j, w in ipairs (objects) do
    if w.type == 'Chip' then
      if w.getValue() or currencyToNumber(w.getName()) ~= nil then
        chips1[#chips1 + 1] = w
      end
    end
  end


  for i, v in ipairs (chips1) do
    positions1[#positions1 + 1] = v.getPosition()
    rotations1[#rotations1 + 1] = v.getRotation()
  end

  for i = 0, 2 do
    coroutine.yield(0)
  end


  objects = {}
  local chips2 = {}
  local positions2 = {}
  local rotations2 = {}

  v = tablezones[pl]
  objects = {}
  objects = v.getObjects()
  for j, w in ipairs (objects) do
    if isCurrency(w) then
      if w.getValue() or currencyToNumber(w.getName()) ~= nil then
        chips2[#chips2 + 1] = w
      end
    end
  end


  if #chips2 ~= #chips1 then
    quickConvertPlayerChips = false
    return 1
  end

  for i = 0, 2 do
    coroutine.yield(0)
  end


  for i, v in ipairs (chips2) do
    positions2[#positions2 + 1] = v.getPosition()
    rotations2[#rotations2 + 1] = v.getRotation()
  end

  --[[ Check chip positions --]]
  for i, v in ipairs(positions1) do
    if v.x ~= positions2[i].x or v.y ~= positions2[i].y or v.z ~= positions2[i].z then
      quickConvertPlayerChips = false
      return 1
    end
  end

  --[[ Check chip rotations --]]
  for i, v in pairs(rotations1) do
    if v.x ~= rotations2[i].x or v.y ~= rotations2[i].y or v.z ~= rotations2[i].z then
      quickConvertPlayerChips = false
      return 1
    end
  end

  local chips = {}
  local money = 0


  money = getChipValues(tablezones[pl], chips)
  --[[ Destroy old chips --]]
  for i, v in ipairs (chips) do
    v.destruct()
  end

  for i = 0, 2 do
    coroutine.yield(0)
  end

  local p = tablezones[pl].getPosition()
  local r = tablezones[pl].getRotation()

  xoffset = 1.4
  zoffset = 0
  x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
  z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
  y = p.y - 10

  pos = {x, y, z}
  pos.x = x
  pos.y = y
  pos.z = z

  r.y = (r.y + 180) % 360

  local lowStackValue = 0
  local function getSorted(tbl_t,str_key,f_comp)
    local f_comp = true and f_comp or function(a,b) return a < b end
    local tbl_t_out = {}
    for i,v in next, tbl_t do
      tbl_t_out[#tbl_t_out + 1] = v[str_key]
    end
    table.sort(tbl_t_out, f_comp)
    return tbl_t_out
  end
  local values = getSorted(currencies,"value", function(a,b) return a > b end)
  lowStackValue = values[#currencies - 1] * 5 + values[#currencies - 2] * 5
  spawnChips(money, pos, r, 10)
  --   if money <= lowStackValue then
--     spawnChips(money, pos, r, 10)
--   else
--     money = money - lowStackValue
--     spawnChips(money, pos, r, 5)
--     pos["y"] = pos["y"] + 5
--     spawnChips(lowStackValue, pos, r, 5)
--   end


  for i = 0, 2 do
    coroutine.yield(0)
  end
  -- update money display
  if options.displayplayermoney then
    local chips = {}
    tablezonetext[pl].setValue("$" .. format_int(getChipValues(tablezones[pl], chips)))
    --[[ Wait five frames to allow chips to spawn before updating pot values --]]
    quickConvertPlayerChips = false
  end
  return 1
end

function goAllIn(ob, pl)
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end

  if pl ~= actionon then
    return 0
  end

  local chips = {}
  getChipValues(betzones[pl], chips)
  getChipValues(tablezones[pl], chips)
  xoffset = 0
  zoffset = 0.6
  r = betzones[pl].getRotation()
  p = betzones[pl].getPosition()
  p.x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
  p.z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
  p.y = p.y - 10
  r.y = r.y + 90

  moveChips(chips, p, r+Vector(0,90,0))
  -- if getChipValues(betzones[pl], {}) <= currentbet then
  --   allInHappened = true
  --   allIns[#allIns+1] = pl
  -- end
  calculatePots()

  Wait.frames(function() createPlayerButtons() end, 10)

end
function foldAction(ob, player_color)

end
function muckNonaction(ob, player_color)
  if rightclick then return 1 end
  if Player[player_color].admin then
    player_color = ob~=nil and ob.getDescription() or actionon
  elseif ob.getDescription() ~= player_color then
    return 1
  end
  if options.enforcefoldinturn and not theshowdown then
    if player_color ~= actionon then
      return 0
    end
  end
  if muck == nil then
    muck = Global.getVar('muck')
  end

  local cards = Player[player_color].getHandObjects()
  local p = muck.getPosition()
  local r = muck.getRotation()
  p.y = p.y + 0.25
  r.x = 180
  r.z = 0

  for i, v in ipairs (cards) do
    v.setRotation(r)
    v.setPosition(p)
    v.translate({0, 0.1, 0})
    p.y = p.y + 0.01
  end
end

function foldPlayerHand(ob, player_color, rightclick)
  calculatePots()
  if rightclick then return 1 end
  if Player[player_color].admin then
    player_color = ob~=nil and ob.getDescription() or actionon
  elseif ob~=nil and ob.getDescription() ~= player_color then
    return 1
  end
  if options.enforcefoldinturn and not theshowdown then
    if player_color ~= actionon then
      return 0
    end
  end

  local cards = Player[player_color].getHandObjects()
  local p = muck.getPosition()
  local r = muck.getRotation()
  p.y = p.y + 0.25
  r.x = 180
  r.z = 0

  for i, v in ipairs (cards) do
    v.setRotation(r)
    v.setPosition(p)
    v.translate({0, 0.1, 0})
    p.y = p.y + 0.01
  end

  params = {name = Player[player_color].color}
  folded_colors[#folded_colors+1] = player_color
  foldeds[player_color] = true
  foldedCount = foldedCount + 1
  verb = (theshowdown and 'mucks') or ((passiveActionExe~=nil and 'snap' or '') .. 'folds')

  printToAllandLog(('%-32s %-s @$%s to $%s'):format(colorSteamName(player_color),verb,currentbet, pot))

  if theshowdown then
    -- check and award singleton sidepot bags
    table.remove(players, indexTable(players, player_color))
  else
    local index_actionon = indexTable(players, player_color)
    actionon = index_actionon>1 and players[index_actionon-1] or players[#players]
    table.remove(players, index_actionon)
    playerFolded(params)
    startLuaCoroutine(self, 'delayedAction')
  end
end

function printToAllandLog(...)
  printToAll(...)
  log(select(1,...))
end

function delayedAction()
  for i = 1, 2 do
    coroutine.yield(0)
  end
  action()
  return 1
end

function goBusted(pl)
  print("run bustcheck")

  local objects = betzones[pl].getObjects()
  local x = 0
  local found = false

  for i, v in ipairs(objects) do
    if v.getName() == "BustToken" and getChipValues(tablezones[pl], {}) > 0 then


      found = true
      v.destruct()

    end
    if v.getName() == "BustToken" and getChipValues(tablezones[pl], {}) == 0 then
      return 1

    end
    if v.getName() == "AFK" then
      print("an afk button here")
      return 1

    end
  end


  if not found then
    local params = {}


    params.sound = false
    params.type = 'Custom_Model'
    params.position = betzones[pl].getPosition()
    params.scale = {1, 1, 1}
    params.rotation = betzones[pl].getPosition()

    local playerhand = getPlayerHandPositionAndRotation(pl)
    params.position = {playerhand['pos_x'] + playerhand['trigger_forward_x'] * 5, 1.4, playerhand['pos_z'] + playerhand['trigger_forward_z'] * 5}
    params.rotation = {0, playerhand['rot_y'], 0}
    params.callback = 'setAfkButton'
    bustButton = spawnObject(params)

    local custom = {}
    custom.mesh = 'pastebin.com/raw.php?i=qv6mnq65'
    custom.diffuse = 'https://i.imgur.com/rujp4AB.png'
    custom.type = 0

    bustButton.setCustomObject(custom)
    bustButton.setName('BustToken')
    bustButton.setDescription(pl)
    print("GUID " .. tostring(bustButton.getGUID()))

  end

end

function goAFK(ob, pl)
  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end

  local objects = betzones[pl].getObjects()
  local x = 0
  local found = false

  for i, v in ipairs(objects) do
    if v.getName() == "AFK" then
      found = true
      v.destruct()
    end
  end
  if afkClocks[pl] ~= nil then
    found = true
    afkClocks[pl].destruct()
    afkClocks[pl] = nil
  end

  if not found then
    local params = {}
    params.sound = false
    params.type = 'Custom_Model'
    params.position = betzones[pl].getPosition()
    params.scale = {1, 1, 1}
    params.rotation = betzones[pl].getPosition()

    local playerhand = getPlayerHandPositionAndRotation(pl)
    params.position = {playerhand['pos_x'] + playerhand['trigger_forward_x'] * 5, 1.4, playerhand['pos_z'] + playerhand['trigger_forward_z'] * 5}
    params.rotation = {0, playerhand['rot_y'], 0}
    params.callback = 'setAfkButton'
    afkButton = spawnObject(params)

    local custom = {}
    custom.mesh = 'pastebin.com/raw.php?i=qv6mnq65'
    custom.diffuse = 'https://i.imgur.com/1fqBqfR.png'
    custom.type = 0

    afkButton.setCustomObject(custom)
    afkButton.setName('AFK')

    params = {}
    params.type = 'Digital_Clock'

    params.position = {playerhand['pos_x'] + playerhand['trigger_forward_x'] * 8, 0.5, playerhand['pos_z'] + playerhand['trigger_forward_z'] * 8}
    params.rotation = {90, playerhand['rot_y'], 0}

    params.callback = 'setafkClocksTimer'
    afkClocks[pl] = spawnObject(params)

  end

end

function setAfkButton(ob, pl)
  ob.lock()
end

function setPlayerAfk(ob, pl)
  if pl~=nil and not Player[pl].admin then return 1 end
  if actionon ~= nil then
    goAFK(ob, actionon)
  end
end


function setafkClocksTimer(ob, pl)
  ob.lock()
  ob.Clock.startStopwatch()
  ob.setColorTint({0.1, 0.1, 0.1})
  ob.setName("AFK")
  --afkClocks[pl].lock()
  --afkClocks[pl].Clock.startStopwatch()
end
for i=1,20 do
  _G['changeMachineButton'..i] = function(ob,pl)
    if not converting then
      convertingPlayerColor = pl
      convertingPlayer = true
      conversionPlayerValue = i
      ChangeMachineZone = spawnChangeMachineZone(ob, pl)
    end
  end
end

function spawnChangeMachineZone(ob, pl)
  --[[spawn scripting zone on in surface--]]
  local p = ob.getPosition()
  local r = ob.getRotation()
  local s = ob.getScale()

  params = {}

  params.type = 'ScriptingTrigger'
  params.callback = 'checkChangeMachineZone'
  params.scale = {s.x * 2, 20, s.z}
  params.position = {p.x - ((s.z / 2) * math.sin(math.rad(r.y))), p.y + 9, p.z - ((s.z / 2) * math.cos(math.rad(r.y)))}
  params.rotation = ob.getRotation()

  changeMachineZone = spawnObject(params)
end

function checkChangeMachineZone()
  startLuaCoroutine(Global, 'checkChangeMachineZoneCoroutine')
end

function checkChangeMachineZoneCoroutine()
  local objects1 = changeMachineZone.getObjects()
  local positions1 = {}
  local rotations1 = {}

  for i, v in ipairs(objects1) do
    positions1[#positions1 + 1] = v.getPosition()
    rotations1[#rotations1 + 1] = v.getRotation()
  end

  for i = 1, 2 do
    coroutine.yield(0)
  end

  local objects2 = changeMachineZone.getObjects()
  local positions2 = {}
  local rotations2 = {}

  --[[ Abort if the amount of chips/stacks changed --]]
  if #objects1 ~= #objects2 then
    broadcastToColor('Conversion aborted. Please wait for chips to be at rest on the platform and try again.', convertingPlayerColor, {1, 0, 0})
    changeMachineZone.destruct()
    converting = false
    return 1
  end

  for i, v in ipairs(objects1) do
    positions2[#positions2 + 1] = v.getPosition()
    rotations2[#rotations2 + 1] = v.getRotation()
  end

  --[[ Abort if any chips/stacks are moving --]]
  for i, v in ipairs (positions1) do
    if v.x ~= positions2[i].x or v.y ~= positions2[i].y or v.z ~= positions2[i].z then
      broadcastToColor ('Conversion aborted. Please wait for chips to be at rest on the platform and try again.', convertingPlayerColor, {1, 0, 0})
      changeMachineZone.destruct()
      convertingPlayer = false
      return 1
    end

    if rotations1[i].x ~= rotations2[i].x or rotations1[i].y ~= rotations2[i].y or rotations1[i].z ~= rotations2[i].z then
      broadcastToColor ('Conversion aborted. Please wait for chips to be at rest on the platform and try again.', convertingPlayerColor, {1, 0, 0})
      changeMachineZone.destruct()
      convertingPlayer = false
      return 1
    end
  end
  local pos = changeMachineZone.getPosition()
  pos["y"] = 2
  local rot = changeMachineZone.getRotation()
  rot["y"] = (rot["y"] + 180) % 360
  local chips = {}
  money = getChipValues(changeMachineZone, chips)

  for i, v in ipairs(chips) do
    v.destruct()
  end

  convertchangeMachine(money, pos, rot, 25)
  changeMachineZone.destruct()
  convertingPlayer = false
  return 1
end



function convertchangeMachine(money, p, r, height)


  local chipstack = {}
  chipstack = initializePot()
  for i, v in pairs(chipstack) do
    v.x = p.x + (math.cos(math.rad(r.y)) * v.xoffset) + (math.sin(math.rad(r.y)) * v.zoffset)
    v.z = p.z - (math.sin(math.rad(r.y)) * v.xoffset) + (math.cos(math.rad(r.y)) * v.zoffset)
    v.y = p.y + v.yoffset + v.height
  end

  local v = {}
  v = currencies[conversionPlayerValue]
  local custom = {}
  if v.value > 0 then
    params.rotation = v.params.rotation
    params.scale = v.params.scale
    params.params = {v.name}
    params.sound = false

    local rot = {}
    rot.x = (r.x + v.params.rotation[1]) % 360
    rot.y = (r.y + v.params.rotation[2]) % 360
    rot.z = (r.z + v.params.rotation[3]) % 360
    rot[1] = rot.x
    rot[2] = rot.y
    rot[3] = rot.z
    params.rotation = rot
    if chipstack[v.stack] == nil then
      stack = "misc"
    else
      stack = v.stack
    end
    if not v.standard then
      params.type = 'Custom_Model'
      params.callback_owner = Global
      custom.mesh = v.custom.mesh
      custom.diffuse = v.custom.diffuse
      custom.type = 5
      custom.material = 1
      local i = 0
      while money >= tonumber(v.value) and i < height do
        params.position = {}
        params.position.x = chipstack[stack].x
        params.position.y = chipstack[stack].y + chipstack[stack].height
        params.position.z = chipstack[stack].z
        local obj = spawnObject(params)
        obj.setCustomObject(custom)
        obj.setName(v.name)
        money = money - v.value
        chipstack[stack].height = chipstack[stack].height + v.height
        i = i + 1
        if i >= height then
          broadcastToColor("Conversion limit reached. The difference is spawned with the least amount of chips as possible", convertingPlayerColor, {1, 1, 0})
        end
      end
    else
      params.type = 'Chip_'.. v.value
      params.callback = nil
      params.callback_owner = Global
      params.params = nil
      local i = 0
      while money >= v.value and i < height do
        params.position = {}
        params.position.x = chipstack[stack].x
        params.position.y = chipstack[stack].y + chipstack[stack].height
        params.position.z = chipstack[stack].z
        spawnObject(params)
        money = money - v.value
        chipstack[stack].height = chipstack[stack].height + v.height
        i = i + 1
        if i >= height then
          broadcastToColor("Conversion limit reached. The difference is spawned with the least amount of chips as possible", convertingPlayerColor, {1, 1, 0})
        end
      end
    end
  end

  p["y"] = 10
  spawnChips(money, p, r)
  convertingPlayer = false
end

function savePlayerBag(ob, pl)

  if Player[pl].admin then
    pl = ob.getDescription()
  elseif ob.getDescription() ~= pl then
    return 1
  end
  allobjects = getAllObjects()
  allobjectsinzone = tablezones[pl].getObjects()
  allobjectsinback =  backtablezones[pl].getObjects()

  for _,v in ipairs(allobjectsinback) do
    table.insert(allobjectsinzone, v)
  end


  for i, v in ipairs(allobjectsinzone) do

    if v.type == 'Bag' and v.getDescription() == Player[pl].steam_id then
      playerbag = v
    end

  end



  -- 3D Bombs with Player's name as object name
  if playerbag == nil then
    broadcastToColor('You have no storage to save, try the \'Load\' button first', pl, {1, 1, 0})
    return 1
  else

    for i, v in ipairs(allobjectsinzone) do

      if v.type ~= 'Bag' and v.type ~= 'Tileset' and  v.getDescription() ~= Player[pl].steam_id then
        playerbag.putObject(v)
      end
    end
    for i, v in ipairs(allobjects) do

      if v.getDescription() == Player[pl].steam_id and v.type ~= 'Bag' and v.type ~= 'Tileset' then
        playerbag.putObject(v)
      end
    end
    Wait.frames(function() savebag.putObject(playerbag) end, 10)



  end
  Wait.frames(function()   calculatePots() end, 10)


end

for i,pl in next, colors do
  _G['loadSaveBag_'..pl] = function (ob, clicker_color)
    if savebag == nil then
      broadcast("No savebag assigned yet!")
      return 1
    end
    local steam_id, steam_name = steamProps(pl)

    p = tablezones[pl].getPosition()
    r = tablezones[pl].getRotation()
    xoffset = 1.2
    zoffset = -9
    x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
    z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
    y = p.y - 9
    pos = {x, y, z}
    pos.x = x
    pos.y = y
    pos.z = z
    r.y = (r.y + 180) % 360

    for i, v in ipairs(savebag.getObjects()) do
      if v.description == steam_id then
        local params = {}
        --params.position = Vector –Optional. Defaults to the container’s position + 2 in the x direction.
        --params.rotation = Vector –Optional. Defaults to the container’s rotation.
        params.position = tablezones[pl].getPosition()
        params.position.y = params.position.y - 8
        -- params.position.z = params.position.z - 4
        params.rotation = tablezones[pl].getRotation()
        params.callback_owner = Global
        --params.guid = v.guid
        params.index = v.index
        -- params.position.z = params.position.z + 7
        params.position = pos
        params.rotation = r
        params.smooth = false
        params.callback_function = function(obj) unloadBag(obj, pl) end
        saves[pl] = savebag.takeObject(params)

        --unloadBag(saves[pl], pl)

        calculatePots()
        if saves[pl].getDescription() == "" then
          for i, v in ipairs (dGetSeatedPlayers()) do
            if Player[v].admin then
              broadcastToColor('Warning: Steamid not found on savebag for player ' .. steam_name, v, {1, 1, 0})
            end
          end
        elseif saves[pl].getDescription() ~= steam_id then
          for i, v in ipairs (dGetSeatedPlayers()) do
            if Player[v].admin then
              broadcastToColor('Warning: Steamid on savebag dont match the current player ' .. steam_name, v, {1, 1, 0})
            end
          end
        end
        return 1
      end
    end
    for i, v in ipairs (dGetSeatedPlayers()) do
      if v == pl then
        -- if Player[v].admin or v == pl then
        for i, v in ipairs(getAllObjects()) do
          if v.type == 'Bag' and v.getDescription() == steam_id then
            saves[pl] = v
            return 0
          end
        end
        if options.starterpack then
          spawnSavebag(pl,pos,r)
        end
        -- will bug out if we try and send a message to an AI player
        if Player[v].seated then broadcastToColor('Warning: no save found for player ' .. steam_name .. '.', v, {1, 1, 0}) end
      end
    end
  end
end

function valueBag(bag)
  assert(bag~=nil,"nil bag")
  -- bank.credit = 0 -- what's in the bag
  -- bank.debit  = 0 -- what's out on the table
  -- bank.bombs  = 0 -- how many times you've busted
  -- bank.debt   = 0 -- losses and loans outstanding
  -- bank.wealth = 0 -- total net wealth
  local credit = 0
  local tF = bag.getData()['ContainedObjects'] or {}
  for i=1,#tF do
    local t = tF[i]
    if t.Nickname:sub(1,1) == '$' then
      credit = credit +  math.abs(t.Number or 1) * currencyToNumber(t.Nickname)
    end
  end
  return credit
end

function valueBombs(bombObj, player_color)
-- player_color can be used for lookups for the decreased cost of paying off bombs

  local pctCost = _G.getBustPayoffAsPct and getBustPayoffAsPct(player_color) or options.banking.loanPct
  local value = options.banking.buyinValue * pctCost/100
  local bombCount = bombObj~=nil and bombObj.getVar('current_value') or bombs[player_color] and bombs[player_color].getVar('current_value') or 0
  value = value * bombCount
  return bombCount, value
end

function updateBank(player_color, bagObj, bombObj)
  assert(player_color~=nil, "updateBank: input error player_color")
  local bagObj = ternaryOp(bagObj~=nil, bagObj, saves[player_color])
  local bombObj = ternaryOp(bombObj~=nil, bombObj, bombs[player_color])
  -- if missing bag
  local bagValue = bagObj~=nil and valueBag(bagObj) or 0

  banks[player_color].credit = bagValue + getChipValues(backtablezones[player_color],{})
  banks[player_color].stack = getChipValues(tablezones[player_color],{})
  -- if missing bomb
  banks[player_color].bombs, banks[player_color].debt = valueBombs(bombObj, player_color)
  banks[player_color].wealth = banks[player_color].stack + banks[player_color].credit - banks[player_color].debt
end

function unloadBag(bag, pl)
  Wait.frames(function()
    Wait.condition(function()
      Wait.frames(function()
        p = tablezones[pl].getPosition()
        r = tablezones[pl].getRotation()
        bp = backtablezones[pl].getPosition()
        br = backtablezones[pl].getRotation()
        xoffset = 1.2
        zoffset = 1
        x = p.x + (math.cos(math.rad(r.y)) * xoffset) + (math.sin(math.rad(r.y)) * zoffset)
        z = p.z - (math.sin(math.rad(r.y)) * xoffset) + (math.cos(math.rad(r.y)) * zoffset)
        y = p.y - 10

        pos = {x, y, z}
        pos.x = x
        pos.y = y
        pos.z = z

        bx = bp.x + (math.cos(math.rad(br.y)) * xoffset) + (math.sin(math.rad(br.y)) * zoffset)
        bz = bp.z - (math.sin(math.rad(br.y)) * xoffset - 5) + (math.cos(math.rad(br.y)) * zoffset - 5)
        by = bp.y - 10

        bpos = {bx, by, bz}
        bpos.x = bx
        bpos.y = by
        bpos.z = bz
        banks[pl].credit = 0
        local tF = bag.getData()['ContainedObjects'] or {}
        for i=1,#tF do
            local t = tF[i]
            if t.Nickname:sub(1,1) == '$' then
                banks[pl].credit = banks[pl].credit +  math.abs(t.Number or 1) * currencyToNumber(t.Nickname)
            end
        end
        local reconstructChips = false
        if banks[pl].credit > options.banking.buyinValue then
            spawnChips(options.banking.buyinValue,pos,bag.getRotation())
            reconstructChips = true
        end
        baggy = bag.getObjects()
        for i, t in ipairs(baggy) do
          if t.name:sub(1, 1) == '$' then
            t.position = reconstructChips and bag.getPosition()-Vector(0,1+i,5) or pos
            t.callback_function = function(obj)
              if reconstructChips then
                obj.destruct()
              end
              if (os.time() - lastCollectTime) < 1 then
                return 1
              else
                sortPlayerChips(_, pl)
                sortPlayerChips(_, pl)
                lastCollectTime = os.time()
              end
            end
            bag.takeObject(t)
          elseif string.match(t.description,'Bust Counter: ')~=nil then
            local bpos = bag.getPosition() - 5 * bag.getTransformForward()
            t.smooth = false
            t.position = bpos
            t.rotation = {br.x, br.y-90, 45}
            t.callback_function = function(o) Wait.frames(function() o.setLock(true) bombs[pl]=o end, 10) end
            bag.takeObject(t)
          end
        end
      if reconstructChips then
        spawnChips(banks[pl].credit - options.banking.buyinValue,
        bag.getPosition()
        + Vector(0,1,0), bag.getRotation(), nil, true)
        end
        banks[pl].credit = banks[pl].credit - options.banking.buyinValue
      end, 10, 0)
      Wait.frames(function() sortPlayerChips(_,pl) end, 30)
      Wait.frames(function()
        if options.lockbags then
          bag.setLock(true)
        end
      end, 10, 0)
    end, function() return bag.loading_custom == false end)
  end, 1)
end


function spawnSavebag(pl, bpos, br)
  for i, v in ipairs(defaultSave.getObjects()) do
    if v.type == 'Bag' and v.getDescription() ~= "Infinite Money Bag" then
      dsave = v

      params = {}
      params.position = bpos
      params.rotation = br
      params.smooth = false
      params.callback_function = function(obj)
        local steam_id, steam_name = steamProps(pl)
        obj.setName(steam_name)
        obj.setDescription(steam_id)
        setNewPlayerBag(obj, pl)
      end
      dsave.clone(params)
    end
  end
end

function setNewPlayerBag(obj, pl, pos)
  for i, v in ipairs(obj.getObjects()) do
    if v.name == 'Bust Counter' then
      v.position = obj.positionToWorld(Vector(0,-15,0))
      v.rotation = obj.getRotation()
      v.callback_function = function(o)
        o.setDescription("Bust Counter: " .. dPlayer(pl).steam_id)
        o.setLock(true)
        obj.putObject(o)
        Wait.condition(function() unloadBag(obj, pl) end, ||o==nil, 5)
      end
      obj.takeObject(v)
    end
  end
  saves[pl] = obj
end

--[[ rPrint(struct, [limit], [indent]) Recursively print arbitrary data.
  Set limit (default 100) to stanch infinite loops.
  Indents tables as [KEY] VALUE, nested tables as [KEY] [KEY]...[KEY] VALUE
  Set indent ("") to prefix each line:    Mytable [KEY] [KEY]...[KEY] VALUE
--]]
function rPrint(s, l, i) -- recursive Print (structure, limit, indent)
  l = (l) or 100; i = i or ""; -- default item limit, indent string
  if (l < 1) then print "ERROR: Item limit reached."; return l - 1 end;
  local ts = type(s);
  if (ts ~= "table") then print (i, ts, s); return l - 1 end
  print (i, ts); -- print "table"
  for k, v in pairs(s) do -- print "[ KEY ] VALUE"
    l = rPrint(v, l, i.."\t[ "..tostring(k).." ]  ");
    if (l < 0) then break end
  end
  return l
end

function abbreviated_value(n)
  return trim(util.currency.valueToLabel(n,5,''))
end

--[[ a crude conversion function to convert a currency to a number. DOES NOT ACCOUNT FOR NEGATIVE NUMBERS. accounts for decimals (for example,  a crude conversion function to convert a currency to a number. DOES NOT ACCOUNT FOR NEGATIVE NUMBERS. accounts for decimals (for example, $2.50), but will return nil if multiple dots are found, as a valid number would only have one (using american formatting anyway). does not account for other characters, however, so a random string of mixed up numbers and letters will return a value. --]]
function currencyToNumber(s)
  local value = 0 -- the value is updated as numbers are found in the string
  if string.sub(s,1,1) == "+" then return nil end
  local dec = 1 -- the decimal places (is that the right term?), multiplied by 10 each time a number is found
  local decimalfound = false -- the first time a decimal point is found, used to check for invalid number strings if it finds multiple decimal points (like an ip address)
  local r = string.reverse(s) -- reverse the original string to simplify analysis
  for i = 1, string.len(r) do
    if tonumber(string.sub(r, i, i)) then -- if the character is a number, add its value times the decimal places to the 'value' variable
      value = value + (tonumber(string.sub(r, i, i)) * dec)
      dec = dec * 10
    elseif string.sub(r, i, i) == '.' then -- if the character is a decimal point, divide the value by the decimal places and reset the 'dec' variable to 1
      if decimalfound then return nil end
      value = value / dec
      dec = 1
      decimalfound = true
    end
  end
  if value ~= 0 then return value else return nil end -- return the value if it's not still 0, otherwise return nil
end
DEBUG_LEVEL = 0

function stripTable(tbl)
  if type(tbl) == 'table' then
    for i,v in next, tbl do
      tbl[i] = stripTable(tbl[i])
    end
  else
    if type(tbl)=='function' then
      tbl = nil
    end
  end
  return tbl
end

function dPlayer(plc)
  local pl_out = Player[plc]
  if pl_out==nil or not pl_out.seated then
    pl_out = {steam_id='0xDEADBEEF_' .. plc, steam_name='DebugAI_'..plc}
  end
  return pl_out
end

function dGetSeatedPlayers()
  if DEBUG_LEVEL == nil or DEBUG_LEVEL < 5  then
    return getSeatedPlayers()
  else
    return deepcopy(colors)
  end
end

function dlog(level_, ...)
  if DEBUG_LEVEL ~= nil and DEBUG_LEVEL > level_ then
    return log(...)
  end
  return
end

layout = {}
function layout.nukeZones()
  for i,v in next, colors do
    for j, t_dat in next, {'tablezones', 'backtablezones', 'betzones',} do -- 'handzones',
      if _G[t_dat][v]~=nil then
        _G[t_dat][v].destruct()
      end
    end
  end
end
function layout.reorient(num_players)
  for j,objs in next, {propstableobjects, backtableobjects, tableobjects} do
    for i,v in next, objs do
      pos = v.getPosition()
      pos.x = betzones[v.getDescription()].getPosition().x
      v.setPosition(pos)
    end
  end
  for j,zones in next, {tablezones, backtablezones} do
    for i,v in next, zones do
      pos = v.getPosition()
      pos.x = betzones[v.getName():match('.*_(%S+)$')].getPosition().x
      v.setPosition(pos)
    end
  end
end
function layout.tableSetup(num_players, config_in)
  log('--using ' .. Tables.getTable())
  layout.tableSetupOvalOld(num_players)
end
function layout.tableSetupOval(num_players)
end
function layout.tableSetupOvalOld(num_players)
  if Tables.getTable()~='Poker' then Tables.setTable('Poker') Wait.frames(function() for i,v in next, Hands.getHands() do if indexTable(handzones,v)==nil then v.destruct() end end end, 2) end
  local deadzone = {position=Vector(0,-3,0), rotation=Vector(0,0,0)}
  local gcolors = {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink"}
  local tablezones_data = {}
  local backtablezones_data = {}
  local betzones_data = {}
  handzones_data = {}
  local tableobjects_data = {}
  local backtableobjects_data = {}
  local propstableobjects_data = {}
  local lcolors = {}
  local overrides_position = {}
  local overrides_rotation = {}
  local foldtoken_data = {}
  --for i,v in next, tablezones do log('tablezones_data["'..i..'"]='..dump(v.getData())) end
  tablezones_data["White"]={ ["GUID"] = "fe7624",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -15.0746126174927,["posY"] = 11.3702411651611,["posZ"] = -22.1153583526611,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 11.6338138580322,["scaleY"] = 20,["scaleZ"] = 11.7782640457153,} ,["Nickname"] = "auto_tablezones_White",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Brown"]={ ["GUID"] = "b8cde0",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -32.862117767334,["posY"] = 11.3699998855591,["posZ"] = -18.7070693969727,["rotX"] = 0,["rotY"] = 30.0000019073486,["rotZ"] = 0,["scaleX"] = 11.6696929931641,["scaleY"] = 20,["scaleZ"] = 11.7296752929688,} ,["Nickname"] = "auto_tablezones_Brown",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Red"]={ ["GUID"] = "f33c02",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -41.2091674804688,["posY"] = 11.3699998855591,["posZ"] = 10.9235191345215,["rotX"] = 0,["rotY"] = 120.000007629395,["rotZ"] = 0,["scaleX"] = 11.5792112350464,["scaleY"] = 20,["scaleZ"] = 11.559889793396,} ,["Nickname"] = "auto_tablezones_Red",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Orange"]={ ["GUID"] = "a96804",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -19.2900009155273,["posY"] = 11.3699998855591,["posZ"] = 22.0784282684326,["rotX"] = 0,["rotY"] = 179.996185302734,["rotZ"] = 0,["scaleX"] = 11.5721378326416,["scaleY"] = 20,["scaleZ"] = 12.0912733078003,} ,["Nickname"] = "auto_tablezones_Orange",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Yellow"]={ ["GUID"] = "08e7a3",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -6.86214065551758,["posY"] = 11.3699998855591,["posZ"] = 22.3300018310547,["rotX"] = 0,["rotY"] = 179.996185302734,["rotZ"] = 0,["scaleX"] = 11.5176954269409,["scaleY"] = 20,["scaleZ"] = 11.9161520004272,} ,["Nickname"] = "auto_tablezones_Yellow",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Green"]={ ["GUID"] = "e2ff95",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 6.10206174850464,["posY"] = 11.3699998855591,["posZ"] = 22.258451461792,["rotX"] = 0,["rotY"] = 179.996185302734,["rotZ"] = 0,["scaleX"] = 11.5429906845093,["scaleY"] = 20,["scaleZ"] = 11.9299154281616,} ,["Nickname"] = "auto_tablezones_Green",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Purple"]={ ["GUID"] = "d1cf88",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 32.4906578063965,["posY"] = 11.3699998855591,["posZ"] = -19.1089000701904,["rotX"] = 0,["rotY"] = 330,["rotZ"] = 0,["scaleX"] = 11.7181186676025,["scaleY"] = 20,["scaleZ"] = 11.3332996368408,} ,["Nickname"] = "auto_tablezones_Purple",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Blue"]={ ["GUID"] = "d03a42",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 41.5234146118164,["posY"] = 11.3699998855591,["posZ"] = 10.1806898117065,["rotX"] = 0,["rotY"] = 240,["rotZ"] = 0,["scaleX"] = 11.4695701599121,["scaleY"] = 20,["scaleZ"] = 11.3299999237061,} ,["Nickname"] = "auto_tablezones_Blue",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Teal"]={ ["GUID"] = "92c6c4",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 18.4299945831299,["posY"] = 11.3699998855591,["posZ"] = 21.9871921539307,["rotX"] = 0,["rotY"] = 179.996185302734,["rotZ"] = 0,["scaleX"] = 11.6035709381104,["scaleY"] = 20,["scaleZ"] = 11.62619972229,} ,["Nickname"] = "auto_tablezones_Teal",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tablezones_data["Pink"]={ ["GUID"] = "71d958",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 14.8009042739868,["posY"] = 11.3699998855591,["posZ"] = -22.2189922332764,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 11.6870231628418,["scaleY"] = 20,["scaleZ"] = 11.6331806182861,} ,["Nickname"] = "auto_tablezones_Pink",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}   --

  --
  backtablezones_data["White" ]={ ["GUID"] = "1904be",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -15.1495780944824,["posY"] = 11.3699998855591,["posZ"] = -39.6833343505859,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 11.2809400558472,["scaleY"] = 20.2023296356201,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_White",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Brown" ]={ ["GUID"] = "e9b296",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -41.565990447998,["posY"] = 11.346734046936,["posZ"] = -34.0138092041016,["rotX"] = 0,["rotY"] = 30.0000019073486,["rotZ"] = 0,["scaleX"] = 11.5004281997681,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Brown",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Red"   ]={ ["GUID"] = "ee0d04",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -56.5630226135254,["posY"] = 11.3133058547974,["posZ"] = 19.8211688995361,["rotX"] = 0,["rotY"] = 120.000007629395,["rotZ"] = 0,["scaleX"] = 11.6160373687744,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Red",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Orange"]={ ["GUID"] = "b131a2",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -19.2899475097656,["posY"] = 11.3129949569702,["posZ"] = 39.8384017944336,["rotX"] = 0,["rotY"] = 180.000778198242,["rotZ"] = 0,["scaleX"] = 11.551308631897,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Orange",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Yellow"]={ ["GUID"] = "bb2a9a",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -6.91379404067993,["posY"] = 11.2309942245483,["posZ"] = 39.9606323242188,["rotX"] = 0,["rotY"] = 180.000778198242,["rotZ"] = 0,["scaleX"] = 11.6007833480835,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Yellow",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Green" ]={ ["GUID"] = "b9938f",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 6.09367799758911,["posY"] = 11.3752660751343,["posZ"] = 39.7267074584961,["rotX"] = 0,["rotY"] = 180.000778198242,["rotZ"] = 0,["scaleX"] = 11.7122468948364,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Green",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Teal"  ]={ ["GUID"] = "144824",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 18.4300765991211,["posY"] = 11.3877019882202,["posZ"] = 39.6671829223633,["rotX"] = 0,["rotY"] = 180.000778198242,["rotZ"] = 0,["scaleX"] = 11.4780893325806,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Teal",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Blue"  ]={ ["GUID"] = "b0eda0",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 56.6809844970703,["posY"] = 11.3791742324829,["posZ"] = 18.9557209014893,["rotX"] = 0,["rotY"] = 240,["rotZ"] = 0,["scaleX"] = 11.5211248397827,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Blue",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Purple"]={ ["GUID"] = "a17f45",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 41.426326751709,["posY"] = 11.2557716369629,["posZ"] = -34.2445487976074,["rotX"] = 0,["rotY"] = 330,["rotZ"] = 0,["scaleX"] = 11.6031675338745,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Purple",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtablezones_data["Pink"  ]={ ["GUID"] = "b04a49",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 14.8161087036133,["posY"] = 11.2887144088745,["posZ"] = -39.9200248718262,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 11.5767393112183,["scaleY"] = 20,["scaleZ"] = 23.5200004577637,} ,["Nickname"] = "auto_backtablezones_Pink",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --
  betzones_data["White" ]={ ["GUID"] = "420cfb",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -15.1291990280151,["posY"] = 11.3000001907349,["posZ"] = -10.0575160980225,["rotX"] = 0,["rotY"] = 359.954650878906,["rotZ"] = 0,["scaleX"] = 9.51107025146484,["scaleY"] = 20,["scaleZ"] = 10.1839227676392,} ,["Nickname"] = "auto_betzones_White",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Brown" ]={ ["GUID"] = "39fd59",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -26.8676948547363,["posY"] = 11.3000001907349,["posZ"] = -8.5831298828125,["rotX"] = 0,["rotY"] = 30.0000019073486,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Brown",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Red"   ]={ ["GUID"] = "7d419f",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -30.4682292938232,["posY"] = 11.3000001907349,["posZ"] = 4.94558620452881,["rotX"] = 0,["rotY"] = 120.000007629395,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Red",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Orange"]={ ["GUID"] = "332aa4",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -19.2900009155273,["posY"] = 11.2600708007813,["posZ"] = 10.4299354553223,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Orange",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Yellow"]={ ["GUID"] = "0377d5",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = -6.92999982833862,["posY"] = 11.3100004196167,["posZ"] = 10.3916072845459,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Yellow",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Green" ]={ ["GUID"] = "8a2729",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 6.09000015258789,["posY"] = 11.3000001907349,["posZ"] = 10.5092391967773,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Green",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Teal"  ]={ ["GUID"] = "db2d03",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 18.4300003051758,["posY"] = 11.3000001907349,["posZ"] = 10.4429140090942,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Teal",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Blue"  ]={ ["GUID"] = "b93bb7",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 31.2238426208496,["posY"] = 11.3000001907349,["posZ"] = 4.59625911712646,["rotX"] = 0,["rotY"] = 240,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Blue",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Purple"]={ ["GUID"] = "c43aea",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 26.6550388336182,["posY"] = 11.3000001907349,["posZ"] = -8.68424224853516,["rotX"] = 0,["rotY"] = 330,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Purple",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  betzones_data["Pink"  ]={ ["GUID"] = "3a8997",["Name"] = "ScriptingTrigger",["Transform"] = { ["posX"] = 14.4799289703369,["posY"] = 11.3000001907349,["posZ"] = -10.0586605072021,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 9,["scaleY"] = 20,["scaleZ"] = 10,} ,["Nickname"] = "auto_betzones_Pink",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0.509803950786591,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --
  handzones_data["White" ]={ ["GUID"] = "7f36fa",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = -14.9997625350952,["posY"] = 3.91584968566895,["posZ"] = -14.3411273956299,["rotX"] = 0,["rotY"] = 0.131209075450897,["rotZ"] = 0,["scaleX"] = 5.99999809265137,["scaleY"] = 7.00000047683716,["scaleZ"] = 0.920454978942871,} ,["Nickname"] = "auto_handzones_White",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 1,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "White",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Brown" ]={ ["GUID"] = "5e369a",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = -29.2322654724121,["posY"] = 4.23023796081543,["posZ"] = -12.3026256561279,["rotX"] = 0,["rotY"] = 30.0000019073486,["rotZ"] = 0,["scaleX"] = 5.99996423721313,["scaleY"] = 7.00000047683716,["scaleZ"] = 0.991678774356842,} ,["Nickname"] = "auto_handzones_Brown",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.442999958992004,["g"] = 0.230999946594238,["b"] = 0.0899999961256981,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Brown",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Red"   ]={ ["GUID"] = "bfb543",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = -34.5260429382324,["posY"] = 3.15601921081543,["posZ"] = 6.91618490219116, ["rotX"] = 0,["rotY"] = 120.000007629395,["rotZ"] = -2.54444360546502E-14,["scaleX"] = 6.02485990524292,["scaleY"] = 7.58129167556763,["scaleZ"] = 1.0366108417511,} ,["Nickname"] = "auto_handzones_Red",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.856000006198883,["g"] = 0.0999999716877937,["b"] = 0.0939999595284462,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Red",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Orange"]={ ["GUID"] = "3c1964",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = -19.2900314331055,["posY"] = 3.15601921081543,["posZ"] = 14.4035835266113, ["rotX"] = -6.34608795735403E-07,["rotY"] = 180.000778198242,["rotZ"] = -3.1097391683943E-07,["scaleX"] = 6.00000143051147,["scaleY"] = 7.58156871795654,["scaleZ"] = 1.11778163909912,} ,["Nickname"] = "auto_handzones_Orange",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.955999910831451,["g"] = 0.391999959945679,["b"] = 0.112999953329563,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Orange",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Yellow"]={ ["GUID"] = "1895ca",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = -6.92825794219971,["posY"] = 3.15601921081543,["posZ"] = 14.4009590148926, ["rotX"] = 0,["rotY"] = 180.000778198242,["rotZ"] = 0,["scaleX"] = 6.00000143051147,["scaleY"] = 7.58156871795654,["scaleZ"] = 0.942157566547394,} ,["Nickname"] = "auto_handzones_Yellow",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.904999971389771,["g"] = 0.898000001907349,["b"] = 0.171999961137772,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Yellow",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Green" ]={ ["GUID"] = "d3c761",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = 6.08849287033081, ["posY"] = 3.15601921081543,["posZ"] = 14.443244934082,  ["rotX"] = -6.34608795735403E-07,["rotY"] = 180.000778198242,["rotZ"] = -3.1097391683943E-07,["scaleX"] = 6.00000143051147,["scaleY"] = 7.58156871795654,["scaleZ"] = 1.03386306762695,} ,["Nickname"] = "auto_handzones_Green",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.191999971866608,["g"] = 0.700999975204468,["b"] = 0.16799995303154,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Green",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Teal"  ]={ ["GUID"] = "f90819",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = 18.426383972168,  ["posY"] = 3.15601921081543,["posZ"] = 14.3079280853271, ["rotX"] = -6.34608795735403E-07,["rotY"] = 180.000778198242,["rotZ"] = -3.1097391683943E-07,["scaleX"] = 6.00000143051147,["scaleY"] = 7.58156871795654,["scaleZ"] = 0.98114401102066,} ,["Nickname"] = "auto_handzones_Teal",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.128999948501587,["g"] = 0.694000005722046,["b"] = 0.606999933719635,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Teal",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Blue"  ]={ ["GUID"] = "f23196",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = 34.8340263366699, ["posY"] = 3.77695655822754,["posZ"] = 6.08352851867676, ["rotX"] = 2.84285324170241E-08,["rotY"] = 240,["rotZ"] = 0,["scaleX"] = 6.43681335449219,["scaleY"] = 7.58156871795654,["scaleZ"] = 1.00971627235413,} ,["Nickname"] = "auto_handzones_Blue",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.117999978363514,["g"] = 0.529999971389771,["b"] = 1,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Blue",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Purple"]={ ["GUID"] = "5b7f2a",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = 28.9922370910645, ["posY"] = 4.23023796081543,["posZ"] = -12.7660417556763,["rotX"] = 6.95114010795805E-07,["rotY"] = 330,["rotZ"] = 0,["scaleX"] = 6.00002288818359,["scaleY"] = 7.58156871795654,["scaleZ"] = 0.927715659141541,} ,["Nickname"] = "auto_handzones_Purple",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.626999974250793,["g"] = 0.124999977648258,["b"] = 0.940999984741211,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Purple",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  handzones_data["Pink"  ]={ ["GUID"] = "a57f9c",["Name"] = "HandTrigger",["Transform"] = { ["posX"] = 14.5000562667847, ["posY"] = 3.74861335754395,["posZ"] = -14.503870010376, ["rotX"] = 0,["rotY"] = 0.131209075450897,["rotZ"] = 0,["scaleX"] = 5.99999809265137,["scaleY"] = 7.00000047683716,["scaleZ"] = 1.09943902492523,} ,["Nickname"] = "auto_handzones_Pink",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.959999978542328,["g"] = 0.438999980688095,["b"] = 0.806999981403351,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = false,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["FogColor"] = "Pink",["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --tableobjects={} for i,v in next, getObjects() do if v.getName() == "Front Table" then tableobjects[v.getDescription()]=v end end
  --for i,v in next, tableobjects do log('tableobjects_data["'..i..'"]='..dump(v.getData())) end
  tableobjects_data["Pink"]={ ["GUID"] = "62ee4e",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 14.8579511642456,["posY"] = 1.39999997615814,["posZ"] = -22.2307434082031,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 180.003646850586,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Pink",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 0.650980412960052,["b"] = 1,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["White"]={ ["GUID"] = "b07168",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -14.9901876449585,["posY"] = 1.39999997615814,["posZ"] = -21.9657955169678,["rotX"] = 0,["rotY"] = -7.95147308795528E-16,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "White",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 0.996085464954376,["b"] = 1,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Blue"]={ ["GUID"] = "74a9ba",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 41.3289222717285,["posY"] = 1.40021467208862,["posZ"] = 10.2162885665894,["rotX"] = -5.00904161526705E-06,["rotY"] = 240,["rotZ"] = 180.000671386719,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Blue",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.148979961872101,["g"] = 0.16466623544693,["b"] = 0.953603327274323,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Teal"]={ ["GUID"] = "08c328",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 18.4300003051758,["posY"] = 1.40089464187622,["posZ"] = 21.8657302856445,["rotX"] = 0.00118197547271848,["rotY"] = 180,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Teal",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.148979961872101,["g"] = 0.811764717102051,["b"] = 0.827610015869141,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Green"]={ ["GUID"] = "69d2c9",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 6.09000015258789,["posY"] = 1.40000367164612,["posZ"] = 22.0658378601074,["rotX"] = -1.87301822052177E-07,["rotY"] = 180,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Green",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.148979961872101,["g"] = 0.854901909828186,["b"] = 0.239174008369446,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Yellow"]={ ["GUID"] = "608ec0",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -6.92999982833862,["posY"] = 1.40009391307831,["posZ"] = 22.0787124633789,["rotX"] = 9.85478436632548E-08,["rotY"] = 180,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Yellow",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 1,["g"] = 1,["b"] = 0.188195616006851,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Red"]={ ["GUID"] = "c6c961",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -41.2453536987305,["posY"] = 1.40042889118195,["posZ"] = 10.8954172134399,["rotX"] = 0.0500000193715096,["rotY"] = 120.000007629395,["rotZ"] = 179.994934082031,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Red",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.949019610881805,["g"] = 0.0156862754374743,["b"] = 0.125447750091553,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Orange"]={ ["GUID"] = "2d8d40",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -19.2900009155273,["posY"] = 1.39999997615814,["posZ"] = 21.9840965270996,["rotX"] = 4.10916456416999E-08,["rotY"] = 180,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Orange",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.929411768913269,["g"] = 0.397806197404861,["b"] = 0.0392156876623631,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Brown"]={ ["GUID"] = "413411",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -32.6723442077637,["posY"] = 1.39999282360077,["posZ"] = -18.5692615509033,["rotX"] = 4.16678108683399E-10,["rotY"] = 30.0000019073486,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Brown",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.512488007545471,["g"] = 0.100294791162014,["b"] = 0,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  tableobjects_data["Purple"]={ ["GUID"] = "cee0ab",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 32.5358772277832,["posY"] = 1.39956474304199,["posZ"] = -18.7949619293213,["rotX"] = -5.01591966894921E-06,["rotY"] = 330,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Front Table",["Description"] = "Purple",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0.827593803405762,["g"] = 0.00720627745613456,["b"] = 0.857741713523865,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --backtableobjects={} for i,v in next, getObjects() do if v.getName() == "Back Table" then backtableobjects[v.getDescription()]=v end end
  --for i,v in next, backtableobjects do log('backtableobjects_data["'..i..'"]='..dump(v.getData())) end
  backtableobjects_data["Pink"]={ ["GUID"] = "f6113e",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 14.8678846359253,["posY"] = 1.39990758895874,["posZ"] = -34.1040382385254,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Pink",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823835507035255,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["White"]={ ["GUID"] = "769186",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -14.9707660675049,["posY"] = 1.39999997615814,["posZ"] = -33.774829864502,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "White",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273804545403,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Blue"]={ ["GUID"] = "1731a2",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 51.6083145141602,["posY"] = 1.40038025379181,["posZ"] = 16.0671463012695,["rotX"] = -5.00867690789164E-06,["rotY"] = 240,["rotZ"] = 180.00065612793,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Blue",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273506522179,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Teal"]={ ["GUID"] = "771330",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 18.4300003051758,["posY"] = 1.39987707138062,["posZ"] = 33.6425323486328,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 179.997192382813,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Teal",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273506522179,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Green"]={ ["GUID"] = "a5d767",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 6.09000015258789,["posY"] = 1.40000700950623,["posZ"] = 33.8749923706055,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Green",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273506522179,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Yellow"]={ ["GUID"] = "c9034e",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -6.92999982833862,["posY"] = 1.40009272098541,["posZ"] = 33.8421516418457,["rotX"] = 2.49036711466033E-05,["rotY"] = 180,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Yellow",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273059487343,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Orange"]={ ["GUID"] = "13d433",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -19.2900009155273,["posY"] = 1.39999997615814,["posZ"] = 33.7601661682129,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Orange",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273059487343,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Red"]={ ["GUID"] = "24a966",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -51.4924621582031,["posY"] = 1.39999997615814,["posZ"] = 16.8393268585205,["rotX"] = 8.3918280324724E-07,["rotY"] = 120.000007629395,["rotZ"] = 180.000778198242,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Red",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273059487343,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Brown"]={ ["GUID"] = "6daa92",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -38.5722923278809,["posY"] = 1.39172279834747,["posZ"] = -28.8107204437256,["rotX"] = -1.64879949970942E-11,["rotY"] = 30.0000019073486,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Brown",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273059487343,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  backtableobjects_data["Purple"]={ ["GUID"] = "a55e40",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 38.5075340270996,["posY"] = 1.40124177932739,["posZ"] = -29.1683330535889,["rotX"] = 4.16881668074964E-10,["rotY"] = 330,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "Back Table",["Description"] = "Purple",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0792273059487343,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --/execute btobjs={} for i,v in next, getObjects() do if v.getName() == "Back Table" then btobjs[v.getDescription()]=v end end
  --/execute ptobjs={} for i,v in next, btobjs do ptobjs[v.getDescription()] = Physics.cast({origin=v.getPosition(), direction=Vector(0,1,0), max_distance=1, type=3, size=Vector(10,1,30), orientation=v.getRotation(), debug=true}) end
  --/execute propstableobjects={} for i,v in next, ptobjs do for j,w in next, v do if w.hit_object.getName()=="PropsPlatform" then w.hit_object.setDescription(i) end end end
  --/execute propstableobjects={} for i,v in next, getObjects() do if v.getName() == "PropsPlatform" then propstableobjects[v.getDescription()]=v end end
  --/execute for i,v in next, propstableobjects do log('propstableobjects_data["'..i..'"]='..dump(v.getData())) end
  propstableobjects_data["Pink"]={ ["GUID"] = "73f2db",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 14.9471607208252,["posY"] = 1.78262829780579,["posZ"] = -45.728141784668,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Pink",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823835209012032,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Purple"]={ ["GUID"] = "903422",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 44.3209838867188,["posY"] = 1.78371644020081,["posZ"] = -39.1490249633789,["rotX"] = 0.00183598371222615,["rotY"] = 330,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Purple",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Blue"]={ ["GUID"] = "c21b74",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 61.7392692565918,["posY"] = 1.78287732601166,["posZ"] = 21.929271697998,["rotX"] = 0.0018359839450568,["rotY"] = 240,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Blue",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Teal"]={ ["GUID"] = "c3d5c0",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 18.4717750549316,["posY"] = 1.78268373012543,["posZ"] = 45.3236694335938,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Teal",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Green"]={ ["GUID"] = "bc4e49",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = 6.11331272125244,["posY"] = 1.78251838684082,["posZ"] = 45.4800109863281,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Green",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Yellow"]={ ["GUID"] = "9589a1",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -6.85239028930664,["posY"] = 1.78260958194733,["posZ"] = 45.5046043395996,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Yellow",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Red"]={ ["GUID"] = "707579",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -61.1644706726074,["posY"] = 1.78252220153809,["posZ"] = 22.5443935394287,["rotX"] = 0.0018359839450568,["rotY"] = 120.000007629395,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Red",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Brown"]={ ["GUID"] = "610005",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -44.3628005981445,["posY"] = 1.70478332042694,["posZ"] = -38.8930015563965,["rotX"] = 0.00159965234342963,["rotY"] = 30.0000019073486,["rotZ"] = 180.000900268555,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Brown",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["Orange"]={ ["GUID"] = "e1a8fc",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -19.2344207763672,["posY"] = 1.78251802921295,["posZ"] = 45.4452133178711,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "Orange",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  propstableobjects_data["White"]={ ["GUID"] = "372105",["Name"] = "Tileset_Floor",["Transform"] = { ["posX"] = -15.217945098877,["posY"] = 1.78249537944794,["posZ"] = -45.207649230957,["rotX"] = 0.0018359839450568,["rotY"] = 0,["rotZ"] = 180,["scaleX"] = 6,["scaleY"] = 1,["scaleZ"] = 6,} ,["Nickname"] = "PropsPlatform",["Description"] = "White",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0.0823834910988808,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --/execute for i,v in next, foldtoken do log('foldtoken_data["'..i..'"]='..dump(v.getData())) end
  foldtoken_data["Blue"  ]={ ["GUID"] = "527cfa",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = 31.0389881134033,["posY"] = 1.39999997615814,["posZ"] = 4.43368005752563,["rotX"] = 0,["rotY"] = 60.359619140625,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Blue",["GMNotes"] = "auto_foldtoken_Blue",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Brown" ]={ ["GUID"] = "5bc8e2",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = -27.1310501098633,["posY"] = 1.39999997615814,["posZ"] = -8.56518077850342,["rotX"] = 0,["rotY"] = 209.892227172852,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Brown",["GMNotes"] = "auto_foldtoken_Brown",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Green" ]={ ["GUID"] = "d9a150",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = 6.16170072555542,["posY"] = 1.39999997615814,["posZ"] = 10.5175523757935,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "",["GMNotes"] = "auto_foldtoken_Green",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Orange"]={ ["GUID"] = "01e4aa",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = -19.232931137085,["posY"] = 1.39999997615814,["posZ"] = 10.4103975296021,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "",["GMNotes"] = "auto_foldtoken_Orange",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Pink"  ]={ ["GUID"] = "f3833c",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = 14.3191356658936,["posY"] = 1.39999997615814,["posZ"] = -10.0981788635254,["rotX"] = 0,["rotY"] = 179.960678100586,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Pink",["GMNotes"] = "auto_foldtoken_Pink",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Purple"]={ ["GUID"] = "e0e08c",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = 26.8448543548584,["posY"] = 1.39999997615814,["posZ"] = -8.19207286834717,["rotX"] = 0,["rotY"] = 151.302810668945,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Purple",["GMNotes"] = "auto_foldtoken_Purple",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Red"   ]={ ["GUID"] = "57b8a9",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = -30.6087112426758,["posY"] = 1.39999997615814,["posZ"] = 4.82353162765503,["rotX"] = 0,["rotY"] = 300.160919189453,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Red",["GMNotes"] = "auto_foldtoken_Red",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Teal"  ]={ ["GUID"] = "72b160",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = 18.5907592773438,["posY"] = 1.39999997615814,["posZ"] = 10.2646141052246,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Teal",["GMNotes"] = "auto_foldtoken_Teal",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["White" ]={ ["GUID"] = "e7b6d5",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = -15.1796169281006,["posY"] = 1.39999997615814,["posZ"] = -9.98877906799316,["rotX"] = 0,["rotY"] = 180,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "White",["GMNotes"] = "auto_foldtoken_White",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  foldtoken_data["Yellow"]={ ["GUID"] = "27f46e",["Name"] = "Custom_Token",["Transform"] = { ["posX"] = -6.96443128585815,["posY"] = 1.39999997615814,["posZ"] = 10.5165224075317,["rotX"] = 0,["rotY"] = 0,["rotZ"] = 0,["scaleX"] = 2.54999995231628,["scaleY"] = 1,["scaleZ"] = 2.54999995231628,} ,["Nickname"] = "Fold Banner",["Description"] = "Yellow",["GMNotes"] = "auto_foldtoken_Yellow",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 0,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomImage"] = { ["ImageURL"] = "https://i.imgur.com/NPXWDDV.png",["ImageSecondaryURL"] = "",["ImageScalar"] = 1,["WidthScale"] = 0,["CustomToken"] = { ["Thickness"] = 0.100000001490116,["MergeDistancePixels"] = 15,["StandUp"] = false,["Stackable"] = false,} ,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}

  --manual
  local cameraobjects_data={}
  cameraobjects_data[1] = { ["GUID"] = "48087d",["Name"] = "Custom_Assetbundle",["Transform"] = { ["posX"] = -51.0839614868164,["posY"] = 0.650783121585846,["posZ"] = -7.77313566207886,["rotX"] = 270,["rotY"] = 253.882995605469,["rotZ"] = 0,["scaleX"] = 1.15879261493683,["scaleY"] = 1.16505599021912,["scaleZ"] = 0.925000250339508,} ,["Nickname"] = "",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomAssetbundle"] = { ["AssetbundleURL"] = "http://chry.me/tts/camera_projection/rend_plane_v2.unity3d",["AssetbundleSecondaryURL"] = "http://chry.me/tts/camera_projection/rend_material.unity3d",["MaterialIndex"] = 0,["TypeIndex"] = 0,["LoopingEffectIndex"] = 0,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  cameraobjects_data[2] = { ["GUID"] = "3f8e03",["Name"] = "Custom_Assetbundle",["Transform"] = { ["posX"] = 50.8653182983398,["posY"] = 1.14174270629883,["posZ"] = -9.05861663818359,["rotX"] = 270,["rotY"] = 107.481796264648,["rotZ"] = 0,["scaleX"] = 1.15879261493683,["scaleY"] = 1.16505599021912,["scaleZ"] = 0.925000250339508,} ,["Nickname"] = "",["Description"] = "",["GMNotes"] = "",["ColorDiffuse"] = { ["r"] = 0,["g"] = 0,["b"] = 0,["a"] = 1,} ,["LayoutGroupSortIndex"] = 0,["Locked"] = true,["Grid"] = true,["Snap"] = true,["IgnoreFoW"] = false,["MeasureMovement"] = false,["DragSelectable"] = true,["Autoraise"] = true,["Sticky"] = true,["Tooltip"] = true,["GridProjection"] = false,["HideWhenFaceDown"] = false,["Hands"] = false,["CustomAssetbundle"] = { ["AssetbundleURL"] = "http://chry.me/tts/camera_projection/rend_plane_v2.unity3d",["AssetbundleSecondaryURL"] = "http://chry.me/tts/camera_projection/rend_material.unity3d",["MaterialIndex"] = 0,["TypeIndex"] = 0,["LoopingEffectIndex"] = 0,} ,["LuaScript"] = "",["LuaScriptState"] = "",["XmlUI"] = "",}
  if num_players >= 9 then
    lcolors = {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink"} --list of all colors, in order
    for i=1,2 do
      local obj = getObjectFromGUID(cameraobjects_data[i].GUID)
      if obj==nil then
        obj=spawnObjectData({data=cameraobjects_data[i]})
      else
        obj.setPositionSmooth(Vector(cameraobjects_data[i].Transform.posX,cameraobjects_data[i].Transform.posY,cameraobjects_data[i].Transform.posZ), false, false)
        obj.setRotationSmooth(Vector(cameraobjects_data[i].Transform.rotX,cameraobjects_data[i].Transform.rotY,cameraobjects_data[i].Transform.rotZ), false, false)
      end
    end
  elseif num_players >= 7 then
    lcolors = {"White", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Pink"} --list of all colors, in order
    overrides_position["Red"] = Vector(-31.6,11.30,0)
    overrides_rotation["Red"] = Vector(0,90,0)
    overrides_position["Blue"] = Vector(32.3,11.30,0)
    overrides_rotation["Blue"] = Vector(0,-90,0)
    --move panel1,2
    local obj = getObjectFromGUID(cameraobjects_data[1].GUID)
    if obj==nil then obj=spawnObjectData({data=cameraobjects_data[1]}) end
    obj.translate(Vector(0,0,-7.5)) obj.setRotation(Vector(-90,-85,0))
    local obj = getObjectFromGUID(cameraobjects_data[2].GUID)
    if obj==nil then obj=spawnObjectData({data=cameraobjects_data[2]}) end
    obj.translate(Vector(0,0,-7.5)) obj.setRotation(Vector(-90,85,0))
  elseif num_players >= 5 then
    lcolors = {"White", "Orange", "Yellow", "Green", "Teal", "Pink"} --list of all colors, in order
    for i=1,2 do
      local obj = getObjectFromGUID(cameraobjects_data[i].GUID)
      if obj~=nil then obj.destruct() end
    end
  end
  local t_delay = time_stamps.calculatePots.delay
  time_stamps.calculatePots.delay = 60
  --forcibly destruct Hands because we can pinpoint them
  for i, w in next, Hands.getHands() do w.destruct() end

  for i, v in next, gcolors do
    local use_color = indexTable(lcolors,v)~=nil
    local new_position = function(data_, position_, rotation_)
      local retval = nil
      if position_~=nil and rotation_~=nil then
        local origin = Vector(betzones_data[v].Transform.posX, betzones_data[v].Transform.posY, betzones_data[v].Transform.posZ)
        local s = Vector(data_.Transform.posX, data_.Transform.posY, data_.Transform.posZ)
        s = s - origin
        s = s:rotateOver('y',rotation_[2]-betzones_data[v].Transform.rotY)
        s = s + origin
        retval = s + (position_-origin)
      end
      return retval
    end
    local new_rotation = function(data_, position_, rotation_)
      local retval = Vector(data_.Transform.rotX, data_.Transform.rotY, data_.Transform.rotZ)
      if rotation_ then
        retval = retval + rotation_ - Vector(betzones_data[v].Transform.rotX, betzones_data[v].Transform.rotY, betzones_data[v].Transform.rotZ)
      end
      return retval
    end
    for j, t_dat in next, {'foldtoken', 'tablezones', 'backtablezones', 'betzones', 'tableobjects', 'backtableobjects', 'propstableobjects', 'handzones'} do -- 'handzones',
      local datname = t_dat .. '_data'
      local locked_objects = nil
      local data = assert(dynamic.eval(datname)[v], 'data must not be nil!')
      if _G[t_dat]==nil then _G[t_dat] = {} end
      if _G[t_dat][v]~=nil then
        locked_objects = {old=_G[t_dat][v].getPosition(), objs=((string.match(getObjectFromGUID(data.GUID) and getObjectFromGUID(data.GUID).name or '','Trigger')~=nil) and getObjectFromGUID(data.GUID).getObjects()) or {},}
        for i,obj in next, locked_objects.objs do obj.setLock(true) end
        _G[t_dat][v].destruct()
        _G[t_dat][v] = nil
      end
      local obj = getObjectFromGUID(data.GUID) if obj~=nil then obj.destruct() end
      if use_color then
        Wait.frames(function()
          _G[t_dat][v] = spawnObjectData({
            data=data,
            position=new_position(data, overrides_position[v], overrides_rotation[v]),
            rotation=new_rotation(data, overrides_position[v], overrides_rotation[v]),
            callback_function = function()
              if locked_objects~=nil and locked_objects.objs~=nil then
                for i, obj in next, locked_objects.objs do
                  if obj~=nil then
                    obj.setLock(false)
                    obj.translate(_G[t_dat][v].getPosition()-locked_objects.old)
                  end
                end
              end
            end,
          })
          if t_dat=='foldtoken' or string.match(t_dat,"objects") then Wait.frames(function()
            _G[t_dat][v].interactable = false end, 1)
          end
        end, 3)
      end
    end
  end
  Wait.frames(function() time_stamps.calculatePots.delay = t_delay end, 4)
  Wait.frames(function()
    togglePassiveButtons()
    if overlay ~= nil then
      overlay = overlay.reload()
      overlay.interactable=false
      checkAndRespawnObjects(true, theAdminColor())
      calculatePots()
    end
  end, 3)
  colors = lcolors
end
function layout.colorTransform(colors_)
end

UITableBar = {}
UITableBar.id = "$COLOR_UITableBar"
UITableBar.numSlots = 0
UITableBar.slots = {}
UITableBar = {}
  UITableBar.id = "$COLOR_UITableBar"
  UITableBar.numSlots = 0
  UITableBar.slots = {}
  function UITableBar.setup(slots)
  Global.UI.setAttribute(UITableBar.id,'width',("%d%%"):format(85/10 * slots))
  --Global.UI.setAttribute(UITableBar.id,'hideAnimationDelay',("%d%%"):format(85/10 * slots))
  UITableBar.numSlots = slots
  UITableBar.slots = {}
  for slot=slots+1,10 do
      local topid = ("$COLOR_tablebarSlot%d"):format(slot)
      Global.UI.hide(topid)
  end
  for slot=1,slots do
      local topid = ("$COLOR_tablebarSlot%d"):format(slot)
      UITableBar.slots[slot] = {
      id = topid,
      color = "Black",
      highlighted = false,
      cells = {
          [1] = {
          id = ("$SLOTID_Cell1_Text"):gsub("$SLOTID",topid),
          value = 'Name',
          attrs = {},
          },
          [2] = {
          id = ("$SLOTID_Cell2_Text"):gsub("$SLOTID",topid),
          value = '&#128163;$#',
          attrs = {},
          },
          [3] = {
          id = ("$SLOTID_Cell3_Text"):gsub("$SLOTID",topid),
          value = 'Action',
          attrs = {},
          }
      }
      }
      Global.UI.show(topid) --1234
  end
  end
  function UITableBar.hide(slot, type_)
  --type_: 1 = slot, 2 = name, 3 = color
  local topid = nil
  if slot==nil then
      topid = UITableBar.id
  else
      if type_==1 then
      topid = UITableBar.slots[slot].id
      elseif type_==2 then
      elseif type_==3  then
      local lslot = indexTable(UITableBar.slots, slot, function(a,b) return a[2].color==b end)
      assert(tonumber(lslot),"must have non nil index")
      topid = UITableBar.slots[lslot].id
      end
  end
  Global.UI.hide(topid)
  end
  function UITableBar.show(slot)
  if slot==nil then
      Global.UI.show(UITableBar.id)
      for i,slot in next, UITableBar.slots do
  --      Global.UI.show(slot.id)
      -- for j, cell in next, UITableBar.slots[i].cells do
      --   Global.UI.show(cell.id)
      -- end
      end
  else

  end
  end


  function UITableBar.setSlot(slot, tbl)
  local map = {'name','stack','action'}
  assert(tbl~=nil, "tbl cannot be nil")
  assert(UITableBar.slots, "slots cannot be nil")
  assert(slot~=nil, "slot cannot be nil")
  UITableBar.slots[slot].color = tbl.color or colors[slot]
  for cell=1,3 do
      local id = ("$COLOR_tableBarSlot$SLOTNUM_Cell$CELLNUM_Text"):gsub("$SLOTNUM",tostring(slot)):gsub("$CELLNUM",tostring(cell))
      local attrs = {color=tbl.color or colors[slot],}
      if tbl[map[cell]] ~= nil then Global.UI.setValue(id,tbl[map[cell]]) end
      Global.UI.setAttributes(id,attrs)
  end
  end
  function UITableBar.highlightSingle(slot_)
  assert(slot_~=nil,"highlightSingle: slot must be defined")
  for slot, slotrec in next, UITableBar.slots do
      if slot_~=slot and UITableBar.slots[slot].highlighted then
      UITableBar.highlight(slot, true)
      UITableBar.slots[slot].highlighted = false
      end
      if slot_==slot then
      UITableBar.slots[slot].highlighted = true
      UITableBar.highlight(slot,false)
      end
  end
  end
  function UITableBar.highlight(slot, onOff)
  local newColor = onOff and 'clear' or '#0000000f'
  Global.UI.setAttribute(UITableBar.slots[slot].id, 'color', newColor)
  end
  function UITableBar.highlightOff()
  for slot=1,#UITableBar.slots do
      UITableBar.highlight(slot, true)
      UITableBar.slots[slot].highlighted = false
  end
  end
  function UITableBar.exportXML(slots)
  slots = slots or 10
  UITableBar.numSlots = slots
  UITableBar.setup(slots)
  local outtbl = {[[<Defaults><Text class="UITableBar:@Text" fontSize="16"></Text></Defaults>]]
  , [[<Panel class="UITableBar" id="$COLOR_UITableBar" childForceExpandWidth="false" position="0 420" width="0%" height="7%" spacing="5" padding="0 0 0 0" childAlignment="MiddleCenter" allowDragging="true" returnToOriginalPositionWhenReleased="false" >]]}
  for slot=1,slots do
      outtbl[#outtbl+1] = ([[
      <TableLayout preferredWidth="180" id="$SLOTID" active="false"
      hideAnimation="FadeOut" hideAnimationDelay="$HIDE_DELAY" showAnimation="Grow" showAnimationDelay="$SHOW_DELAY"
      color="clear" rowBackgroundColor="#000000EF" cellBackgroundColor="#000000ff" outline="#FFF77A" outlineSize="6 -6">
      <Row rowBackgroundColor="#000000EF"><Cell><Text id="$SLOTID_Cell1_Text" color="Grey" >Name$SLOTNUM</Text></Cell></Row>
      <Row><Cell><Text id="$SLOTID_Cell2_Text" color="Grey" >🂡</Text></Cell></Row>
      <Row><Cell><Text id="$SLOTID_Cell3_Text" color="Grey" >&#128163;</Text></Cell></Row>
      <Row active="false"><Cell><Text id="$SLOTID_Cell4_Text" color="Grey" >BB$SLOTNUM</Text></Cell></Row>
      </TableLayout>
      ]]):gsub("$SLOTID",("$COLOR_tablebarSlot%d"):format(slot)):gsub("$SLOTNUM",tostring(slot)):gsub("$HIDE_DELAY",tostring(0.25)):gsub("$SHOW_DELAY",tostring(slot * 0.25))
  end
  outtbl[#outtbl+1] = [[</Panel>]]
  return table.concat(outtbl,'\n')
  end

UILeaderBoards = {}
for i, plc in next, flattenTbls({deepcopy(colors),{"Black",} }) do
  local l_UILeaderBoard = {}
  l_UILeaderBoard.id = plc .. "_Leaderboard"
  l_UILeaderBoard.parent = plc .. "_PL"
  log(l_UILeaderBoard.id)
  l_UILeaderBoard.slots_by_state = {}
  l_UILeaderBoard.data = {showing=true}
  l_UILeaderBoard.initialParse = function(bag_)
      return l_UILeaderBoard.data
      --when table is loaded, eat all the data in the bag
      --there is no bag, fiddle and return NO DATA FOUND
  end

  l_UILeaderBoard.exportXML = function(slot_count,col_count)
  local out_tbl = {[[<Panel id="$UI_LEADERBOARD_PL" visibility='$VCOLOR' active="true" height="320" width="300" offsetXY="600 300" allowDragging="true" returnToOriginalPositionWhenReleased="false">
  <HorizontalLayout height="30" offsetXY="0 160" alignment="UpperCenter" childForceExpandWidth="false" color="#000000ff">
  <Button preferredWidth="90" text="Current" onClick="noImplX" />
  <Button preferredWidth="90" text="All-Time" onClick="noImplX" />
  <Button preferredWidth="70" text="Stats" onClick="h_textExportDigest" />
  <Button onClick="$ID_LEADERBOARD_TL_hideshow" preferredWidth="25" text="+" />
  </HorizontalLayout>
  <TableLayout id="$ID_LEADERBOARD_TL" offsetXY="0 -20" alignment="UpperCenter" columnWidths="50 175 0" rowBackgroundColor="#000000cf" showAnimation="Grow" hideAnimation="Shrink">]],}
  for i=0,slot_count do
      out_tbl[#out_tbl+1] = '<Row color="#cccccc">'
      for j=1,col_count do
      --outline="#ccccff10" outlineSize="1 -1"
      out_tbl[#out_tbl+1] = ('<Cell id="$ID_LEADERBOARD_TL_r%02dc%02d"><Text fontStyle="bold" fontSize="16" id="$ID_LEADERBOARD_TL_r%02dc%02d_t" >r%02dc%02d</Text></Cell>'):format(i,j,i,j,i,j)
      end
      out_tbl[#out_tbl+1] = '</Row>'
  end
  out_tbl[#out_tbl+1] = '</TableLayout></Panel>'
  return string.gsub(string.gsub(string.gsub(table.concat(out_tbl,''),"$ID_LEADERBOARD_TL",l_UILeaderBoard.id),'$VCOLOR',plc),'$UI_LEADERBOARD_PL',l_UILeaderBoard.parent)
  end
  l_UILeaderBoard.setSlot = function(slot, tbl)
  local label = {}
  for j=1,3 do
      if tbl[j] then
      label[j] = l_UILeaderBoard.id .. ("_r%02dc%02d_t"):format(slot,j)
      self.UI.setAttribute(label[j],'text',tbl[j])
      end
  end
  end
  l_UILeaderBoard.setHeader = function(state_)

  end
  l_UILeaderBoard.switchState = function()

  end
  _G[l_UILeaderBoard.id .. "_hideshow"] = function(plc, id, value, flag)
  local l_plc = string.match(l_UILeaderBoard.id,'(.*)_')
  self.UI.setAttribute(l_UILeaderBoard.id,'visibility',l_plc)
  if flag~=nil then
      l_UILeaderBoard.data.showing = flag
  else
      l_UILeaderBoard.data.showing = not l_UILeaderBoard.data.showing
  end
  self.UI[({[false]='hide',[true]='show'})[l_UILeaderBoard.data.showing]](l_UILeaderBoard.id)
  self.UI.setAttribute(id,'text',({[false]='+',[true]='-'})[l_UILeaderBoard.data.showing])
  Wait.time(function()
      self.UI.setAttribute(l_UILeaderBoard.parent,'height',({[false]=50,[true]=320})[l_UILeaderBoard.data.showing])
  end,({[false]=0.25,[true]=0})[l_UILeaderBoard.data.showing])
  --self.UI.setAttribute(l_UILeaderBoard.id,'visibility',l_plc)
  end
  l_UILeaderBoard.hideshow = function(flag)
  _G[l_UILeaderBoard.id .. "_hideshow"](flag)
  end
  UILeaderBoards[plc] = l_UILeaderBoard
end
UILeaderBoard = {}
function UILeaderBoard.toggle(flag)

end
function UILeaderBoard.exportXML(slot_count,col_count)
  local outt = {}
  for plc,uil in next, UILeaderBoards do
  outt[#outt+1] = uil.exportXML(slot_count,col_count)
  end
  return table.concat(outt,'')
end

DEBUG_LEVEL=0



--====